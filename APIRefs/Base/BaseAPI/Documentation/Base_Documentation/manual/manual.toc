@numchapentry{Introduction}{1}{Introduction}{3}
@numsecentry{What is Object-Oriented Programming?}{1.1}{}{3}
@numsubsecentry{Some Basic OO Terminology}{1.1.1}{}{3}
@numsecentry{What is Objective-C?}{1.2}{}{5}
@numsecentry{History}{1.3}{}{5}
@numsecentry{What is GNUstep?}{1.4}{}{6}
@numsubsecentry{GNUstep Base Library}{1.4.1}{}{6}
@numsubsecentry{GNUstep Make Utility}{1.4.2}{}{7}
@numsubsecentry{A Word on the Graphical Environment}{1.4.3}{}{7}
@numsubsecentry{The GNUstep Directory Layout}{1.4.4}{}{7}
@numsecentry{Building Your First Objective-C Program}{1.5}{}{8}
@numchapentry{The Objective-C Language}{2}{Objective-C}{11}
@numsecentry{Non OO Additions}{2.1}{}{11}
@numsecentry{Objects}{2.2}{}{11}
@numsubsecentry{Id and nil}{2.2.1}{}{12}
@numsubsecentry{Messages}{2.2.2}{}{12}
@numsubsecentry{Polymorphism}{2.2.3}{}{13}
@numsecentry{Classes}{2.3}{}{13}
@numsubsecentry{Inheritance}{2.3.1}{}{13}
@numsubsecentry{Inheritance of Methods}{2.3.2}{}{14}
@numsubsecentry{Overriding Methods}{2.3.3}{}{14}
@numsubsecentry{Abstract Classes}{2.3.4}{}{14}
@numsubsecentry{Class Clusters}{2.3.5}{}{15}
@numsecentry{NSObject: The Root Class}{2.4}{}{15}
@numsubsecentry{The NSObject Protocol}{2.4.1}{}{16}
@numsecentry{Static Typing}{2.5}{}{16}
@numsubsecentry{Type Introspection}{2.5.1}{}{16}
@numsubsecentry{Referring to Instance Variables}{2.5.2}{}{17}
@numsecentry{Working with Class Objects}{2.6}{}{17}
@numsubsecentry{Locating Classes Dynamically}{2.6.1}{}{18}
@numsecentry{Naming Constraints and Conventions}{2.7}{}{18}
@numsecentry{Strings in GNUstep}{2.8}{}{19}
@numsubsecentry{Creating NSString Static Instances}{2.8.1}{}{19}
@numsubsecentry{NSString +stringWithFormat:}{2.8.2}{}{19}
@numsubsecentry{C String Conversion}{2.8.3}{}{20}
@numsubsecentry{NSMutableString}{2.8.4}{}{20}
@numsubsecentry{Loading and Saving Strings}{2.8.5}{}{21}
@numchapentry{Working with Objects}{3}{Objects}{23}
@numsecentry{Initializing and Allocating Objects}{3.1}{}{23}
@numsubsecentry{Initialization with Arguments}{3.1.1}{}{23}
@numsubsecentry{Memory Allocation and Zones}{3.1.2}{}{24}
@numsubsecentry{Memory Deallocation}{3.1.3}{}{25}
@numsecentry{Memory Management}{3.2}{}{25}
@numsubsecentry{Explicit Memory Management}{3.2.1}{}{25}
@numsubsecentry{OpenStep-Style (Retain/Release) Memory Management}{3.2.2}{}{25}
@numsubsubsecentry{Autorelease Pools}{3.2.2.1}{}{27}
@numsubsubsecentry{Avoiding Retain Cycles}{3.2.2.2}{}{28}
@numsubsubsecentry{Summary}{3.2.2.3}{}{28}
@numsubsecentry{ObjC-2 and Automated Reference Counting}{3.2.3}{}{29}
@numchapentry{Writing New Classes}{4}{Classes}{31}
@numsecentry{Interface}{4.1}{}{31}
@numsubsecentry{Interface Capabilities}{4.1.1}{}{31}
@numsubsecentry{Including Interfaces}{4.1.2}{}{33}
@numsubsecentry{Referring to Classes - @@class}{4.1.3}{}{33}
@numsecentry{Implementation}{4.2}{}{34}
@numsubsecentry{Writing an Implementation}{4.2.1}{}{35}
@numsubsecentry{Super and Self}{4.2.2}{}{35}
@numsubsecentry{Instance Initialization}{4.2.3}{}{36}
@numsubsecentry{Flexible Initialization}{4.2.4}{}{39}
@numsubsecentry{Instance Deallocation}{4.2.5}{}{40}
@numsecentry{Protocols}{4.3}{}{41}
@numsubsecentry{Declaring a Formal Protocol}{4.3.1}{}{41}
@numsubsecentry{Implementing a Formal Protocol}{4.3.2}{}{41}
@numsubsecentry{Using a Formal Protocol}{4.3.3}{}{42}
@numsecentry{Categories}{4.4}{}{43}
@numsubsecentry{Category Overrides}{4.4.1}{}{44}
@numsubsecentry{Categories as an Implementation Tool}{4.4.2}{}{44}
@numsubsecentry{Categories and Protocols}{4.4.3}{}{44}
@numsecentry{Simulating Private and Protected Methods}{4.5}{}{45}
@numsecentry{Simulating Class Variables}{4.6}{}{46}
@numchapentry{Advanced Messaging}{5}{Advanced Messaging}{49}
@numsecentry{How Messaging Works}{5.1}{}{49}
@numsecentry{Selectors}{5.2}{}{50}
@numsubsecentry{The Target-Action Paradigm}{5.2.1}{}{50}
@numsubsecentry{Obtaining Selectors}{5.2.2}{}{51}
@numsubsecentry{Avoiding Messaging Errors when an Implementation is Not Found}{5.2.3}{}{51}
@numsecentry{Forwarding}{5.3}{}{52}
@numsecentry{Implementations}{5.4}{}{53}
@numchapentry{Exception Handling, Logging, and Assertions}{6}{Exception Handling}{55}
@numsecentry{Exceptions}{6.1}{}{55}
@numsubsecentry{Catching and Handling Exceptions}{6.1.1}{}{55}
@numsubsecentry{Passing Exceptions Up the Call Stack}{6.1.2}{}{57}
@numsubsecentry{Where do Exceptions Originate?}{6.1.3}{}{57}
@numsubsecentry{Creating Exceptions}{6.1.4}{}{57}
@numsubsecentry{When to Use Exceptions}{6.1.5}{}{58}
@numsecentry{Logging}{6.2}{}{59}
@numsubsecentry{NSLog}{6.2.1}{}{59}
@numsubsecentry{NSDebugLog, NSWarnLog}{6.2.2}{}{59}
@numsubsecentry{Last Resorts: GSPrintf and fprintf}{6.2.3}{}{61}
@numsubsecentry{Profiling Facilities}{6.2.4}{}{61}
@numsecentry{Assertions}{6.3}{}{61}
@numsubsecentry{Assertions and their Handling}{6.3.1}{}{61}
@numsubsecentry{Custom Assertion Handling}{6.3.2}{}{62}
@numsecentry{Comparison with Java}{6.4}{}{62}
@numchapentry{Distributed Objects}{7}{Distributed Objects}{63}
@numsecentry{Object Interaction}{7.1}{}{63}
@numsecentry{The GNUstep Solution}{7.2}{}{63}
@numsubsecentry{Code at the Server}{7.2.1}{}{64}
@numsubsecentry{Code at the Client}{7.2.2}{}{65}
@numsubsecentry{Using a Protocol}{7.2.3}{}{67}
@numsubsecentry{Complete Code for Telephone Directory Application}{7.2.4}{}{68}
@numsubsecentry{GNUstep Distributed Objects Name Server}{7.2.5}{}{69}
@numsubsecentry{Look Ma, No Stubs!}{7.2.6}{}{70}
@numsecentry{A More Involved Example}{7.3}{}{70}
@numsubsecentry{Protocol Adopted at Client}{7.3.1}{}{71}
@numsubsecentry{Protocol Adopted at Server}{7.3.2}{}{71}
@numsubsecentry{Code at the Client}{7.3.3}{}{71}
@numsubsecentry{Code at the Server}{7.3.4}{}{74}
@numsecentry{Language Support for Distributed Objects}{7.4}{}{79}
@numsubsecentry{Protocol Type Qualifiers}{7.4.1}{}{79}
@numsubsecentry{Message Forwarding}{7.4.2}{}{81}
@numsecentry{Error Checking}{7.5}{}{82}
@numsubsecentry{Vending the Server Object}{7.5.1}{}{82}
@numsubsecentry{Catching Exceptions}{7.5.2}{}{82}
@numsubsecentry{The Connection Fails}{7.5.3}{}{82}
@numchapentry{Base Library}{8}{Base Library}{83}
@numsecentry{Copying, Comparing, Hashing Objects}{8.1}{}{83}
@numsecentry{Object Containers}{8.2}{}{84}
@numsecentry{Data and Number Containers}{8.3}{}{85}
@numsubsecentry{NSData}{8.3.1}{}{85}
@numsubsecentry{NSValue}{8.3.2}{}{86}
@numsubsecentry{NSNumber}{8.3.3}{}{86}
@numsubsecentry{NSRange, NSPoint, NSSize, NSRect}{8.3.4}{}{87}
@numsecentry{Date/Time Facilities}{8.4}{}{87}
@numsecentry{String Manipulation and Text Processing}{8.5}{}{87}
@numsubsecentry{NSScanner and Character Sets}{8.5.1}{}{87}
@numsubsecentry{Attributed Strings}{8.5.2}{}{87}
@numsubsecentry{Formatters}{8.5.3}{}{87}
@numsecentry{File Handling}{8.6}{}{88}
@numsecentry{Persistence and Serialization}{8.7}{}{88}
@numsubsecentry{Property List Serialization}{8.7.1}{}{88}
@numsubsecentry{Archives}{8.7.2}{}{89}
@numsecentry{Utility}{8.8}{}{92}
@numsecentry{Notifications}{8.9}{}{93}
@numsecentry{Networking and RPC}{8.10}{}{93}
@numsubsecentry{Basic Networking}{8.10.1}{}{93}
@numsubsecentry{Remote Process Communications}{8.10.2}{}{94}
@numsecentry{Threads and Run Control}{8.11}{}{94}
@numsubsecentry{Run Loops and Timers}{8.11.1}{}{95}
@numsubsecentry{Tasks and Pipes}{8.11.2}{}{95}
@numsubsecentry{Threads and Locks}{8.11.3}{}{95}
@numsubsecentry{Using @code {NSConnection} to Communicate Between Threads}{8.11.4}{}{97}
@numsecentry{GNUstep Additions}{8.12}{}{98}
@appentry{The GNUstep Documentation System}{A}{GSDoc}{99}
@appsecentry{Quick Start}{A.1}{}{99}
@appsecentry{Cross-Referencing}{A.2}{}{100}
@appsecentry{Comment the Interface or the Implementation?}{A.3}{}{100}
@appsecentry{Comparison with OS X Header Doc and Java JavaDoc}{A.4}{}{101}
@appentry{Application Resources: Bundles and Frameworks}{B}{Bundles and Frameworks}{103}
@appentry{Differences and Similarities Between Objective-C, Java, and C++}{C}{Objective-C Java and C++}{105}
@appsecentry{General}{C.1}{}{105}
@appsecentry{Language}{C.2}{}{105}
@appsecentry{Source Differences}{C.3}{}{106}
@appsecentry{Compiler Differences}{C.4}{}{106}
@appsecentry{Developer's Workbench}{C.5}{}{106}
@appsecentry{Longevity}{C.6}{}{106}
@appsecentry{Databases}{C.7}{}{106}
@appsecentry{Memory}{C.8}{}{106}
@appsecentry{Class Libraries}{C.9}{}{107}
@appentry{Programming GNUstep in Java and Guile}{D}{Java and Guile}{109}
@appentry{GNUstep Compliance to Standards}{E}{Compliance to Standards}{111}
@appsecentry{Conditional Compilation}{E.1}{}{111}
@appsecentry{User Defaults}{E.2}{}{111}
@appentry{Using the GNUstep Make Package}{F}{Make}{113}
@appsecentry{Makefile Contents}{F.1}{}{113}
@appsubsecentry{Makefile Example}{F.1.1}{}{113}
@appsubsecentry{Makefile Structure}{F.1.2}{}{114}
@appsubsecentry{Debug and Profile Information}{F.1.3}{}{115}
@appsubsecentry{Static, Shared and DLLs}{F.1.4}{}{115}
@appsecentry{Project Types}{F.2}{}{115}
@unnchapentry{Concept Index}{10002}{}{117}
