{
    GCObject = (
	"+gcCollectGarbage",
	"+gcIsCollecting",
	"+gcObjectWillBeDeallocated:",
	"-gcDecrementRefCount",
	"-gcDecrementRefCountOfContainedObjects",
	"-gcIncrementRefCount",
	"-gcIncrementRefCountOfContainedObjects"
    );
    "GCObject(Extra)" = (
	"-gcNextObject",
	"-gcPreviousObject",
	"-gcSetNextObject:",
	"-gcSetPreviousObject:",
	"-gcAlreadyVisited",
	"-gcSetVisited:"
    );
    GSMimeCodingContext = (
	"-atEnd",
	"-decodeData:length:intoData:",
	"-setAtEnd:"
    );
    GSMimeDocument = (
	"+charsetForXml:",
	"+charsetFromEncoding:",
	"+decodeBase64:",
	"+decodeBase64String:",
	"+documentWithContent:type:name:",
	"+encodeBase64:",
	"+encodeBase64String:",
	"+encodingFromCharset:",
	"-addContent:",
	"-addHeader:",
	"-addHeader:value:parameters:",
	"-allHeaders",
	"-content",
	"-contentByID:",
	"-contentByLocation:",
	"-contentByName:",
	"-copyWithZone:",
	"-contentFile",
	"-contentID",
	"-contentLocation",
	"-contentName",
	"-contentSubtype",
	"-contentType",
	"-contentsByName:",
	"-convertTo7BitSafe",
	"-convertToBase64",
	"-convertToBinary",
	"-convertToData",
	"-convertToText",
	"-deleteContent:",
	"-deleteHeader:",
	"-deleteHeaderNamed:",
	"-estimatedSize",
	"-headerNamed:",
	"-headersNamed:",
	"-makeBoundary",
	"-makeContentID",
	"-makeHeader:value:parameters:",
	"-makeMessageID",
	"-rawMimeData",
	"-rawMimeData:",
	"-rawMimeData:foldedAt:",
	"-setContent:",
	"-setContent:type:",
	"-setContent:type:name:",
	"-setContentType:",
	"-setHeader:",
	"-setHeader:value:parameters:"
    );
    GSMimeHeader = (
	"+headerWithName:value:parameters:",
	"+makeQuoted:always:",
	"+makeToken:preservingCase:",
	"+makeToken:",
	"-copyWithZone:",
	"-estimatedSize",
	"-fullValue",
	"-initWithName:value:",
	"-initWithName:value:parameters:",
	"-name",
	"-namePreservingCase:",
	"-objectForKey:",
	"-objects",
	"-parameterForKey:",
	"-parameters",
	"-parametersPreservingCase:",
	"-rawMimeData",
	"-rawMimeDataPreservingCase:",
	"-rawMimeDataPreservingCase:foldedAt:",
	"-rawMimeDataPreservingCase:foldedAt:to:",
	"-setObject:forKey:",
	"-setParameter:forKey:",
	"-setParameters:",
	"-setValue:",
	"-text",
	"-value"
    );
    GSMimeParser = (
	"+documentFromData:",
	"+mimeParser",
	"-contextFor:",
	"-data",
	"-decodeData:fromRange:intoData:withContext:",
	"-excess",
	"-expectNoHeaders",
	"-isComplete",
	"-isHttp",
	"-isInBody",
	"-isInHeaders",
	"-mimeDocument",
	"-parse:",
	"-parseHeaders:remaining:",
	"-parseHeader:",
	"-scanHeaderBody:into:",
	"-scanName:",
	"-scanPastSpace:",
	"-scanSpecial:",
	"-scanToken:",
	"-setBuggyQuotes:",
	"-setDefaultCharset:",
	"-setHeadersOnly",
	"-setIsHttp"
    );
    GSMimeSMTPClient = (
	"-abort",
	"-delegate",
	"-flush:",
	"-lastError",
	"-queueSize",
	"-send:",
	"-send:envelopeID:",
	"-setDelegate:",
	"-setHostname:",
	"-setIdentity:",
	"-setMaximum:",
	"-setOriginator:",
	"-setPort:",
	"-setUsername:",
	"-state",
	"-stateDesc"
    );
    GSMimeSerializer = (
	"+binarySerializer",
	"+smtp7bitSerializer",
	"-copyWithZone:",
	"-dataEncoding",
	"-encodeDocument:",
	"-encodePart:to:",
	"-foldAt",
	"-setFoldAt:",
	"-setDataEncoding:",
	"-setTextEncoding:",
	"-setUse8bit:",
	"-textEncoding",
	"-use8bit"
    );
    GSSAXHandler = (
	"+handler",
	"-lib",
	"-parser",
	"-attribute:value:",
	"-attributeDecl:name:type:typeDefValue:defaultValue:",
	"-characters:",
	"-cdataBlock:",
	"-comment:",
	"-elementDecl:type:",
	"-endDocument",
	"-endElement:",
	"-endElement:prefix:href:",
	"-entityDecl:type:public:system:content:",
	"-error:",
	"-error:colNumber:lineNumber:",
	"-externalSubset:externalID:systemID:",
	"-fatalError:",
	"-fatalError:colNumber:lineNumber:",
	"-getEntity:",
	"-getParameterEntity:",
	"-globalNamespace:href:prefix:",
	"-hasExternalSubset",
	"-hasInternalSubset",
	"-ignoreWhitespace:",
	"-internalSubset:externalID:systemID:",
	"-isStandalone",
	"-loadEntity:at:",
	"-namespaceDecl:href:prefix:",
	"-notationDecl:public:system:",
	"-processInstruction:data:",
	"-reference:",
	"-startDocument",
	"-startElement:attributes:",
	"-startElement:prefix:href:attributes:namespaces:",
	"-unparsedEntityDecl:public:system:notationName:",
	"-warning:",
	"-warning:colNumber:lineNumber:"
    );
    GSTLSCertificateList = (
	"+listFromFile:",
	"-certificateList",
	"-count",
	"-expiresAt",
	"-expiresAt:"
    );
    GSTLSCredentials = (
	"+credentialsFromCAFile:defaultCAFile:revokeFile:defaultRevokeFile:certificateFile:certificateKeyFile:certificateKeyPassword:asClient:debug:",
	"+selfSigned:",
	"-credentials",
	"-key",
	"-list",
	"-trust"
    );
    GSTLSDHParams = (
	"+current",
	"+generate",
	"+paramsFromFile:",
	"-params"
    );
    GSTLSObject = (
	"+dataForTLSFile:",
	"+setData:forTLSFile:"
    );
    GSTLSPrivateKey = (
	"+keyFromFile:withPassword:",
	"-key"
    );
    GSTLSSession = (
	"+sessionWithOptions:direction:transport:push:pull:",
	"-initWithOptions:direction:transport:push:pull:",
	"-active",
	"-age",
	"-credentials",
	"-debug",
	"-disconnect:",
	"-handshake",
	"-issuer",
	"-owner",
	"-pending",
	"-problem",
	"-read:length:",
	"-sessionInfo",
	"-write:length:",
	"-verify"
    );
    GSXMLAttribute = (
	"-value"
    );
    GSXMLDocument = (
	"+documentWithVersion:",
	"-description",
	"-encoding",
	"-lib",
	"-makeNodeWithNamespace:name:content:",
	"-root",
	"-setRoot:",
	"-version",
	"-writeToFile:atomically:",
	"-writeToURL:atomically:"
    );
    "GSXMLDocument(XSLT)" = (
	"+xsltTransformFile:stylesheet:params:",
	"+xsltTransformFile:stylesheet:",
	"+xsltTransformXml:stylesheet:params:",
	"+xsltTransformXml:stylesheet:",
	"-xsltTransform:params:",
	"-xsltTransform:"
    );
    GSXMLNamespace = (
	"+descriptionFromType:",
	"+typeFromDescription:",
	"-href",
	"-lib",
	"-next",
	"-prefix",
	"-type",
	"-typeDescription"
    );
    GSXMLNode = (
	"+descriptionFromType:",
	"+typeFromDescription:",
	"-attributes",
	"-content",
	"-description",
	"-document",
	"-escapedContent",
	"-firstAttribute",
	"-firstChild",
	"-firstChildElement",
	"-isElement",
	"-isText",
	"-lib",
	"-makeAttributeWithName:value:",
	"-makeChildWithNamespace:name:content:",
	"-makeComment:",
	"-makeNamespaceHref:prefix:",
	"-makePI:content:",
	"-makeText:",
	"-name",
	"-namespace",
	"-namespaceDefinitions",
	"-next",
	"-nextElement",
	"-objectForKey:",
	"-parent",
	"-previous",
	"-previousElement",
	"-propertiesAsDictionaryWithKeyTransformationSel:",
	"-setObject:forKey:",
	"-type",
	"-typeDescription",
	"-setNamespace:"
    );
    GSXMLParser = (
	"+loadEntity:at:",
	"+parser",
	"+parserWithContentsOfFile:",
	"+parserWithContentsOfURL:",
	"+parserWithData:",
	"+parserWithSAXHandler:",
	"+parserWithSAXHandler:withContentsOfFile:",
	"+parserWithSAXHandler:withContentsOfURL:",
	"+parserWithSAXHandler:withData:",
	"+setDTDs:",
	"+xmlEncodingStringForStringEncoding:",
	"-abortParsing",
	"-columnNumber",
	"-document",
	"-doValidityChecking:",
	"-errNo",
	"-getWarnings:",
	"-initWithSAXHandler:",
	"-initWithSAXHandler:withContentsOfFile:",
	"-initWithSAXHandler:withContentsOfURL:",
	"-initWithSAXHandler:withData:",
	"-initWithSAXHandler:withInputStream:",
	"-keepBlanks:",
	"-lineNumber",
	"-messages",
	"-parse",
	"-parse:",
	"-publicID",
	"-saveMessages:",
	"-resolveEntities:",
	"-substituteEntities:",
	"-systemID"
    );
    GSXMLRPC = (
	"-buildMethod:params:",
	"-buildMethodCall:params:",
	"-buildResponseWithFaultCode:andString:",
	"-buildResponseWithParams:",
	"-compact",
	"-delegate",
	"-initWithURL:",
	"-initWithURL:certificate:privateKey:password:",
	"-makeMethodCall:params:timeout:",
	"-parseMethod:params:",
	"-parseResponse:params:",
	"-result",
	"-sendMethodCall:params:timeout:",
	"-setCompact:",
	"-setDebug:",
	"-setDelegate:",
	"-setTimeZone:",
	"-timeout:",
	"-timeZone",
	"-URLHandle:resourceDataDidBecomeAvailable:",
	"-URLHandle:resourceDidFailLoadingWithReason:",
	"-URLHandleResourceDidBeginLoading:",
	"-URLHandleResourceDidCancelLoading:",
	"-URLHandleResourceDidFinishLoading:"
    );
    "GSXMLRPC(Delegate)" = (
	"-completedXMLRPC:"
    );
    GSXPathBoolean = (
	"-booleanValue"
    );
    GSXPathContext = (
	"-initWithDocument:",
	"-evaluateExpression:",
	"-registerNamespaceWithPrefix:href:"
    );
    GSXPathNodeSet = (
	"-count",
	"-length",
	"-nodeAtIndex:"
    );
    GSXPathNumber = (
	"-doubleValue"
    );
    GSXPathString = (
	"-stringValue"
    );
    "NSArray(GNUstepBase)" = (
	"-insertionPosition:usingFunction:context:",
	"-insertionPosition:usingSelector:"
    );
    "NSAttributedString(GNUstepBase)" = (
	"-attributedSubstringWithRange:"
    );
    "NSBundle(GNUstepBase)" = (
	"+pathForLibraryResource:ofType:inDirectory:"
    );
    "NSCalendarDate(GNUstepBase)" = (
	"-isoYear",
	"-weekOfYear"
    );
    "NSData(GNUstepBase)" = (
	"+dataWithRandomBytesOfLength:",
	"-escapedRepresentation",
	"-escapedRepresentation:",
	"-gunzipped",
	"-gzipped:",
	"-isGzipped",
	"-hexadecimalRepresentation",
	"-hexadecimalRepresentation:",
	"-initWithHexadecimalRepresentation:",
	"-md5Digest",
	"-uudecodeInto:name:mode:",
	"-uuencodeInto:name:mode:"
    );
    "NSFileHandle(GNUstepBase)" = (
	"+fileHandleAsServerAtAddress:service:protocol:",
	"-socketAddress"
    );
    "NSMutableString(GNUstepBase)" = (
	"-deleteSuffix:",
	"-deletePrefix:",
	"-immutableProxy",
	"-replaceString:withString:",
	"-trimLeadSpaces",
	"-trimTailSpaces",
	"-trimSpaces"
    );
    "NSNumber(GNUstepBase)" = (
	"+valueFromString:"
    );
    "NSObject(GNUstepBase)" = (
	"-compare:",
	"-isInstance",
	"-makeImmutableCopyOnFail:",
	"-makeImmutable",
	"-notImplemented:",
	"-subclassResponsibility:",
	"-shouldNotImplement:"
    );
    "NSObject(GSAtExit)" = (
	"+atExit"
    );
    "NSObject(GSCleanup)" = (
	"+leak:",
	"+leakAt:",
	"+registerAtExit",
	"+registerAtExit:",
	"+setShouldCleanUp:",
	"+shouldCleanUp"
    );
    "NSObject(GSMimeSMTPClient)" = (
	"-smtpClient:mimeFailed:",
	"-smtpClient:mimeSent:",
	"-smtpClient:mimeUnsent:"
    );
    "NSObject(MemoryFootprint)" = (
	"+contentSizeOf:excluding:",
	"-sizeInBytesExcluding:",
	"-sizeInBytes",
	"-sizeOfContentExcluding:",
	"-sizeOfInstance"
    );
    "NSProcessInfo(GNUstepBase)" = (
	"-debugLoggingEnabled",
	"-debugSet",
	"-setDebugLoggingEnabled:"
    );
    "NSString(GNUstepBase)" = (
	"+stringWithFormat:arguments:",
	"-stringByDeletingPrefix:",
	"-stringByDeletingSuffix:",
	"-stringByTrimmingLeadSpaces",
	"-stringByTrimmingTailSpaces",
	"-stringByTrimmingSpaces",
	"-stringByReplacingString:withString:",
	"-substringFromRange:"
    );
    "NSString(GSXML)" = (
	"-stringByEscapingXML",
	"-stringByUnescapingXML"
    );
    "NSTask(GNUstepBase)" = (
	"+executableExtensions",
	"+executablePath:",
	"+launchPathForTool:"
    );
    "NSURL(GNUstepBase)" = (
	"-fullPath",
	"-pathWithEscapes"
    );
    "NSURL(GNUstepBaseAdditions)" = (
	"-cacheKey",
	"-initWithScheme:user:password:host:port:fullPath:parameterString:query:fragment:"
    );
}