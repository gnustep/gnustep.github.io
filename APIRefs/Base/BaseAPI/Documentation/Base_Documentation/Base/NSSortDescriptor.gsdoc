<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSSortDescriptor" stylesheeturl="gnustepStyle" up="Base">
  <head>
    <title>NSSortDescriptor class documentation</title>
    <author name="Saso Kiselkov">
      <email address="diablos@manga.sk">
        diablos@manga.sk
      </email>
    </author>
    <date>Generated at 2024-11-07 16:52:01 -0500</date>
    <copy>2005 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSSortDescriptor class
      </heading>
      <class name="NSSortDescriptor" super="NSObject" ovadd="10.3.0">
        <declared>Foundation/NSSortDescriptor.h</declared>
        <conform>NSCopying</conform>
        <conform>NSCoding</conform>
        <desc>
          Instances of this class are used to perform
          multi-level sorts of arrays containging
          collections or other objects whose properties can
          be obtained using key names.
        </desc>
        <method type="id" factory="yes" ovadd="10.6.0">
          <sel>sortDescriptorWithKey:</sel>
          <arg type="NSString*">aKey</arg>
          <sel>ascending:</sel>
          <arg type="BOOL">ascending</arg>
          <desc>
            <p>
              Returns an autoreleased sort descriptor for
              comparisons using the 'compare:' selector and
              the specified key and ordering.
            </p>
            <p>
              See also
              <ref type="method" id="-initWithKey:ascending:">
                -initWithKey:ascending:
              </ref>
              .
            </p>
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.6.0">
          <sel>sortDescriptorWithKey:</sel>
          <arg type="NSString*">key</arg>
          <sel>ascending:</sel>
          <arg type="BOOL">ascending</arg>
          <sel>comparator:</sel>
          <arg type="NSComparator">cmptr</arg>
          <desc>
            <p>
              Returns an autoreleased sort descriptor
              initialized to perform comparisons in the
              specified order using the comparator to compare
              the property aKey of each object.
            </p>
            <p>
              See also
              <ref type="method" id="-initWithKey:ascending:selector:">-initWithKey:ascending:selector:</ref>.
            </p>
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.6.0">
          <sel>sortDescriptorWithKey:</sel>
          <arg type="NSString*">aKey</arg>
          <sel>ascending:</sel>
          <arg type="BOOL">ascending</arg>
          <sel>selector:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            <p>
              Returns an autoreleased sort descriptor
              initialized to perform comparisons in the
              specified order using <var>aSelector</var> to
              compare the property <var>aKey</var> of each
              object.
            </p>
            <p>
              See also
              <ref type="method" id="-initWithKey:ascending:selector:">-initWithKey:ascending:selector:</ref>.
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.3.0">
          <sel>ascending</sel>
          <desc>
            Returns a flag indicating whether the sort
            descriptor sorts objects in ascending order (
            <code>YES</code>) or descending order (
            <code>NO</code>).
          </desc>
        </method>
        <method type="NSComparisonResult" ovadd="10.3.0">
          <sel>compareObject:</sel>
          <arg type="id">object1</arg>
          <sel>toObject:</sel>
          <arg type="id">object2</arg>
          <desc>
            Returns the result of comparing <var>object1</var>
            to <var>object2</var> using the property whose key is
            defined in the receiver and using the selector of
            the receiver. If the receiver performs a descending
            order sort, the result of this comparison is the
            opposite of that prroduced by applying the
            selector.
          </desc>
        </method>
        <method type="id" ovadd="10.3.0">
          <sel>initWithKey:</sel>
          <arg type="NSString*">key</arg>
          <sel>ascending:</sel>
          <arg type="BOOL">ascending</arg>
          <desc>
            Initialises the receiver for comparisons using
            the 'compare:' selector and the specified
            <var>key</var> and ordering.
          </desc>
        </method>
        <method type="id" init="yes" ovadd="10.6.0">
          <sel>initWithKey:</sel>
          <arg type="NSString*">key</arg>
          <sel>ascending:</sel>
          <arg type="BOOL">ascending</arg>
          <sel>comparator:</sel>
          <arg type="NSComparator">cmptr</arg>
          <desc>
            Initialises the receiver to perform comparisons
            in the specified order using the comparator to compare
            the property <var>key</var> of each object.
          </desc>
        </method>
        <method type="id" init="yes" ovadd="10.3.0">
          <sel>initWithKey:</sel>
          <arg type="NSString*">key</arg>
          <sel>ascending:</sel>
          <arg type="BOOL">ascending</arg>
          <sel>selector:</sel>
          <arg type="SEL">selector</arg>
          <desc>
            Initialises the receiver to perform comparisons
            in the specified order using <var>selector</var> to
            compare the property <var>key</var> of each object.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.3.0">
          <sel>key</sel>
          <desc>
            Returns the key used to obtain the property on
            which comparisons are based.
          </desc>
        </method>
        <method type="id" ovadd="10.3.0">
          <sel>reversedSortDescriptor</sel>
          <desc>
            Returns a copy of the receiver which compares and
            sorts in reversed order.
          </desc>
        </method>
        <method type="SEL" ovadd="10.3.0">
          <sel>selector</sel>
          <desc>
            Returns the selector used to compare the properties
            of objects.
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSArray(NSSortDescriptorSorting)
        category
      </heading>
      <category name="NSSortDescriptorSorting" class="NSArray" ovadd="10.3.0">
        <declared>Foundation/NSSortDescriptor.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="NSArray*" ovadd="10.3.0">
          <sel>sortedArrayUsingDescriptors:</sel>
          <arg type="NSArray*">sortDescriptors</arg>
          <desc>
            Produces a sorted array using the mechanism
            described for
            <ref type="method" id="-sortUsingDescriptors:" class="NSMutableArray(NSSortDescriptorSorting)">[NSMutableArray(NSSortDescriptorSorting) -sortUsingDescriptors:]</ref>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSMutableArray(NSSortDescriptorSorting)
        category
      </heading>
      <category name="NSSortDescriptorSorting" class="NSMutableArray" ovadd="10.3.0">
        <declared>Foundation/NSSortDescriptor.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="void" ovadd="10.3.0">
          <sel>sortUsingDescriptors:</sel>
          <arg type="NSArray*">sortDescriptors</arg>
          <desc>
            This method works like this: first, it sorts the
            entire contents of the array using the first sort
            descriptor. Then, after each sort-run, it looks
            whether there are sort descriptors left to process,
            and if yes, looks at the partially sorted array, finds
            all portions in it which are equal (evaluate to
            NSOrderedSame) and applies the following
            descriptor onto them. It repeats this either
            until all descriptors have been applied or there are
            no more equal portions (equality ranges) left in the
            array.
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSSet(NSSortDescriptorSorting)
        category
      </heading>
      <category name="NSSortDescriptorSorting" class="NSSet" ovadd="10.6.0">
        <declared>Foundation/NSSortDescriptor.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="NSArray*" ovadd="10.6.0">
          <sel>sortedArrayUsingDescriptors:</sel>
          <arg type="NSArray*">sortDescriptors</arg>
          <desc>
            Produces a sorted array from using the mechanism
            described for
            <ref type="method" id="-sortUsingDescriptors:" class="NSMutableArray(NSSortDescriptorSorting)">[NSMutableArray(NSSortDescriptorSorting) -sortUsingDescriptors:]</ref>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
