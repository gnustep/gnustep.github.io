<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSXMLNode" stylesheeturl="gnustepStyle" up="Base">
  <head>
    <title>NSXMLNode class documentation</title>
    <author name="Richard Frith-Macdonald">
      <email address="rfm@gnu.org">
        rfm@gnu.org
      </email>
    </author>
    <date>Generated at 2024-11-07 16:52:01 -0500</date>
    <copy>2008 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSXMLNode class
      </heading>
      <class name="NSXMLNode" super="NSObject" ovadd="1.0.0">
        <declared>Foundation/NSXMLNode.h</declared>
        <conform>NSCopying</conform>
        <desc>
          The most primitive unit in an XML document.
        </desc>
        <ivariable type="GSInternal*" name="_internal" validity="public" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>DTDNodeWithXMLString:</sel>
          <arg type="NSString*">string</arg>
          <desc>
            Creates and returns a DTD node from the supplied
            <var>string</var>. The node might describe element,
            attribute, entity, or notation.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>attributeWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>URI:</sel>
          <arg type="NSString*">URI</arg>
          <sel>stringValue:</sel>
          <arg type="NSString*">stringValue</arg>
          <desc>
            Creates and returns an attribute node with the
            specified (fully qualified) <var>name</var>,
            namespace <var>URI</var>, and value.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>attributeWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>stringValue:</sel>
          <arg type="NSString*">stringValue</arg>
          <desc>
            Creates and returns an attribute node with the
            specified <var>name</var> and value.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>commentWithStringValue:</sel>
          <arg type="NSString*">stringValue</arg>
          <desc>
            Creates and returns a comment node with the
            supplied text.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>document</sel>
          <desc>
            Creates and returns an empty document...
            convenience method.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>documentWithRootElement:</sel>
          <arg type="NSXMLElement*">element</arg>
          <desc>
            Creates and returns a new document intialised with
            the supplied root node.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>elementWithName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
            Creates and returns a node node with the specified
            <var>name</var>.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>elementWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>URI:</sel>
          <arg type="NSString*">URI</arg>
          <desc>
            Creates and returns a node with the supplied (fully
            qualified <var>name</var>) an namespace
            <var>URI</var>.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>elementWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>children:</sel>
          <arg type="NSArray*">children</arg>
          <sel>attributes:</sel>
          <arg type="NSArray*">attributes</arg>
          <desc>
            Creates and returns a node containing the supplied
            child nodes and with the attribute nodes from the
            supplied array.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>elementWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>stringValue:</sel>
          <arg type="NSString*">string</arg>
          <desc>
            Creates and returns a node with the pecified
            <var>name</var> and with a single text node
            (containing <var>string</var>) as its content.
          </desc>
        </method>
        <method type="NSString*" factory="yes" ovadd="1.0.0">
          <sel>localNameForName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
            Strips any leading namespace prefix from
            <var>name</var> and returns the result.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>namespaceWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>stringValue:</sel>
          <arg type="NSString*">stringValue</arg>
          <desc>
            Creates and returns a node mapping the supplkied
            namespace <var>name</var> to the string value
            (URI).
          </desc>
        </method>
        <method type="NSXMLNode*" factory="yes" ovadd="1.0.0">
          <sel>predefinedNamespaceForPrefix:</sel>
          <arg type="NSString*">name</arg>
          <desc>
            Returns the namespace node corresponding to a
            predefined namespace names (one of xml, xs, or
            xsi)
          </desc>
        </method>
        <method type="NSString*" factory="yes" ovadd="1.0.0">
          <sel>prefixForName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
            Returns the namespace prefix of <var>name</var>.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>processingInstructionWithName:</sel>
          <arg type="NSString*">name</arg>
          <sel>stringValue:</sel>
          <arg type="NSString*">stringValue</arg>
          <desc>
            Creates and return a processinc insruction node
            with th specified <var>name</var> and textual value.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>textWithStringValue:</sel>
          <arg type="NSString*">stringValue</arg>
          <desc>
            Creates and returns a simple text node.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>URI</sel>
          <desc>
            Returns the URI of the receiver.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>XMLString</sel>
          <desc>
            Returns the text of the receiver as XML (ie in the
            form it would have in an XML document).
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>XMLStringWithOptions:</sel>
          <arg type="NSUInteger">theOptions</arg>
          <desc>
            Returns the text of the receiver as XML (ie in the
            form it would have in an XML document), with the
            specified options controlling it.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>XPath</sel>
          <desc>
            Returns the XPath string to access the receiver
            with the document.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>canonicalXMLStringPreservingComments:</sel>
          <arg type="BOOL">comments</arg>
          <desc>
            Returns the canonical form (see
            http://www.w3.org/TR/xml-c14n)
            of the receiveri as <strong>long</strong> as the
            NSXMLNodePreserveWhitespace has
            been set. If the option as not been set, return the
            same without white space preserved.
          </desc>
        </method>
        <method type="NSXMLNode*" ovadd="1.0.0">
          <sel>childAtIndex:</sel>
          <arg type="NSUInteger">index</arg>
          <desc>
            Returns the child node if the receiver at the
            specified <var>index</var>.
          </desc>
        </method>
        <method type="NSUInteger" ovadd="1.0.0">
          <sel>childCount</sel>
          <desc>
            Returns the number of immediate child nodes of the
            receiver. <br /> This method is more efficient
            than getting the array of children and counting it.
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>children</sel>
          <desc>
            Returns n array containing the immediate child
            nodes of the receiver.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>detach</sel>
          <desc>
            Detaches the receiver from its parent node.
          </desc>
        </method>
        <method type="NSUInteger" ovadd="1.0.0">
          <sel>index</sel>
          <desc>
            Return the index of the receiver within its parent
            node.
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initWithKind:</sel>
          <arg type="NSXMLNodeKind">theKind</arg>
          <desc>
            Initialises the receiver as a specific kind of
            node. <br /> Calls
            <ref type="method" id="-initWithKind:options:">
              -initWithKind:options:
            </ref>
            using NSXMLNodeOptionsNone and returns the result.
          </desc>
        </method>
        <method type="id" init="yes" ovadd="1.0.0">
          <sel>initWithKind:</sel>
          <arg type="NSXMLNodeKind">theKind</arg>
          <sel>options:</sel>
          <arg type="NSUInteger">theOptions</arg>
          <desc>
            Initialises the receiver as the specified kind
            of node and with the specified options.
          </desc>
        </method>
        <method type="NSXMLNodeKind" ovadd="1.0.0">
          <sel>kind</sel>
          <desc>
            Returns the kind of node represented by the
            receiver.
          </desc>
        </method>
        <method type="NSUInteger" ovadd="1.0.0">
          <sel>level</sel>
          <desc>
            Return the level of the receiver within the tree of
            nodes. <br /> A document or a node which is not
            inside another is at level 0.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>localName</sel>
          <desc>
            Returns the name of the receiver without any
            namespace prefix.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>name</sel>
          <desc>
            Returns the name of the receiver.
          </desc>
        </method>
        <method type="NSXMLNode*" ovadd="1.0.0">
          <sel>nextNode</sel>
          <desc>
            Returns the next node in the tree.
          </desc>
        </method>
        <method type="NSXMLNode*" ovadd="1.0.0">
          <sel>nextSibling</sel>
          <desc>
            Returns the next sibling of the receiver
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>nodesForXPath:</sel>
          <arg type="NSString*">anxpath</arg>
          <sel>error:</sel>
          <arg type="NSError**">error</arg>
          <desc>
            Returns the nodes resulting from applying xpath to
            the receiver. <br /> Before using xpath on a tree, you
            must call the
            <ref type="method" id="-normalizeAdjacentTextNodesPreservingCDATA:">-normalizeAdjacentTextNodesPreservingCDATA:</ref> with <code>NO</code> as the argument, in order to avoid problems where the xpath syntax cannot cope with multiple text nodes.
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>objectValue</sel>
          <desc>
            Returns the object value of the receiver (as set
            using -setObjectValue:) or <code>nil</code> if there
            is none.
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>objectsForXQuery:</sel>
          <arg type="NSString*">xquery</arg>
          <sel>constants:</sel>
          <arg type="NSDictionary*">constants</arg>
          <sel>error:</sel>
          <arg type="NSError**">error</arg>
          <desc>
            Returns the data resulting from calling the query
            on the receiver. <br /> Before using xpath on a tree,
            you must call the
            <ref type="method" id="-normalizeAdjacentTextNodesPreservingCDATA:">-normalizeAdjacentTextNodesPreservingCDATA:</ref> with <code>NO</code> as the argument, in order to avoid problems where the xpath syntax cannot cope with multiple text nodes. <br /> The value of <var>constants</var> is a dictionary of <var>constants</var> declared to be "external" in the query. <br /> The resulting array amy contain array, data, date, number, string, and URL objects as well as nodes.
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>objectsForXQuery:</sel>
          <arg type="NSString*">xquery</arg>
          <sel>error:</sel>
          <arg type="NSError**">error</arg>
          <desc>
            Returns the data resulting from calling the query
            on the receiver. <br /> The same as
            objectsForXQuery:constants:error:
            without the constants.
          </desc>
        </method>
        <method type="NSXMLNode*" ovadd="1.0.0">
          <sel>parent</sel>
          <desc>
            Returns the parent node of the receiver or
            <code>nil</code> if the receiver is not within
            another node.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>prefix</sel>
          <desc>
            Returns the namepsace prefix for the receiver or
            <code>nil</code> if there is no namespace prefix.
          </desc>
        </method>
        <method type="NSXMLNode*" ovadd="1.0.0">
          <sel>previousNode</sel>
          <desc>
            Returns the previous node in the tree... stepping
            through the tree backwards.
          </desc>
        </method>
        <method type="NSXMLNode*" ovadd="1.0.0">
          <sel>previousSibling</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSXMLDocument*" ovadd="1.0.0">
          <sel>rootDocument</sel>
          <desc>
            Returns the document containing the receiver, or
            <code>nil</code> if the receiver does not lie within
            a document.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setName:</sel>
          <arg type="NSString*">name</arg>
          <desc>
            Sets the <var>name</var> of the receiver.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setObjectValue:</sel>
          <arg type="id">value</arg>
          <desc>
            Sets the content of the receiver, removing any
            existing children (including comments and
            processing instructions). <br /> For an element
            node, this sets text contetn within the node.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setStringValue:</sel>
          <arg type="NSString*">string</arg>
          <desc>
            Sets the content of the receiver to be the supplied
            <var>string</var> value... which involves removing
            existing content, comments, and processing
            instructions. <br /> If the receiver is an
            element node, this creates a text node containing
            the <var>string</var> value as the sole child of the
            receiver.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setStringValue:</sel>
          <arg type="NSString*">string</arg>
          <sel>resolvingEntities:</sel>
          <arg type="BOOL">resolve</arg>
          <desc>
            Sets the <var>string</var> content of the receiver.
            <br /> if the <var>resolve</var> flag is
            <code>YES</code> then any entities which can be
            resolved are replaced by the resolved versions.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setURI:</sel>
          <arg type="NSString*">URI</arg>
          <desc>
            Sets the <var>URI</var> of the receiver.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>stringValue</sel>
          <desc>
            Returns the string value of the receiver. For kinds
            of node which have direct string content, this simply
            returns that content. For elements this recursively
            traverses the children of the receiver appending
            the text of each child to a single string result.
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
