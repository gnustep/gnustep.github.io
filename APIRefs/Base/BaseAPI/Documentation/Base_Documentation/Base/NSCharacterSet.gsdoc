<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSCharacterSet" stylesheeturl="gnustepStyle" up="Base">
  <head>
    <title>NSCharacterSet class reference</title>
    <author name="Adam Fedor">
      <email address="fedor@boulder.colorado.edu">
        fedor@boulder.colorado.edu
      </email>
    </author>
    <author name="Richard Frith-Macdonald">
      <email address="rfm@gnu.org">
        rfm@gnu.org
      </email>
    </author>
    <date>Generated at 2024-11-07 16:52:01 -0500</date>
    <copy>
      1995, 1996, 1997, 1998 Free Software Foundation, Inc.
    </copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSCharacterSet class
      </heading>
      <class name="NSCharacterSet" super="NSObject" ovadd="1.0.0">
        <declared>Foundation/NSCharacterSet.h</declared>
        <conform>NSCoding</conform>
        <conform>NSCopying</conform>
        <conform>NSMutableCopying</conform>
        <desc>
          Represents a set of unicode characters. Used by
          <ref type="class" id="NSScanner">NSScanner</ref>
            and
            <ref type="class" id="NSString">NSString</ref>
              for parsing-related methods.
        </desc>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>URLFragmentAllowedCharacterSet</sel>
          <desc>
            Returns allowed characers for URL fragment
            component.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>URLHostAllowedCharacterSet</sel>
          <desc>
            Returns allowed characers for URL host component.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>URLPasswordAllowedCharacterSet</sel>
          <desc>
            Returns allowed characers for URL password
            component.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>URLPathAllowedCharacterSet</sel>
          <desc>
            Returns allowed characers for URL path component.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>URLQueryAllowedCharacterSet</sel>
          <desc>
            Returns allowed characers for URL query component.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>URLUserAllowedCharacterSet</sel>
          <desc>
            Returns allowed characers for URL USER component.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>alphanumericCharacterSet</sel>
          <desc>
            Returns a character set containing letters,
            numbers, and diacritical marks. Note that
            "letters" includes all alphabetic as well as
            Chinese characters, etc..
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>capitalizedLetterCharacterSet</sel>
          <desc>
            Returns a character set containing letters in the
            unicode Titlecase category.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>characterSetWithBitmapRepresentation:</sel>
          <arg type="NSData*">data</arg>
          <desc>
            Returns a character set containing characters as
            encoded in the <var>data</var> object (8192 bytes)
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>characterSetWithCharactersInString:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            Returns set with characters in <var>aString</var>,
            or empty set for empty string. Raises an exception if
            given a <code>nil</code> string.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="4.0.0" ovrem="10.0.0">
          <sel>characterSetWithContentsOfFile:</sel>
          <arg type="NSString*">aFile</arg>
          <desc>
            Initializes from a bitmap (8192 bytes
            representing 65536 values). <br /> Each bit
            set in the bitmap represents the fact that a character
            at that position in the unicode base plane exists in the
            characterset. <br /> File must have extension
            " <code>.bitmap</code> ". To get around this load the
            file into data yourself and use [NSCharacterSet
            -characterSetWithBitmapRepresentation].
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>characterSetWithRange:</sel>
          <arg type="NSRange">aRange</arg>
          <desc>
            Returns set containing unicode index range given by
            <var>aRange</var>.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>controlCharacterSet</sel>
          <desc>
            Returns a character set containing control and
            format characters.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>decimalDigitCharacterSet</sel>
          <desc>
            Returns a character set containing characters that
            represent the decimal digits 0 through 9.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>decomposableCharacterSet</sel>
          <desc>
            Returns a character set containing individual
            characters that can be represented also by a
            composed character sequence.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>illegalCharacterSet</sel>
          <desc>
            Returns a character set containing unassigned and
            explicitly illegal character values.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>letterCharacterSet</sel>
          <desc>
            Returns a character set containing letters,
            including all alphabetic as well as Chinese
            characters, etc..
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>lowercaseLetterCharacterSet</sel>
          <desc>
            Returns a character set that contains the lowercase
            characters. This set does not include caseless
            characters, only those that have corresponding
            characters in uppercase and/or titlecase.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>newlineCharacterSet</sel>
          <desc>
            Returns a character set containing the newline
            characters, values 0x000A and 0x000D and
            nextline 0x0085 character.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>nonBaseCharacterSet</sel>
          <desc>
            Returns a character set containing characters for
            diacritical marks, which are usually only
            rendered in conjunction with another character.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>punctuationCharacterSet</sel>
          <desc>
            Returns a character set containing punctuation
            marks.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="10.0.0">
          <sel>symbolCharacterSet</sel>
          <desc>
            Returns a character set containing mathematical
            symbols, etc..
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>uppercaseLetterCharacterSet</sel>
          <desc>
            Returns a character set that contains the uppercase
            characters. This set does not include caseless
            characters, only those that have corresponding
            characters in lowercase and/or titlecase.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>whitespaceAndNewlineCharacterSet</sel>
          <desc>
            Returns a character set that contains the
            whitespace characters, plus the newline
            characters, values 0x000A and 0x000D and
            nextline 0x0085 character.
          </desc>
        </method>
        <method type="id" factory="yes" ovadd="1.0.0">
          <sel>whitespaceCharacterSet</sel>
          <desc>
            Returns a character set that contains the
            whitespace characters.
          </desc>
        </method>
        <method type="NSData*" ovadd="1.0.0">
          <sel>bitmapRepresentation</sel>
          <desc>
            Returns a bitmap representation of the receiver's
            character set (suitable for archiving or writing
            to a file), in an NSData object. <br />
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>characterIsMember:</sel>
          <arg type="unichar">aCharacter</arg>
          <desc>
            Returns <code>YES</code> if the receiver contains
            <em><var>aCharacter</var></em>, <code>NO</code> if it
            does not.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>hasMemberInPlane:</sel>
          <arg type="uint8_t">aPlane</arg>
          <desc>
            Returns <code>YES</code> if the receiver contains
            at least one character in the specified unicode plane.
          </desc>
        </method>
        <method type="NSCharacterSet*" ovadd="1.0.0">
          <sel>invertedSet</sel>
          <desc>
            Returns a character set containing only characters
            that the receiver does not contain.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>isSupersetOfSet:</sel>
          <arg type="NSCharacterSet*">aSet</arg>
          <desc>
            Returns <code>YES</code> is all the characters in
            <var>aSet</var> are present in the receiver.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>longCharacterIsMember:</sel>
          <arg type="UTF32Char">aCharacter</arg>
          <desc>
            Returns <code>YES</code> is the specified 32-bit
            character is present in the receiver.
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSMutableCharacterSet
        class
      </heading>
      <class name="NSMutableCharacterSet" super="NSCharacterSet" ovadd="1.0.0">
        <declared>Foundation/NSCharacterSet.h</declared>
        <desc>
          An
          <ref type="class" id="NSCharacterSet">NSCharacterSet</ref>
            that can be modified.
        </desc>
        <method type="void" ovadd="1.0.0">
          <sel>addCharactersInRange:</sel>
          <arg type="NSRange">aRange</arg>
          <desc>
            Adds characters specified by unicode indices in
            <var>aRange</var> to set.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>addCharactersInString:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            Adds characters in <var>aString</var> to set.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>formIntersectionWithCharacterSet:</sel>
          <arg type="NSCharacterSet*">otherSet</arg>
          <desc>
            Set intersection of character sets.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>formUnionWithCharacterSet:</sel>
          <arg type="NSCharacterSet*">otherSet</arg>
          <desc>
            Set union of character sets.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>invert</sel>
          <desc>
            Remove all characters currently in set and add all
            other characters.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeCharactersInRange:</sel>
          <arg type="NSRange">aRange</arg>
          <desc>
            Drop given range of characters. No error for
            characters not currently in set.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeCharactersInString:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            Drop characters in <var>aString</var>. No error for
            characters not currently in set.
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
