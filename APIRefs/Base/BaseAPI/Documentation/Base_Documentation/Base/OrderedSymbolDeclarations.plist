{
    "(GSLogDelegate)" = (
	"-getBytes:ofLength:byHandle:",
	"-putBytes:ofLength:byHandle:"
    );
    "(NSCacheDelegate)" = (
	"-cache:willEvictObject:"
    );
    "(NSCoding)" = (
	"-encodeWithCoder:",
	"-initWithCoder:"
    );
    "(NSCopying)" = (
	"-copyWithZone:"
    );
    "(NSDecimalNumberBehaviors)" = (
	"-exceptionDuringOperation:error:leftOperand:rightOperand:",
	"-roundingMode",
	"-scale"
    );
    "(NSDiscardableContent)" = (
	"-beginContentAccess",
	"-discardContentIfPossible",
	"-endContentAccess",
	"-isContentDiscarded"
    );
    "(NSExtensionRequestHandling)" = (
	"-beginRequestWithExtensionContext:"
    );
    "(NSFastEnumeration)" = (
	"-countByEnumeratingWithState:objects:count:"
    );
    "(NSFilePresenter)" = (
	"-presentedItemURL",
	"-presentedItemOperationQueue"
    );
    "(NSItemProviderReading)" = (
	"-readableTypeIdentifiersForItemProvider",
	"-setReadableTypeIdentifiersForItemProvider:",
	"+objectWithItemProviderData:typeIdentifier:error:"
    );
    "(NSItemProviderWriting)" = (
	"-writableTypeIdentifiersForItemProvider",
	"-setWritableTypeIdentifiersForItemProvider:",
	"+itemProviderVisibilityForRepresentationWithTypeIdentifier:",
	"-itemProviderVisibilityForRepresentationWithTypeIdentifier:",
	"-loadDataWithTypeIdentifier:forItemProviderCompletionHandler:"
    );
    "(NSLocking)" = (
	"-lock",
	"-unlock"
    );
    "(NSMutableCopying)" = (
	"-mutableCopyWithZone:"
    );
    "(NSObjCTypeSerializationCallBack)" = (
	"-deserializeObjectAt:ofObjCType:fromData:atCursor:",
	"-serializeObjectAt:ofObjCType:intoData:"
    );
    "(NSObject)" = (
	"-class",
	"-superclass",
	"-isEqual:",
	"-isKindOfClass:",
	"-isMemberOfClass:",
	"-isProxy",
	"-hash",
	"-self",
	"-performSelector:",
	"-performSelector:withObject:",
	"-performSelector:withObject:withObject:",
	"-respondsToSelector:",
	"-conformsToProtocol:",
	"-retain",
	"-release",
	"-autorelease",
	"-retainCount",
	"-description",
	"-zone"
    );
    "(NSProgressReporting)" = (
	"-progress"
    );
    "(NSSecureCoding)" = (
	"+supportsSecureCoding"
    );
    "(NSStreamDelegate)" = (
	"-stream:handleEvent:"
    );
    "(NSURLAuthenticationChallengeSender)" = (
	"-cancelAuthenticationChallenge:",
	"-continueWithoutCredentialForAuthenticationChallenge:",
	"-useCredential:forAuthenticationChallenge:"
    );
    "(NSURLConnectionDataDelegate)" = (
	"-connection:willSendRequest:redirectResponse:",
	"-connection:didReceiveResponse:",
	"-connection:didReceiveData:",
	"-connection:needNewBodyStream:",
	"-connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:",
	"-connection:willCacheResponse:",
	"-connectionDidFinishLoading:"
    );
    "(NSURLHandleClient)" = (
	"-URLHandle:resourceDataDidBecomeAvailable:",
	"-URLHandle:resourceDidFailLoadingWithReason:",
	"-URLHandleResourceDidBeginLoading:",
	"-URLHandleResourceDidCancelLoading:",
	"-URLHandleResourceDidFinishLoading:"
    );
    "(NSURLProtocolClient)" = (
	"-URLProtocol:cachedResponseIsValid:",
	"-URLProtocol:didFailWithError:",
	"-URLProtocol:didLoadData:",
	"-URLProtocol:didReceiveAuthenticationChallenge:",
	"-URLProtocol:didReceiveResponse:cacheStoragePolicy:",
	"-URLProtocol:wasRedirectedToRequest:redirectResponse:",
	"-URLProtocolDidFinishLoading:",
	"-URLProtocol:didCancelAuthenticationChallenge:"
    );
    "(NSURLSessionDataDelegate)" = (
	"-URLSession:dataTask:didReceiveData:",
	"-URLSession:dataTask:didReceiveResponse:completionHandler:"
    );
    "(NSURLSessionDelegate)" = (
	"-URLSession:didBecomeInvalidWithError:",
	"-URLSession:didReceiveChallenge:completionHandler:"
    );
    "(NSURLSessionDownloadDelegate)" = (
	"-URLSession:downloadTask:didFinishDownloadingToURL:",
	"-URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesExpectedToWrite:",
	"-URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:"
    );
    "(NSURLSessionTaskDelegate)" = (
	"-URLSession:didCreateTask:",
	"-URLSession:task:didCompleteWithError:",
	"-URLSession:task:didReceiveChallenge:completionHandler:",
	"-URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:",
	"-URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:",
	"-URLSession:task:needNewBodyStream:"
    );
    "(NSXPCListenerDelegate)" = (
	"-listener:shouldAcceptNewConnection:"
    );
    "(NSXPCProxyCreating)" = (
	"-remoteObjectProxy",
	"-remoteObjectProxyWithErrorHandler:",
	"-synchronousRemoteObjectProxyWithErrorHandler:"
    );
    "(RunLoopEvents)" = (
	"-receivedEvent:type:extra:forMode:"
    );
    NSAffineTransform = (
	"+transform",
	"-appendTransform:",
	"-initWithTransform:",
	"-invert",
	"-prependTransform:",
	"-rotateByDegrees:",
	"-rotateByRadians:",
	"-scaleBy:",
	"-scaleXBy:yBy:",
	"-setTransformStruct:",
	"-transformPoint:",
	"-transformSize:",
	"-transformStruct",
	"-translateXBy:yBy:"
    );
    NSArchiver = (
	"-initForWritingWithMutableData:",
	"+archivedDataWithRootObject:",
	"+archiveRootObject:toFile:",
	"-archiverData",
	"-classNameEncodedForTrueClassName:",
	"-encodeClassName:intoClassName:",
	"-replaceObject:withObject:"
    );
    "NSArchiver(GNUstep)" = (
	"-resetArchiver",
	"-directDataAccess",
	"-serializeHeaderAt:version:classes:objects:pointers:"
    );
    NSArray = (
	"+array",
	"+arrayWithArray:",
	"+arrayWithContentsOfFile:",
	"+arrayWithContentsOfURL:",
	"+arrayWithObject:",
	"+arrayWithObjects:,...",
	"+arrayWithObjects:count:",
	"-arrayByAddingObject:",
	"-arrayByAddingObjectsFromArray:",
	"-containsObject:",
	"-count",
	"-getObjects:",
	"-getObjects:range:",
	"-indexOfObject:",
	"-indexOfObject:inRange:",
	"-indexOfObjectIdenticalTo:",
	"-indexOfObjectIdenticalTo:inRange:",
	"-init",
	"-initWithArray:",
	"-initWithArray:copyItems:",
	"-initWithContentsOfFile:",
	"-initWithContentsOfURL:",
	"-initWithObjects:,...",
	"-initWithObjects:count:",
	"-lastObject",
	"-firstObject",
	"-objectAtIndex:",
	"-objectsAtIndexes:",
	"-firstObjectCommonWithArray:",
	"-isEqualToArray:",
	"-makeObjectsPerform:",
	"-makeObjectsPerform:withObject:",
	"-makeObjectsPerformSelector:",
	"-makeObjectsPerformSelector:withObject:",
	"-sortedArrayHint",
	"-sortedArrayUsingFunction:context:",
	"-sortedArrayUsingFunction:context:hint:",
	"-sortedArrayUsingSelector:",
	"-subarrayWithRange:",
	"-componentsJoinedByString:",
	"-pathsMatchingExtensions:",
	"-objectEnumerator",
	"-reverseObjectEnumerator",
	"-description",
	"-descriptionWithLocale:",
	"-descriptionWithLocale:indent:",
	"-writeToFile:atomically:",
	"-writeToURL:atomically:",
	"-valueForKey:",
	"-setValue:forKey:",
	"-enumerateObjectsUsingBlock:",
	"-enumerateObjectsWithOptions:usingBlock:",
	"-enumerateObjectsAtIndexes:options:usingBlock:",
	"-indexesOfObjectsWithOptions:passingTest:",
	"-indexesOfObjectsPassingTest:",
	"-indexesOfObjectsAtIndexes:options:passingTest:",
	"-indexOfObjectWithOptions:passingTest:",
	"-indexOfObjectPassingTest:",
	"-indexOfObjectAtIndexes:options:passingTest:",
	"-sortedArrayUsingComparator:",
	"-sortedArrayWithOptions:usingComparator:",
	"-indexOfObject:inSortedRange:options:usingComparator:",
	"-objectAtIndexedSubscript:"
    );
    "NSArray(NSKeyValueObserverRegistration)" = (
	"-addObserver:toObjectsAtIndexes:forKeyPath:options:context:",
	"-removeObserver:fromObjectsAtIndexes:forKeyPath:",
	"-removeObserver:fromObjectsAtIndexes:forKeyPath:context:"
    );
    "NSArray(NSPredicate)" = (
	"-filteredArrayUsingPredicate:"
    );
    "NSArray(NSSortDescriptorSorting)" = (
	"-sortedArrayUsingDescriptors:"
    );
    NSAssertionHandler = (
	"+currentHandler",
	"-handleFailureInFunction:file:lineNumber:description:,...",
	"-handleFailureInMethod:object:file:lineNumber:description:,..."
    );
    NSAttributedString = (
	"-initWithString:",
	"-initWithAttributedString:",
	"-initWithString:attributes:",
	"-length",
	"-string",
	"-attributesAtIndex:effectiveRange:",
	"-attributesAtIndex:longestEffectiveRange:inRange:",
	"-attribute:atIndex:effectiveRange:",
	"-attribute:atIndex:longestEffectiveRange:inRange:",
	"-isEqualToAttributedString:",
	"-attributedSubstringFromRange:"
    );
    NSAutoreleasePool = (
	"+addObject:",
	"+allocWithZone:",
	"-addObject:",
	"-autorelease",
	"-drain",
	"-release",
	"-retain",
	"+autoreleaseCountForObject:",
	"+currentPool",
	"+enableRelease:",
	"+freeCache",
	"+setPoolCountThreshold:",
	"-autoreleaseCount",
	"-emptyPool"
    );
    NSBackgroundActivityScheduler = (
	"-initWithIdentifier:",
	"-identifier",
	"-setIdentifier:",
	"-qualityOfService",
	"-setQualityOfService:",
	"-repeats",
	"-setRepeats:",
	"-interval",
	"-setInterval:",
	"-tolerance",
	"-setTolerance:",
	"-shouldDefer",
	"-setShouldDefer:",
	"-scheduleWithBlock:",
	"-invalidate"
    );
    NSBlockOperation = (
	"+blockOperationWithBlock:",
	"-addExecutionBlock:",
	"-executionBlocks"
    );
    NSBundle = (
	"+allBundles",
	"+allFrameworks",
	"+mainBundle",
	"+bundleForClass:",
	"+bundleWithIdentifier:",
	"+bundleWithPath:",
	"+bundleWithURL:",
	"+pathForResource:ofType:inDirectory:",
	"+pathForResource:ofType:inDirectory:withVersion:",
	"+URLForResource:withExtension:subdirectory:inBundleWithURL:",
	"-initWithPath:",
	"-initWithURL:",
	"-bundlePath",
	"-bundleURL",
	"-classNamed:",
	"-principalClass",
	"+pathsForResourcesOfType:inDirectory:",
	"-pathsForResourcesOfType:inDirectory:",
	"-pathForResource:ofType:inDirectory:",
	"-pathForResource:ofType:",
	"-URLForResource:withExtension:",
	"-URLForResource:withExtension:subdirectory:",
	"-URLForResource:withExtension:subdirectory:localization:",
	"-localizedStringForKey:value:table:",
	"-resourcePath",
	"-resourceURL",
	"-builtInPlugInsPath",
	"-builtInPlugInsURL",
	"-privateFrameworksPath",
	"-privateFrameworksURL",
	"-bundleIdentifier",
	"-bundleVersion",
	"-setBundleVersion:",
	"+preferredLocalizationsFromArray:",
	"+preferredLocalizationsFromArray:forPreferences:",
	"-isLoaded",
	"-pathsForResourcesOfType:inDirectory:forLocalization:",
	"-pathForResource:ofType:inDirectory:forLocalization:",
	"-infoDictionary",
	"-localizedInfoDictionary",
	"-developmentLocalization",
	"-objectForInfoDictionaryKey:",
	"-localizations",
	"-preferredLocalizations",
	"-load",
	"-unload",
	"-executablePath",
	"-executableURL",
	"-pathForAuxiliaryExecutable:",
	"-URLForAuxiliaryExecutable:",
	"-executableArchitectures",
	"-preflightAndReturnError:",
	"-loadAndReturnError:"
    );
    "NSBundle(GNUstep)" = (
	"+bundleForLibrary:version:",
	"+bundleForLibrary:",
	"+pathForLibraryResource:ofType:inDirectory:",
	"-cleanPathCache",
	"+setJavaAssetManager:withJNIEnv:",
	"+assetManager",
	"+assetForPath:",
	"+assetForPath:withMode:",
	"+assetDirForPath:"
    );
    NSByteCountFormatter = (
	"-formattingContext",
	"-setFormattingContext:",
	"-countStyle",
	"-setCountStyle:",
	"-allowsNonnumericFormatting",
	"-setAllowsNonnumericFormatting:",
	"-includesActualByteCount",
	"-setIncludesActualByteCount:",
	"-isAdaptive",
	"-setAdaptive:",
	"-allowedUnits",
	"-setAllowedUnits:",
	"-includesCount",
	"-setIncludesCount:",
	"-includesUnit",
	"-setIncludesUnit:",
	"-zeroPadsFractionDigits",
	"-setZeroPadsFractionDigits:",
	"-stringForObjectValue:",
	"-stringFromByteCount:",
	"+stringFromByteCount:countStyle:"
    );
    NSCache = (
	"-countLimit",
	"-totalCostLimit",
	"-delegate",
	"-evictsObjectsWithDiscardedContent",
	"-name",
	"-objectForKey:",
	"-removeAllObjects",
	"-removeObjectForKey:",
	"-setCountLimit:",
	"-setDelegate:",
	"-setEvictsObjectsWithDiscardedContent:",
	"-setName:",
	"-setObject:forKey:cost:",
	"-setObject:forKey:",
	"-setTotalCostLimit:"
    );
    NSCachedURLResponse = (
	"-data",
	"-initWithResponse:data:",
	"-initWithResponse:data:userInfo:storagePolicy:",
	"-response",
	"-storagePolicy",
	"-userInfo"
    );
    NSCalendar = (
	"+currentCalendar",
	"+calendarWithIdentifier:",
	"-initWithCalendarIdentifier:",
	"-calendarIdentifier",
	"-components:fromDate:",
	"-components:fromDate:toDate:options:",
	"-dateByAddingComponents:toDate:options:",
	"-dateFromComponents:",
	"-locale",
	"-setLocale:",
	"-firstWeekday",
	"-setFirstWeekday:",
	"-minimumDaysInFirstWeek",
	"-setMinimumDaysInFirstWeek:",
	"-timeZone",
	"-setTimeZone:",
	"-maximumRangeOfUnit:",
	"-minimumRangeofUnit:",
	"-ordinalityOfUnit:inUnit:forDate:",
	"-rangeOfUnit:inUnit:forDate:",
	"+autoupdatingCurrentCalendar",
	"-rangeOfUnit:startDate:interval:forDate:",
	"-getEra:year:month:day:fromDate:",
	"-getHour:minute:second:nanosecond:fromDate:",
	"-getEra:yearForWeekOfYear:weekOfYear:weekday:fromDate:",
	"-component:fromDate:"
    );
    NSCalendarDate = (
	"+calendarDate",
	"+dateWithString:calendarFormat:",
	"+dateWithString:calendarFormat:locale:",
	"+dateWithYear:month:day:hour:minute:second:timeZone:",
	"-initWithString:",
	"-initWithString:calendarFormat:",
	"-initWithString:calendarFormat:locale:",
	"-initWithYear:month:day:hour:minute:second:timeZone:",
	"-dayOfCommonEra",
	"-dayOfMonth",
	"-dayOfWeek",
	"-dayOfYear",
	"-hourOfDay",
	"-minuteOfHour",
	"-monthOfYear",
	"-secondOfMinute",
	"-yearOfCommonEra",
	"-addYear:month:day:hour:minute:second:",
	"-description",
	"-descriptionWithCalendarFormat:",
	"-descriptionWithCalendarFormat:locale:",
	"-descriptionWithLocale:",
	"-calendarFormat",
	"-setCalendarFormat:",
	"-setTimeZone:",
	"-timeZone",
	"-timeZoneDetail"
    );
    "NSCalendarDate(GregorianDate)" = (
	"-lastDayOfGregorianMonth:year:",
	"-absoluteGregorianDay:month:year:",
	"-gregorianDateFromAbsolute:day:month:year:"
    );
    "NSCalendarDate(OPENSTEP)" = (
	"-dateByAddingYears:months:days:hours:minutes:seconds:",
	"-years:months:days:hours:minutes:seconds:sinceDate:"
    );
    NSCharacterSet = (
	"+alphanumericCharacterSet",
	"+capitalizedLetterCharacterSet",
	"+controlCharacterSet",
	"+decimalDigitCharacterSet",
	"+decomposableCharacterSet",
	"+illegalCharacterSet",
	"+letterCharacterSet",
	"+lowercaseLetterCharacterSet",
	"+newlineCharacterSet",
	"+URLFragmentAllowedCharacterSet",
	"+URLHostAllowedCharacterSet",
	"+URLPasswordAllowedCharacterSet",
	"+URLPathAllowedCharacterSet",
	"+URLQueryAllowedCharacterSet",
	"+URLUserAllowedCharacterSet",
	"+nonBaseCharacterSet",
	"+punctuationCharacterSet",
	"+symbolCharacterSet",
	"+uppercaseLetterCharacterSet",
	"+whitespaceAndNewlineCharacterSet",
	"+whitespaceCharacterSet",
	"+characterSetWithBitmapRepresentation:",
	"+characterSetWithCharactersInString:",
	"+characterSetWithRange:",
	"+characterSetWithContentsOfFile:",
	"-bitmapRepresentation",
	"-characterIsMember:",
	"-hasMemberInPlane:",
	"-invertedSet",
	"-isSupersetOfSet:",
	"-longCharacterIsMember:"
    );
    NSClassDescription = (
	"+classDescriptionForClass:",
	"+invalidateClassDescriptionCache",
	"+registerClassDescription:forClass:",
	"-attributeKeys",
	"-inverseForRelationshipKey:",
	"-toManyRelationshipKeys",
	"-toOneRelationshipKeys"
    );
    NSCoder = (
	"-encodeArrayOfObjCType:count:at:",
	"-encodeBycopyObject:",
	"-encodeByrefObject:",
	"-encodeBytes:length:",
	"-encodeConditionalObject:",
	"-encodeDataObject:",
	"-encodeObject:",
	"-encodePropertyList:",
	"-encodePoint:",
	"-encodeRect:",
	"-encodeRootObject:",
	"-encodeSize:",
	"-encodeValueOfObjCType:at:",
	"-encodeValuesOfObjCTypes:,...",
	"-decodeArrayOfObjCType:count:at:",
	"-decodeBytesWithReturnedLength:",
	"-decodeDataObject",
	"-decodeObject",
	"-decodePropertyList",
	"-decodePoint",
	"-decodeRect",
	"-decodeSize",
	"-decodeValueOfObjCType:at:",
	"-decodeValuesOfObjCTypes:,...",
	"-objectZone",
	"-setObjectZone:",
	"-systemVersion",
	"-versionForClassName:",
	"-allowsKeyedCoding",
	"-containsValueForKey:",
	"-decodeBoolForKey:",
	"-decodeBytesForKey:returnedLength:",
	"-decodeDoubleForKey:",
	"-decodeFloatForKey:",
	"-decodeIntForKey:",
	"-decodeInt32ForKey:",
	"-decodeInt64ForKey:",
	"-decodeObjectForKey:",
	"-encodeBool:forKey:",
	"-encodeBytes:length:forKey:",
	"-encodeConditionalObject:forKey:",
	"-encodeDouble:forKey:",
	"-encodeFloat:forKey:",
	"-encodeInt:forKey:",
	"-encodeInt32:forKey:",
	"-encodeInt64:forKey:",
	"-encodeObject:forKey:",
	"-encodeInteger:forKey:",
	"-decodeIntegerForKey:",
	"-requiresSecureCoding",
	"-setRequiresSecureCoding:",
	"-requiresSecureCoding",
	"-setRequiresSecureCoding:",
	"-decodeObjectOfClass:forKey:",
	"-decodeObjectOfClasses:forKey:"
    );
    "NSCoder(NSGeometryKeyedCoding)" = (
	"-encodePoint:forKey:",
	"-encodeRect:forKey:",
	"-encodeSize:forKey:",
	"-decodePointForKey:",
	"-decodeRectForKey:",
	"-decodeSizeForKey:"
    );
    NSComparisonPredicate = (
	"+predicateWithLeftExpression:rightExpression:customSelector:",
	"+predicateWithLeftExpression:rightExpression:modifier:type:options:",
	"-comparisonPredicateModifier",
	"-customSelector",
	"-initWithLeftExpression:rightExpression:customSelector:",
	"-initWithLeftExpression:rightExpression:modifier:type:options:",
	"-leftExpression",
	"-options",
	"-predicateOperatorType",
	"-rightExpression"
    );
    NSCompoundPredicate = (
	"+andPredicateWithSubpredicates:",
	"+notPredicateWithSubpredicate:",
	"+orPredicateWithSubpredicates:",
	"-compoundPredicateType",
	"-initWithType:subpredicates:",
	"-subpredicates"
    );
    NSCondition = (
	"-wait",
	"-waitUntilDate:",
	"-signal",
	"-broadcast",
	"-setName:",
	"-name"
    );
    NSConditionLock = (
	"-initWithCondition:",
	"-condition",
	"-isLockedByCurrentThread",
	"-lockWhenCondition:",
	"-unlockWithCondition:",
	"-tryLock",
	"-tryLockWhenCondition:",
	"-lockBeforeDate:",
	"-lockWhenCondition:beforeDate:",
	"-lock",
	"-unlock",
	"-name",
	"-setName:"
    );
    NSConnection = (
	"+allConnections",
	"+connectionWithReceivePort:sendPort:",
	"+connectionWithRegisteredName:host:",
	"+connectionWithRegisteredName:host:usingNameServer:",
	"+currentConversation",
	"+defaultConnection",
	"+rootProxyForConnectionWithRegisteredName:host:",
	"+rootProxyForConnectionWithRegisteredName:host:usingNameServer:",
	"+serviceConnectionWithName:rootObject:",
	"+serviceConnectionWithName:rootObject:usingNameServer:",
	"-addRequestMode:",
	"-addRunLoop:",
	"-delegate",
	"-enableMultipleThreads",
	"-independentConversationQueueing",
	"-initWithReceivePort:sendPort:",
	"-invalidate",
	"-isValid",
	"-localObjects",
	"-multipleThreadsEnabled",
	"-receivePort",
	"-registerName:",
	"-registerName:withNameServer:",
	"-remoteObjects",
	"-removeRequestMode:",
	"-removeRunLoop:",
	"-replyTimeout",
	"-requestModes",
	"-requestTimeout",
	"-rootObject",
	"-rootProxy",
	"-runInNewThread",
	"-sendPort",
	"-setDelegate:",
	"-setIndependentConversationQueueing:",
	"-setReplyTimeout:",
	"-setRequestMode:",
	"-setRequestTimeout:",
	"-setRootObject:",
	"-statistics"
    );
    NSCountedSet = (
	"-countForObject:"
    );
    "NSCountedSet(GNU_Uniquing)" = (
	"-purge:",
	"-unique:"
    );
    NSData = (
	"+data",
	"+dataWithBytes:length:",
	"+dataWithBytesNoCopy:length:",
	"+dataWithBytesNoCopy:length:freeWhenDone:",
	"+dataWithContentsOfFile:",
	"+dataWithContentsOfMappedFile:",
	"+dataWithContentsOfURL:",
	"+dataWithData:",
	"-initWithBase64EncodedData:options:",
	"-initWithBase64EncodedString:options:",
	"-initWithBytesNoCopy:length:deallocator:",
	"-initWithBytes:length:",
	"-initWithBytesNoCopy:length:",
	"-initWithBytesNoCopy:length:freeWhenDone:",
	"-initWithContentsOfFile:",
	"-initWithContentsOfMappedFile:",
	"-initWithContentsOfURL:",
	"-initWithData:",
	"-bytes",
	"-description",
	"-getBytes:",
	"-getBytes:length:",
	"-getBytes:range:",
	"-subdataWithRange:",
	"-rangeOfData:options:range:",
	"-base64EncodedDataWithOptions:",
	"-base64EncodedStringWithOptions:",
	"-isEqualToData:",
	"-length",
	"-writeToFile:atomically:",
	"-writeToURL:atomically:",
	"-deserializeAlignedBytesLengthAtCursor:",
	"-deserializeBytes:length:atCursor:",
	"-deserializeDataAt:ofObjCType:atCursor:context:",
	"-deserializeIntAtCursor:",
	"-deserializeIntAtIndex:",
	"-deserializeInts:count:atCursor:",
	"-deserializeInts:count:atIndex:",
	"-writeToFile:options:error:",
	"-writeToURL:options:error:"
    );
    "NSData(GNUstepExtensions)" = (
	"+dataWithShmID:length:",
	"+dataWithSharedBytes:length:",
	"-deserializeTypeTag:andCrossRef:atCursor:"
    );
    NSDate = (
	"+date",
	"+dateWithNaturalLanguageString:",
	"+dateWithNaturalLanguageString:locale:",
	"+dateWithString:",
	"+dateWithTimeInterval:sinceDate:",
	"+dateWithTimeIntervalSince1970:",
	"+dateWithTimeIntervalSinceNow:",
	"+dateWithTimeIntervalSinceReferenceDate:",
	"+distantPast",
	"+distantFuture",
	"+now",
	"+timeIntervalSinceReferenceDate",
	"-addTimeInterval:",
	"-compare:",
	"-dateByAddingTimeInterval:",
	"-dateWithCalendarFormat:timeZone:",
	"-description",
	"-descriptionWithCalendarFormat:timeZone:locale:",
	"-descriptionWithLocale:",
	"-earlierDate:",
	"-init",
	"-initWithString:",
	"-initWithTimeInterval:sinceDate:",
	"-initWithTimeIntervalSince1970:",
	"-initWithTimeIntervalSinceNow:",
	"-initWithTimeIntervalSinceReferenceDate:",
	"-isEqual:",
	"-isEqualToDate:",
	"-laterDate:",
	"-timeIntervalSince1970",
	"-timeIntervalSinceDate:",
	"-timeIntervalSinceNow",
	"-timeIntervalSinceReferenceDate"
    );
    NSDateComponents = (
	"-day",
	"-era",
	"-hour",
	"-minute",
	"-month",
	"-second",
	"-week",
	"-weekday",
	"-weekdayOrdinal",
	"-year",
	"-setDay:",
	"-setEra:",
	"-setHour:",
	"-setMinute:",
	"-setMonth:",
	"-setSecond:",
	"-setWeek:",
	"-setWeekday:",
	"-setWeekdayOrdinal:",
	"-setYear:",
	"-quarter",
	"-setQuarter:",
	"-calendar",
	"-timeZone",
	"-setCalendar:",
	"-setTimeZone:",
	"-date",
	"-weekOfMonth",
	"-weekOfYear",
	"-yearForWeekOfYear",
	"-nanosecond",
	"-setWeekOfMonth:",
	"-setWeekOfYear:",
	"-setYearForWeekOfYear:",
	"-setNanosecond:",
	"-leapMonth",
	"-setLeapMonth:",
	"-isValidDate",
	"-isValidDateInCalendar:",
	"-valueForComponent:",
	"-setValue:forComponent:"
    );
    NSDateComponentsFormatter = (
	"-stringForObjectValue:",
	"-stringFromDateComponents:",
	"-stringFromDate:toDate:",
	"-stringFromTimeInterval:",
	"-unitsStyle",
	"-setUnitsStyle:",
	"-allowedUnits",
	"-setAllowedUnits:",
	"-zeroFormattingBehavior",
	"-setZeroFormattingBehavior:",
	"-calendar",
	"-setCalender:",
	"-referenceDate",
	"-setReferenceDate:",
	"-allowsFractionalUnits",
	"-setAllowsFractionalUnits:",
	"-maximumUnitCount",
	"-setMaximumUnitCount:",
	"-collapsesLargestUnit",
	"-setCollapsesLargestUnit:",
	"-includesApproximationPhrase",
	"-setIncludesApproximationPhrase:",
	"-formattingContext",
	"-setFormattingContext:",
	"-getObjectValue:forString:errorDescription:",
	"+localizedStringFromDateComponents:unitsStyle:"
    );
    NSDateFormatter = (
	"-initWithDateFormat:allowNaturalLanguage:",
	"-allowsNaturalLanguage",
	"-dateFormat",
	"+defaultFormatterBehavior",
	"+setDefaultFormatterBehavior:",
	"-formatterBehavior",
	"-setFormatterBehavior:",
	"-generatesCalendarDates",
	"-setGeneratesCalendarDates:",
	"-isLenient",
	"-setLenient:",
	"-dateFromString:",
	"-stringFromDate:",
	"-getObjectValue:forString:range:error:",
	"-setDateFormat:",
	"-dateStyle",
	"-setDateStyle:",
	"-timeStyle",
	"-setTimeStyle:",
	"-calendar",
	"-setCalendar:",
	"-defaultDate",
	"-setDefaultDate:",
	"-locale",
	"-setLocale:",
	"-timeZone",
	"-setTimeZone:",
	"-twoDigitStartDate",
	"-setTwoDigitStartDate:",
	"-AMSymbol",
	"-setAMSymbol:",
	"-PMSymbol",
	"-setPMSymbol:",
	"-weekdaySymbols",
	"-setWeekdaySymbols:",
	"-shortWeekdaySymbols",
	"-setShortWeekdaySymbols:",
	"-monthSymbols",
	"-setMonthSymbols:",
	"-shortMonthSymbols",
	"-setShortMonthSymbols:",
	"-eraSymbols",
	"-setEraSymbols:",
	"-gregorianStartDate",
	"-setGregorianStartDate:",
	"-longEraSymbols",
	"-setLongEraSymbols:",
	"-quarterSymbols",
	"-setQuarterSymbols:",
	"-shortQuarterSymbols",
	"-setShortQuarterSymbols:",
	"-standaloneQuarterSymbols",
	"-setStandaloneQuarterSymbols:",
	"-shortStandaloneQuarterSymbols",
	"-setShortStandaloneQuarterSymbols:",
	"-shortStandaloneMonthSymbols",
	"-setShortStandaloneMonthSymbols:",
	"-standaloneMonthSymbols",
	"-setStandaloneMonthSymbols:",
	"-veryShortMonthSymbols",
	"-setVeryShortMonthSymbols:",
	"-veryShortStandaloneMonthSymbols",
	"-setVeryShortStandaloneMonthSymbols:",
	"-shortStandaloneWeekdaySymbols",
	"-setShortStandaloneWeekdaySymbols:",
	"-standaloneWeekdaySymbols",
	"-setStandaloneWeekdaySymbols:",
	"-veryShortWeekdaySymbols",
	"-setVeryShortWeekdaySymbols:",
	"-veryShortStandaloneWeekdaySymbols",
	"-setVeryShortStandaloneWeekdaySymbols:",
	"+localizedStringFromDate:dateStyle:timeStyle:",
	"+dateFormatFromTemplate:options:locale:",
	"-doesRelativeDateFormatting",
	"-setDoesRelativeDateFormatting:"
    );
    NSDateInterval = (
	"-init",
	"-initWithStartDate:duration:",
	"-initWithStartDate:endDate:",
	"-startDate",
	"-setStartDate:",
	"-endDate",
	"-setEndDate:",
	"-duration",
	"-setDuration:",
	"-compare:",
	"-isEqualToDateInterval:",
	"-intersectsDateInterval:",
	"-intersectionWithDateInterval:",
	"-containsDate:"
    );
    NSDateIntervalFormatter = (
	"-locale",
	"-setLocale:",
	"-calendar",
	"-setCalendar:",
	"-timeZone",
	"-setTimeZone:",
	"-dateTemplate",
	"-setDateTemplate:",
	"-dateStyle",
	"-setDateStyle:",
	"-timeStyle",
	"-setTimeStyle:",
	"-stringFromDate:toDate:",
	"-stringFromDateInterval:"
    );
    NSDecimalNumber = (
	"+defaultBehavior",
	"+setDefaultBehavior:",
	"+maximumDecimalNumber",
	"+minimumDecimalNumber",
	"+notANumber",
	"+one",
	"+zero",
	"+decimalNumberWithDecimal:",
	"+decimalNumberWithMantissa:exponent:isNegative:",
	"+decimalNumberWithString:",
	"+decimalNumberWithString:locale:",
	"-initWithDecimal:",
	"-initWithMantissa:exponent:isNegative:",
	"-initWithString:",
	"-initWithString:locale:",
	"-objCType",
	"-decimalValue",
	"-descriptionWithLocale:",
	"-doubleValue",
	"-compare:",
	"-decimalNumberByAdding:",
	"-decimalNumberByAdding:withBehavior:",
	"-decimalNumberByDividingBy:",
	"-decimalNumberByDividingBy:withBehavior:",
	"-decimalNumberByMultiplyingBy:",
	"-decimalNumberByMultiplyingBy:withBehavior:",
	"-decimalNumberByMultiplyingByPowerOf10:",
	"-decimalNumberByMultiplyingByPowerOf10:withBehavior:",
	"-decimalNumberByRaisingToPower:",
	"-decimalNumberByRaisingToPower:withBehavior:",
	"-decimalNumberBySubtracting:",
	"-decimalNumberBySubtracting:withBehavior:",
	"-decimalNumberByRoundingAccordingToBehavior:"
    );
    NSDecimalNumberHandler = (
	"+defaultDecimalNumberHandler",
	"+decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:",
	"-initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:"
    );
    NSDeserializer = (
	"+deserializePropertyListFromData:atCursor:mutableContainers:",
	"+deserializePropertyListFromData:mutableContainers:",
	"+deserializePropertyListLazilyFromData:atCursor:length:mutableContainers:"
    );
    "NSDeserializer(GNUstep)" = (
	"+uniquing:"
    );
    NSDictionary = (
	"+dictionary",
	"+dictionaryWithContentsOfFile:",
	"+dictionaryWithContentsOfURL:",
	"+dictionaryWithDictionary:",
	"+dictionaryWithObject:forKey:",
	"+dictionaryWithObjects:forKeys:",
	"+dictionaryWithObjects:forKeys:count:",
	"+dictionaryWithObjectsAndKeys:,...",
	"-allKeys",
	"-allKeysForObject:",
	"-allValues",
	"-count",
	"-description",
	"-descriptionInStringsFileFormat",
	"-descriptionWithLocale:",
	"-descriptionWithLocale:indent:",
	"-enumerateKeysAndObjectsUsingBlock:",
	"-enumerateKeysAndObjectsWithOptions:usingBlock:",
	"-getObjects:andKeys:",
	"-init",
	"-initWithContentsOfFile:",
	"-initWithContentsOfURL:",
	"-initWithDictionary:",
	"-initWithDictionary:copyItems:",
	"-initWithObjects:forKeys:",
	"-initWithObjectsAndKeys:,...",
	"-initWithObjects:forKeys:count:",
	"-isEqualToDictionary:",
	"-keyEnumerator",
	"-keysOfEntriesPassingTest:",
	"-keysOfEntriesWithOptions:passingTest:",
	"-keysSortedByValueUsingSelector:",
	"-keysSortedByValueUsingComparator:",
	"-keysSortedByValueWithOptions:usingComparator:",
	"-objectEnumerator",
	"-objectForKey:",
	"-objectsForKeys:notFoundMarker:",
	"-valueForKey:",
	"-writeToFile:atomically:",
	"-writeToURL:atomically:",
	"-objectForKeyedSubscript:"
    );
    "NSDictionary(NSFileAttributes)" = (
	"-fileCreationDate",
	"-fileExtensionHidden",
	"-fileHFSCreatorCode",
	"-fileHFSTypeCode",
	"-fileIsAppendOnly",
	"-fileIsImmutable",
	"-fileSize",
	"-fileType",
	"-fileOwnerAccountID",
	"-fileOwnerAccountName",
	"-fileGroupOwnerAccountID",
	"-fileGroupOwnerAccountName",
	"-fileModificationDate",
	"-filePosixPermissions",
	"-fileSystemNumber",
	"-fileSystemFileNumber"
    );
    NSDimension = (
	"-converter",
	"-initWithSymbol:converter:",
	"+baseUnit"
    );
    NSDirectoryEnumerator = (
	"-directoryAttributes",
	"-fileAttributes",
	"-skipDescendents"
    );
    NSDistantObject = (
	"+proxyWithLocal:connection:",
	"+proxyWithTarget:connection:",
	"-connectionForProxy",
	"-initWithLocal:connection:",
	"-initWithTarget:connection:",
	"-methodSignatureForSelector:",
	"-setProtocolForProxy:"
    );
    NSDistributedLock = (
	"+lockWithPath:",
	"-initWithPath:",
	"-breakLock",
	"-lockDate",
	"-tryLock",
	"-unlock"
    );
    NSDistributedNotificationCenter = (
	"+defaultCenter",
	"+notificationCenterForType:",
	"-addObserver:selector:name:object:",
	"-addObserver:selector:name:object:suspensionBehavior:",
	"-postNotification:",
	"-postNotificationName:object:",
	"-postNotificationName:object:userInfo:",
	"-postNotificationName:object:userInfo:deliverImmediately:",
	"-removeObserver:name:object:",
	"-setSuspended:",
	"-suspended"
    );
    NSEnergyFormatter = (
	"-numberFormatter",
	"-setNumberFormatter:",
	"-unitStyle",
	"-setUnitStyle:",
	"-isForFoodEnergyUse",
	"-setForFoodEnergyUse:",
	"-stringFromValue:unit:",
	"-stringFromJoules:",
	"-unitStringFromValue:unit:",
	"-unitStringFromJoules:usedUnit:",
	"-getObjectValue:forString:errorDescription:"
    );
    NSEnumerator = (
	"-allObjects",
	"-nextObject"
    );
    NSError = (
	"+errorWithDomain:code:userInfo:",
	"-code",
	"-domain",
	"-initWithDomain:code:userInfo:",
	"-localizedDescription",
	"-localizedFailureReason",
	"-localizedRecoveryOptions",
	"-localizedRecoverySuggestion",
	"-recoveryAttempter",
	"-userInfo"
    );
    NSException = (
	"+exceptionWithName:reason:userInfo:",
	"+raise:format:,...",
	"+raise:format:arguments:",
	"-callStackReturnAddresses",
	"-callStackSymbols",
	"-initWithName:reason:userInfo:",
	"-name",
	"-raise",
	"-reason",
	"-userInfo"
    );
    NSExpression = (
	"+expressionForConstantValue:",
	"+expressionForEvaluatedObject",
	"+expressionForFunction:arguments:",
	"+expressionForKeyPath:",
	"+expressionForVariable:",
	"+expressionForIntersectSet:with:",
	"+expressionForAggregate:",
	"+expressionForUnionSet:with:",
	"+expressionForMinusSet:with:",
	"+expressionWithFormat:,...",
	"+expressionWithFormat:arguments:",
	"+expressionWithFormat:argumentArray:",
	"-arguments",
	"-constantValue",
	"-expressionType",
	"-expressionValueWithObject:context:",
	"-function",
	"-initWithExpressionType:",
	"-keyPath",
	"-operand",
	"-variable",
	"-collection",
	"-leftExpression",
	"-rightExpression"
    );
    NSExtensionContext = (
	"-setInputItems:",
	"-inputItems",
	"-completeRequestReturningItems:completionHandler:",
	"-cancelRequestWithError:",
	"-openURL:completionHandler:"
    );
    NSExtensionItem = (
	"-attributedTitle",
	"-setAttributedTitle:",
	"-attributedContentText",
	"-setAttributedContentText:",
	"-attachments",
	"-setAttachments:",
	"-userInfo",
	"-setUserInfo:"
    );
    NSFileAccessIntent = (
	"+readingIntentWithURL:options:",
	"+writingIntentWithURL:options:",
	"-URL"
    );
    NSFileCoordinator = (
	"+filePresenters",
	"-purposeIdentifier",
	"-setPurposeIdentifier:",
	"-cancel",
	"-coordinateAccessWithIntents:queue:byAccessor:",
	"-coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:",
	"-coordinateReadingItemAtURL:options:error:byAccessor:",
	"-coordinateWritingItemAtURL:options:error:byAccessor:",
	"-coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:",
	"-itemAtURL:didMoveToURL:",
	"-itemAtURL:willMoveToURL:",
	"-itemAtURL:didChangeUbiquityAttributes:",
	"-prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:"
    );
    NSFileHandle = (
	"+fileHandleForReadingAtPath:",
	"+fileHandleForWritingAtPath:",
	"+fileHandleForUpdatingAtPath:",
	"+fileHandleWithStandardError",
	"+fileHandleWithStandardInput",
	"+fileHandleWithStandardOutput",
	"+fileHandleWithNullDevice",
	"+fileHandleForReadingFromURL:error:",
	"+fileHandleForWritingToURL:error:",
	"+fileHandleForUpdatingURL:error:",
	"-initWithFileDescriptor:",
	"-initWithFileDescriptor:closeOnDealloc:",
	"-initWithNativeHandle:",
	"-initWithNativeHandle:closeOnDealloc:",
	"-fileDescriptor",
	"-nativeHandle",
	"-availableData",
	"-readDataToEndOfFile",
	"-readDataOfLength:",
	"-writeData:",
	"-getOffset:error:",
	"-acceptConnectionInBackgroundAndNotify",
	"-acceptConnectionInBackgroundAndNotifyForModes:",
	"-readInBackgroundAndNotify",
	"-readInBackgroundAndNotifyForModes:",
	"-readToEndOfFileInBackgroundAndNotify",
	"-readToEndOfFileInBackgroundAndNotifyForModes:",
	"-waitForDataInBackgroundAndNotify",
	"-waitForDataInBackgroundAndNotifyForModes:",
	"-offsetInFile",
	"-seekToEndOfFile",
	"-seekToFileOffset:",
	"-closeFile",
	"-synchronizeFile",
	"-truncateFileAtOffset:"
    );
    "NSFileHandle(GNUstepExtensions)" = (
	"+fileHandleAsServerAtAddress:service:protocol:",
	"+fileHandleAsClientAtAddress:service:protocol:",
	"+fileHandleAsClientInBackgroundAtAddress:service:protocol:",
	"+fileHandleAsClientInBackgroundAtAddress:service:protocol:forModes:",
	"-readDataInBackgroundAndNotifyLength:",
	"-readDataInBackgroundAndNotifyLength:forModes:",
	"-readInProgress",
	"-socketAddress",
	"-socketLocalAddress",
	"-socketLocalService",
	"-socketService",
	"-socketProtocol",
	"-useCompression",
	"-writeInBackgroundAndNotify:forModes:",
	"-writeInBackgroundAndNotify:",
	"-writeInProgress"
    );
    "NSFileHandle(GNUstepTLS)" = (
	"+sslClass",
	"-sslAccept",
	"-sslConnect",
	"-sslDisconnect",
	"-sslHandshakeEstablished:outgoing:",
	"-sslIssuer",
	"-sslOwner",
	"-sslSetCertificate:privateKey:PEMpasswd:",
	"-sslSetOptions:",
	"+setData:forTLSFile:"
    );
    NSFileManager = (
	"+defaultManager",
	"-delegate",
	"-setDelegate:",
	"-delegate",
	"-setDelegate:",
	"-attributesOfItemAtPath:error:",
	"-copyItemAtPath:toPath:error:",
	"-moveItemAtPath:toPath:error:",
	"-removeItemAtPath:error:",
	"-copyItemAtURL:toURL:error:",
	"-moveItemAtURL:toURL:error:",
	"-removeItemAtURL:error:",
	"-createSymbolicLinkAtPath:withDestinationPath:error:",
	"-setAttributes:ofItemAtPath:error:",
	"-changeCurrentDirectoryPath:",
	"-changeFileAttributes:atPath:",
	"-componentsToDisplayForPath:",
	"-contentsAtPath:",
	"-contentsEqualAtPath:andPath:",
	"-contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:",
	"-URLForDirectory:inDomain:appropriateForURL:create:error:",
	"-URLsForDirectory:inDomains:",
	"-enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:",
	"-contentsOfDirectoryAtPath:error:",
	"-attributesOfFileSystemForPath:error:",
	"-copyPath:toPath:handler:",
	"-createDirectoryAtPath:withIntermediateDirectories:attributes:error:",
	"-createDirectoryAtURL:withIntermediateDirectories:attributes:error:",
	"-createDirectoryAtPath:attributes:",
	"-createFileAtPath:contents:attributes:",
	"-createSymbolicLinkAtPath:pathContent:",
	"-currentDirectoryPath",
	"-directoryContentsAtPath:",
	"-displayNameAtPath:",
	"-enumeratorAtPath:",
	"-fileAttributesAtPath:traverseLink:",
	"-fileExistsAtPath:",
	"-fileExistsAtPath:isDirectory:",
	"-fileSystemAttributesAtPath:",
	"-fileSystemRepresentationWithPath:",
	"-isExecutableFileAtPath:",
	"-isDeletableFileAtPath:",
	"-isReadableFileAtPath:",
	"-isWritableFileAtPath:",
	"-linkPath:toPath:handler:",
	"-movePath:toPath:handler:",
	"-pathContentOfSymbolicLinkAtPath:",
	"-removeFileAtPath:handler:",
	"-stringWithFileSystemRepresentation:length:",
	"-subpathsAtPath:"
    );
    NSFileVersion = (
	"+currentVersionOfItemAtURL:",
	"+otherVersionsOfItemAtURL:",
	"+versionOfItemAtURL:forPersistentIdentifier:",
	"+temporaryDirectoryURLForNewVersionOfItemAtURL:",
	"+addVersionOfItemAtURL:withContentsOfURL:options:error:",
	"+unresolvedConflictVersionsOfItemAtURL:",
	"+removeOtherVersionsOfItemAtURL:error:",
	"-isDiscardable",
	"-setDiscardable:",
	"-isResolved",
	"-setResolved:",
	"-modificationDate",
	"-originatorNameComponents",
	"-localizedName",
	"-localizedNameOfSavingComputer",
	"-hasLocalContents",
	"-hasThumbnail",
	"-URL",
	"-conflict",
	"-persistentIdentifier",
	"-removeAndReturnError:",
	"-replaceItemAtURL:options:error:"
    );
    NSFileWrapper = (
	"-initDirectoryWithFileWrappers:",
	"-initRegularFileWithContents:",
	"-initSymbolicLinkWithDestination:",
	"-initWithPath:",
	"-initWithSerializedRepresentation:",
	"-writeToFile:atomically:updateFilenames:",
	"-serializedRepresentation",
	"-setFilename:",
	"-filename",
	"-setPreferredFilename:",
	"-preferredFilename",
	"-setFileAttributes:",
	"-fileAttributes",
	"-isRegularFile",
	"-isDirectory",
	"-isSymbolicLink",
	"-needsToBeUpdatedFromPath:",
	"-updateFromPath:",
	"-addFileWrapper:",
	"-removeFileWrapper:",
	"-fileWrappers",
	"-keyForFileWrapper:",
	"-addFileWithPath:",
	"-addRegularFileWithContents:preferredFilename:",
	"-addSymbolicLinkWithDestination:preferredFilename:",
	"-regularFileContents",
	"-symbolicLinkDestination",
	"-initSymbolicLinkWithDestinationURL:",
	"-initWithURL:options:error:",
	"-matchesContentsOfURL:",
	"-readFromURL:options:error:",
	"-symbolicLinkDestinationURL",
	"-writeToURL:options:originalContentsURL:error:"
    );
    NSFormatter = (
	"-attributedStringForObjectValue:withDefaultAttributes:",
	"-editingStringForObjectValue:",
	"-getObjectValue:forString:errorDescription:",
	"-isPartialStringValid:newEditingString:errorDescription:",
	"-isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:",
	"-stringForObjectValue:"
    );
    NSGarbageCollector = (
	"+defaultCollector",
	"-collectIfNeeded",
	"-collectExhaustively",
	"-disable",
	"-disableCollectorForPointer:",
	"-enable",
	"-enableCollectorForPointer:",
	"-isCollecting",
	"-isEnabled",
	"-zone"
    );
    NSHTTPCookie = (
	"+cookieWithProperties:",
	"+cookiesWithResponseHeaderFields:forURL:",
	"+requestHeaderFieldsWithCookies:",
	"-comment",
	"-commentURL",
	"-domain",
	"-expiresDate",
	"-initWithProperties:",
	"-isSecure",
	"-isSecure",
	"-isSessionOnly",
	"-isSessionOnly",
	"-isHTTPOnly",
	"-isHTTPOnly",
	"-name",
	"-path",
	"-portList",
	"-properties",
	"-value",
	"-version"
    );
    NSHTTPCookieStorage = (
	"+sharedHTTPCookieStorage",
	"-cookieAcceptPolicy",
	"-cookies",
	"-cookiesForURL:",
	"-deleteCookie:",
	"-setCookie:",
	"-setCookieAcceptPolicy:",
	"-setCookies:forURL:mainDocumentURL:"
    );
    NSHTTPURLResponse = (
	"+localizedStringForStatusCode:",
	"-allHeaderFields",
	"-statusCode"
    );
    NSHashTable = (
	"+hashTableWithOptions:",
	"+weakObjectsHashTable",
	"-initWithOptions:capacity:",
	"-initWithPointerFunctions:capacity:",
	"-addObject:",
	"-allObjects",
	"-anyObject",
	"-containsObject:",
	"-count",
	"-intersectHashTable:",
	"-intersectsHashTable:",
	"-isEqualToHashTable:",
	"-isSubsetOfHashTable:",
	"-member:",
	"-minusHashTable:",
	"-objectEnumerator",
	"-pointerFunctions",
	"-removeAllObjects",
	"-removeObject:",
	"-setRepresentation",
	"-unionHashTable:"
    );
    NSHost = (
	"+currentHost",
	"+hostWithName:",
	"+hostWithAddress:",
	"+setHostCacheEnabled:",
	"+isHostCacheEnabled",
	"+flushHostCache",
	"-isEqualToHost:",
	"-localizedName",
	"-name",
	"-names",
	"-address",
	"-addresses"
    );
    "NSHost(GNUstep)" = (
	"+localHost"
    );
    NSISO8601DateFormatter = (
	"-timeZone",
	"-setTimeZone:",
	"-formatOptions",
	"-setFormatOptions:",
	"-stringFromDate:",
	"-dateFromString:",
	"+stringFromDate:timeZone:formatOptions:"
    );
    NSIndexPath = (
	"+indexPathWithIndex:",
	"+indexPathWithIndexes:length:",
	"+indexPathForItem:inSection:",
	"-item",
	"-section",
	"+indexPathForRow:inSection:",
	"-item",
	"-compare:",
	"-getIndexes:",
	"-indexAtPosition:",
	"-indexPathByAddingIndex:",
	"-indexPathByRemovingLastIndex",
	"-initWithIndex:",
	"-initWithIndexes:length:",
	"-length"
    );
    NSIndexSet = (
	"+indexSet",
	"+indexSetWithIndex:",
	"+indexSetWithIndexesInRange:",
	"-containsIndex:",
	"-containsIndexes:",
	"-containsIndexesInRange:",
	"-count",
	"-countOfIndexesInRange:",
	"-enumerateIndexesInRange:options:usingBlock:",
	"-enumerateIndexesUsingBlock:",
	"-enumerateIndexesWithOptions:usingBlock:",
	"-enumerateRangesInRange:options:usingBlock:",
	"-enumerateRangesUsingBlock:",
	"-enumerateRangesWithOptions:usingBlock:",
	"-firstIndex",
	"-getIndexes:maxCount:inIndexRange:",
	"-indexGreaterThanIndex:",
	"-indexGreaterThanOrEqualToIndex:",
	"-indexLessThanIndex:",
	"-indexLessThanOrEqualToIndex:",
	"-initWithIndex:",
	"-initWithIndexesInRange:",
	"-initWithIndexSet:",
	"-intersectsIndexesInRange:",
	"-isEqualToIndexSet:",
	"-lastIndex"
    );
    NSInputStream = (
	"+inputStreamWithData:",
	"+inputStreamWithFileAtPath:",
	"+inputStreamWithURL:",
	"-getBuffer:length:",
	"-hasBytesAvailable",
	"-initWithData:",
	"-initWithFileAtPath:",
	"-initWithURL:",
	"-read:maxLength:"
    );
    NSInvocation = (
	"+invocationWithMethodSignature:",
	"-getArgument:atIndex:",
	"-getReturnValue:",
	"-selector",
	"-setArgument:atIndex:",
	"-setReturnValue:",
	"-setSelector:",
	"-setTarget:",
	"-target",
	"-argumentsRetained",
	"-retainArguments",
	"-targetRetained",
	"-retainArgumentsIncludingTarget:",
	"-invoke",
	"-invokeWithTarget:",
	"-methodSignature"
    );
    "NSInvocation(GNUstep)" = (
	"-sendsToSuper",
	"-setSendsToSuper:"
    );
    "NSInvocation(MacroSetup)" = (
	"-initWithMethodSignature:",
	"+_newProxyForInvocation:",
	"+_newProxyForMessage:",
	"+_returnInvocationAndDestroyProxy:"
    );
    NSInvocationOperation = (
	"-initWithInvocation:",
	"-initWithTarget:selector:object:",
	"-invocation",
	"-result"
    );
    NSItemProvider = (
	"-init",
	"-registerDataRepresentationForTypeIdentifier:visibility:loadHandler:",
	"-registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:",
	"-registeredTypeIdentifiers",
	"-registeredTypeIdentifiersWithFileOptions:",
	"-hasItemConformingToTypeIdentifier:",
	"-hasRepresentationConformingToTypeIdentifier:fileOptions:",
	"-loadDataRepresentationForTypeIdentifier:completionHandler:",
	"-loadFileRepresentationForTypeIdentifier:completionHandler:",
	"-loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:",
	"-suggestedName",
	"-setSuggestedName:",
	"-initWithObject:",
	"-registerObject:visibility:",
	"-registerObjectOfClass:visibility:loadHandler:",
	"-canLoadObjectOfClass:",
	"-loadObjectOfClass:completionHandler:",
	"-initWithItem:typeIdentifier:",
	"-initWithContentsOfURL:",
	"-registerItemForTypeIdentifier:loadHandler:",
	"-loadItemForTypeIdentifier:options:completionHandler:"
    );
    "NSItemProvider(NSPreviewSupport)" = (
	"-previewImageHandler",
	"-setPreviewImageHandler:",
	"-loadPreviewImageWithOptions:completionHandler:"
    );
    NSJSONSerialization = (
	"+dataWithJSONObject:options:error:",
	"+isValidJSONObject:",
	"+JSONObjectWithData:options:error:",
	"+JSONObjectWithStream:options:error:",
	"+writeJSONObject:toStream:options:error:"
    );
    NSKeyedArchiver = (
	"+archivedDataWithRootObject:",
	"+archivedDataWithRootObject:requiringSecureCoding:error:",
	"+archiveRootObject:toFile:",
	"+classNameForClass:",
	"+setClassName:forClass:",
	"-requiresSecureCoding",
	"-setRequiresSecureCoding:",
	"-classNameForClass:",
	"-delegate",
	"-encodeBool:forKey:",
	"-encodeBytes:length:forKey:",
	"-encodeConditionalObject:forKey:",
	"-encodeDouble:forKey:",
	"-encodeFloat:forKey:",
	"-encodeInt:forKey:",
	"-encodeInt32:forKey:",
	"-encodeInt64:forKey:",
	"-encodeObject:forKey:",
	"-finishEncoding",
	"-initForWritingWithMutableData:",
	"-outputFormat",
	"-setClassName:forClass:",
	"-setDelegate:",
	"-setOutputFormat:"
    );
    "NSKeyedArchiver(Internal)" = (
	"-_encodeArrayOfObjects:forKey:",
	"-_encodePropertyList:forKey:"
    );
    NSKeyedUnarchiver = (
	"+classForClassName:",
	"+setClass:forClassName:",
	"+unarchiveObjectWithData:",
	"+unarchiveObjectWithFile:",
	"+unarchivedObjectOfClass:fromData:error:",
	"+unarchivedObjectOfClasses:fromData:error:",
	"+unarchivedArrayOfObjectsOfClass:fromData:error:",
	"+unarchivedArrayOfObjectsOfClasses:fromData:error:",
	"+unarchivedDictionaryWithKeysOfClass:objectsOfClass:fromData:error:",
	"+unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:",
	"-requiresSecureCoding",
	"-setRequiresSecureCoding:",
	"-classForClassName:",
	"-containsValueForKey:",
	"-setClass:forClassName:",
	"-decodeBoolForKey:",
	"-decodeBytesForKey:returnedLength:",
	"-decodeDoubleForKey:",
	"-decodeFloatForKey:",
	"-decodeIntForKey:",
	"-decodeInt32ForKey:",
	"-decodeInt64ForKey:",
	"-decodeObjectForKey:",
	"-delegate",
	"-finishDecoding",
	"-initForReadingWithData:",
	"-setDelegate:"
    );
    "NSKeyedUnarchiver(Internal)" = (
	"-_decodeArrayOfObjectsForKey:",
	"-_decodePropertyListForKey:",
	"-replaceObject:withObject:"
    );
    NSLengthFormatter = (
	"-numberFormatter",
	"-setNumberFormatter:",
	"-unitStyle",
	"-setUnitStyle:",
	"-isForPersonHeightUse",
	"-setForPersonHeightUse:",
	"-stringFromValue:unit:",
	"-stringFromMeters:",
	"-unitStringFromValue:unit:",
	"-unitStringFromMeters:usedUnit:",
	"-getObjectValue:forString:errorDescription:"
    );
    NSLinguisticTagger = (
	"-initWithTagSchemes:options:",
	"-tagSchemes",
	"-string",
	"-setString:",
	"+availableTagSchemesForUnit:language:",
	"+availableTagSchemesForLanguage:",
	"-setOrthography:range:",
	"-orthographyAtIndex:effectiveRange:",
	"-stringEditedInRange:changeInLength:",
	"-tokenRangeAtIndex:unit:",
	"-sentenceRangeForRange:",
	"-enumerateTagsInRange:unit:scheme:options:usingBlock:",
	"-tagAtIndex:unit:scheme:tokenRange:",
	"-tagsInRange:unit:scheme:options:tokenRanges:",
	"-enumerateTagsInRange:scheme:options:usingBlock:",
	"-tagAtIndex:scheme:tokenRange:sentenceRange:",
	"-tagsInRange:scheme:options:tokenRanges:",
	"-dominantLanguage",
	"+dominantLanguageForString:",
	"+tagForString:atIndex:unit:scheme:orthography:tokenRange:",
	"+tagsForString:range:unit:scheme:options:orthography:tokenRanges:",
	"+enumerateTagsForString:range:unit:scheme:options:orthography:usingBlock:",
	"-possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:"
    );
    NSLocale = (
	"+autoupdatingCurrentLocale",
	"+availableLocaleIdentifiers",
	"+canonicalLanguageIdentifierFromString:",
	"+canonicalLocaleIdentifierFromString:",
	"+characterDirectionForLanguage:",
	"+commonISOCurrencyCodes",
	"+componentsFromLocaleIdentifier:",
	"+currentLocale",
	"+ISOCountryCodes",
	"+ISOCurrencyCodes",
	"+ISOLanguageCodes",
	"+lineDirectionForLanguage:",
	"+localeIdentifierFromComponents:",
	"+localeIdentifierFromWindowsLocaleCode:",
	"+localeWithLocaleIdentifier:",
	"+preferredLanguages",
	"+systemLocale",
	"+windowsLocaleCodeFromLocaleIdentifier:",
	"-displayNameForKey:value:",
	"-initWithLocaleIdentifier:",
	"-localeIdentifier",
	"-objectForKey:",
	"-languageCode",
	"-countryCode",
	"-scriptCode",
	"-variantCode",
	"-exemplarCharacterSet",
	"-collationIdentifier",
	"-collatorIdentifier"
    );
    NSLock = (
	"-isLockedByCurrentThread",
	"-lockBeforeDate:",
	"-lock",
	"-tryLock",
	"-unlock",
	"-name",
	"-setName:"
    );
    NSMapTable = (
	"+mapTableWithKeyOptions:valueOptions:",
	"+strongToStrongObjectsMapTable",
	"+strongToWeakObjectsMapTable",
	"+weakToStrongObjectsMapTable",
	"+weakToWeakObjectsMapTable",
	"-initWithKeyOptions:valueOptions:capacity:",
	"-initWithKeyPointerFunctions:valuePointerFunctions:capacity:",
	"-count",
	"-dictionaryRepresentation",
	"-keyEnumerator",
	"-keyPointerFunctions",
	"-objectEnumerator",
	"-objectForKey:",
	"-removeAllObjects",
	"-removeObjectForKey:",
	"-setObject:forKey:",
	"-valuePointerFunctions"
    );
    NSMassFormatter = (
	"-numberFormatter",
	"-setNumberFormatter:",
	"-unitStyle",
	"-setUnitStyle:",
	"-isForPersonMassUse",
	"-setForPersonMassUse:",
	"-stringFromValue:unit:",
	"-stringFromKilograms:",
	"-unitStringFromValue:unit:",
	"-unitStringFromKilograms:usedUnit:",
	"-getObjectValue:forString:errorDescription:"
    );
    NSMeasurement = (
	"-initWithDoubleValue:unit:",
	"-unit",
	"-doubleValue",
	"-canBeConvertedToUnit:",
	"-measurementByConvertingToUnit:",
	"-measurementByAddingMeasurement:",
	"-measurementBySubtractingMeasurement:"
    );
    NSMeasurementFormatter = (
	"-unitOptions",
	"-setUnitOptions:",
	"-unitStyle",
	"-setUnitStyle:",
	"-locale",
	"-setLocale:",
	"-numberFormatter",
	"-setNumberFormatter:",
	"-stringFromMeasurement:",
	"-stringFromUnit:"
    );
    NSMessagePortNameServer = (
	"+sharedInstance",
	"-portForName:",
	"-portForName:onHost:"
    );
    NSMetadataItem = (
	"-attributes",
	"-valueForAttribute:",
	"-valuesForAttributes:"
    );
    NSMetadataQuery = (
	"-valueOfAttribute:forResultAtIndex:",
	"-groupedResults",
	"-valueLists",
	"-indexOfResult:",
	"-results",
	"-resultAtIndex:",
	"-resultCount",
	"-enableUpdates",
	"-disableUpdates",
	"-isStopped",
	"-isGathering",
	"-isStarted",
	"-stopQuery",
	"-startQuery",
	"-setSearchItemURLs:",
	"-searchItemURLs",
	"-setSearchScopes:",
	"-searchScopes",
	"-setNotificationBatchingInterval:",
	"-notificationBatchingInterval",
	"-setGroupingAttributes:",
	"-groupingAttributes",
	"-setValueListAttributes:",
	"-valueListAttributes",
	"-setSortDescriptors:",
	"-sortDescriptors",
	"-setPredicate:",
	"-predicate",
	"-setDelegate:",
	"-delegate"
    );
    NSMetadataQueryAttributeValueTuple = (
	"-attribute",
	"-value",
	"-count"
    );
    NSMetadataQueryResultGroup = (
	"-attribute",
	"-value",
	"-subgroups",
	"-resultCount",
	"-resultAtIndex:",
	"-results"
    );
    NSMethodSignature = (
	"+signatureWithObjCTypes:",
	"-frameLength",
	"-getArgumentTypeAtIndex:",
	"-isOneway",
	"-methodReturnLength",
	"-methodReturnType",
	"-numberOfArguments"
    );
    NSMutableArray = (
	"+arrayWithCapacity:",
	"-addObject:",
	"-addObjectsFromArray:",
	"-exchangeObjectAtIndex:withObjectAtIndex:",
	"-initWithCapacity:",
	"-insertObject:atIndex:",
	"-insertObjects:atIndexes:",
	"-removeObjectAtIndex:",
	"-removeObjectsAtIndexes:",
	"-replaceObjectAtIndex:withObject:",
	"-replaceObjectsAtIndexes:withObjects:",
	"-replaceObjectsInRange:withObjectsFromArray:",
	"-replaceObjectsInRange:withObjectsFromArray:range:",
	"-setArray:",
	"-removeAllObjects",
	"-removeLastObject",
	"-removeObject:",
	"-removeObject:inRange:",
	"-removeObjectIdenticalTo:",
	"-removeObjectIdenticalTo:inRange:",
	"-removeObjectsInArray:",
	"-removeObjectsInRange:",
	"-removeObjectsFromIndices:numIndices:",
	"-sortUsingFunction:context:",
	"-sortUsingSelector:",
	"-sortUsingComparator:",
	"-sortWithOptions:usingComparator:",
	"-setObject:atIndexedSubscript:"
    );
    "NSMutableArray(NSPredicate)" = (
	"-filterUsingPredicate:"
    );
    "NSMutableArray(NSSortDescriptorSorting)" = (
	"-sortUsingDescriptors:"
    );
    NSMutableAttributedString = (
	"-mutableString",
	"-deleteCharactersInRange:",
	"-setAttributes:range:",
	"-addAttribute:value:range:",
	"-addAttributes:range:",
	"-removeAttribute:range:",
	"-appendAttributedString:",
	"-insertAttributedString:atIndex:",
	"-replaceCharactersInRange:withAttributedString:",
	"-replaceCharactersInRange:withString:",
	"-setAttributedString:",
	"-beginEditing",
	"-endEditing"
    );
    NSMutableCharacterSet = (
	"-addCharactersInRange:",
	"-addCharactersInString:",
	"-formIntersectionWithCharacterSet:",
	"-formUnionWithCharacterSet:",
	"-removeCharactersInRange:",
	"-removeCharactersInString:",
	"-invert"
    );
    NSMutableData = (
	"+dataWithCapacity:",
	"+dataWithLength:",
	"-initWithCapacity:",
	"-initWithLength:",
	"-increaseLengthBy:",
	"-setLength:",
	"-mutableBytes",
	"-appendBytes:length:",
	"-appendData:",
	"-replaceBytesInRange:withBytes:",
	"-replaceBytesInRange:withBytes:length:",
	"-resetBytesInRange:",
	"-setData:",
	"-serializeAlignedBytesLength:",
	"-serializeDataAt:ofObjCType:context:",
	"-serializeInt:",
	"-serializeInt:atIndex:",
	"-serializeInts:count:",
	"-serializeInts:count:atIndex:"
    );
    "NSMutableData(GNUstepExtensions)" = (
	"-capacity",
	"-setCapacity:",
	"-shmID",
	"-serializeTypeTag:",
	"-serializeTypeTag:andCrossRef:"
    );
    NSMutableDictionary = (
	"+dictionaryWithCapacity:",
	"-addEntriesFromDictionary:",
	"-initWithCapacity:",
	"-removeAllObjects",
	"-removeObjectForKey:",
	"-removeObjectsForKeys:",
	"-setObject:forKey:",
	"-setDictionary:",
	"-setValue:forKey:",
	"-takeStoredValue:forKey:",
	"-takeValue:forKey:",
	"-setObject:forKeyedSubscript:"
    );
    NSMutableIndexSet = (
	"-addIndex:",
	"-addIndexes:",
	"-addIndexesInRange:",
	"-removeAllIndexes",
	"-removeIndex:",
	"-removeIndexes:",
	"-removeIndexesInRange:",
	"-shiftIndexesStartingAtIndex:by:"
    );
    NSMutableOrderedSet = (
	"+orderedSetWithCapacity:",
	"-initWithCapacity:",
	"-init",
	"-addObject:",
	"-addObjects:count:",
	"-addObjectsFromArray:",
	"-insertObject:atIndex:",
	"-setObject:atIndexedSubscript:",
	"-insertObjects:atIndexes:",
	"-removeObject:",
	"-removeObjectAtIndex:",
	"-removeObjectsAtIndexes:",
	"-removeObjectsInArray:",
	"-removeObjectsInRange:",
	"-removeAllObjects",
	"-replaceObjectAtIndex:withObject:",
	"-replaceObjectsAtIndexes:withObjects:",
	"-replaceObjectsInRange:withObjects:count:",
	"-setObject:atIndex:",
	"-moveObjectsAtIndexes:toIndex:",
	"-exchangeObjectAtIndex:withObjectAtIndex:",
	"-filterUsingPredicate:",
	"-sortUsingDescriptors:",
	"-sortUsingComparator:",
	"-sortWithOptions:usingComparator:",
	"-sortRange:options:usingComparator:",
	"-intersectOrderedSet:",
	"-intersectSet:",
	"-minusOrderedSet:",
	"-minusSet:",
	"-unionOrderedSet:",
	"-unionSet:",
	"-initWithCoder:"
    );
    NSMutableSet = (
	"+setWithCapacity:",
	"-addObject:",
	"-addObjectsFromArray:",
	"-initWithCapacity:",
	"-intersectSet:",
	"-minusSet:",
	"-removeAllObjects",
	"-removeObject:",
	"-setSet:",
	"-unionSet:"
    );
    "NSMutableSet(NSPredicate)" = (
	"-filterUsingPredicate:"
    );
    NSMutableString = (
	"+string",
	"+stringWithCharacters:length:",
	"+stringWithCString:length:",
	"+stringWithCString:",
	"+stringWithFormat:,...",
	"+stringWithContentsOfFile:",
	"+stringWithCapacity:",
	"-initWithCapacity:",
	"-appendFormat:,...",
	"-appendString:",
	"-deleteCharactersInRange:",
	"-insertString:atIndex:",
	"-replaceCharactersInRange:withString:",
	"-replaceOccurrencesOfString:withString:options:range:",
	"-setString:"
    );
    NSMutableURLRequest = (
	"-setCachePolicy:",
	"-setMainDocumentURL:",
	"-setTimeoutInterval:",
	"-setURL:"
    );
    "NSMutableURLRequest(GNUstep)" = (
	"-setDebug:",
	"-setDebugLogDelegate:"
    );
    "NSMutableURLRequest(NSMutableHTTPURLRequest)" = (
	"-addValue:forHTTPHeaderField:",
	"-setAllHTTPHeaderFields:",
	"-setHTTPBodyStream:",
	"-setHTTPBody:",
	"-setHTTPMethod:",
	"-setHTTPShouldHandleCookies:",
	"-setValue:forHTTPHeaderField:",
	"-setAssumesHTTP3Capable:"
    );
    NSNetService = (
	"+dataFromTXTRecordDictionary:",
	"+dictionaryFromTXTRecordData:",
	"-initWithDomain:type:name:",
	"-initWithDomain:type:name:port:",
	"-removeFromRunLoop:forMode:",
	"-scheduleInRunLoop:forMode:",
	"-port",
	"-publishWithOptions:",
	"-publish",
	"-resolve",
	"-resolveWithTimeout:",
	"-stop",
	"-startMonitoring",
	"-stopMonitoring",
	"-delegate",
	"-setDelegate:",
	"-addresses",
	"-domain",
	"-hostName",
	"-name",
	"-type",
	"-protocolSpecificInformation",
	"-setProtocolSpecificInformation:",
	"-TXTRecordData",
	"-setTXTRecordData:",
	"-getInputStream:outputStream:"
    );
    NSNetServiceBrowser = (
	"-init",
	"-removeFromRunLoop:forMode:",
	"-scheduleInRunLoop:forMode:",
	"-searchForAllDomains",
	"-searchForBrowsableDomains",
	"-searchForRegistrationDomains",
	"-searchForServicesOfType:inDomain:",
	"-stop",
	"-delegate",
	"-setDelegate:"
    );
    NSNotification = (
	"+notificationWithName:object:",
	"+notificationWithName:object:userInfo:",
	"-name",
	"-object",
	"-userInfo"
    );
    NSNotificationCenter = (
	"+defaultCenter",
	"-addObserver:selector:name:object:",
	"-addObserverForName:object:queue:usingBlock:",
	"-removeObserver:",
	"-removeObserver:name:object:",
	"-postNotification:",
	"-postNotificationName:object:",
	"-postNotificationName:object:userInfo:"
    );
    NSNotificationQueue = (
	"+defaultQueue",
	"-initWithNotificationCenter:",
	"-dequeueNotificationsMatching:coalesceMask:",
	"-enqueueNotification:postingStyle:",
	"-enqueueNotification:postingStyle:coalesceMask:forModes:"
    );
    NSNull = (
	"+null"
    );
    NSNumber = (
	"+numberWithBool:",
	"+numberWithChar:",
	"+numberWithDouble:",
	"+numberWithFloat:",
	"+numberWithInt:",
	"+numberWithLong:",
	"+numberWithLongLong:",
	"+numberWithShort:",
	"+numberWithUnsignedChar:",
	"+numberWithUnsignedInt:",
	"+numberWithUnsignedLong:",
	"+numberWithUnsignedLongLong:",
	"+numberWithUnsignedShort:",
	"-initWithBool:",
	"-initWithChar:",
	"-initWithDouble:",
	"-initWithFloat:",
	"-initWithInt:",
	"-initWithLong:",
	"-initWithLongLong:",
	"-initWithShort:",
	"-initWithUnsignedChar:",
	"-initWithUnsignedInt:",
	"-initWithUnsignedLong:",
	"-initWithUnsignedLongLong:",
	"-initWithUnsignedShort:",
	"-boolValue",
	"-charValue",
	"-doubleValue",
	"-floatValue",
	"-intValue",
	"-longValue",
	"-longLongValue",
	"-shortValue",
	"-unsignedCharValue",
	"-unsignedIntValue",
	"-unsignedLongValue",
	"-unsignedLongLongValue",
	"-unsignedShortValue",
	"-stringValue",
	"-description",
	"-descriptionWithLocale:",
	"-compare:",
	"-isEqualToNumber:",
	"+numberWithInteger:",
	"+numberWithUnsignedInteger:",
	"-initWithInteger:",
	"-initWithUnsignedInteger:",
	"-integerValue",
	"-unsignedIntegerValue"
    );
    "NSNumber(NSDecimalNumber)" = (
	"-decimalValue"
    );
    NSNumberFormatter = (
	"-format",
	"-setFormat:",
	"-localizesFormat",
	"-setLocalizesFormat:",
	"-negativeFormat",
	"-setNegativeFormat:",
	"-positiveFormat",
	"-setPositiveFormat:",
	"-attributedStringForNil",
	"-setAttributedStringForNil:",
	"-attributedStringForNotANumber",
	"-setAttributedStringForNotANumber:",
	"-attributedStringForZero",
	"-setAttributedStringForZero:",
	"-textAttributesForNegativeValues",
	"-setTextAttributesForNegativeValues:",
	"-textAttributesForPositiveValues",
	"-setTextAttributesForPositiveValues:",
	"-roundingBehavior",
	"-setRoundingBehavior:",
	"-hasThousandSeparators",
	"-setHasThousandSeparators:",
	"-thousandSeparator",
	"-setThousandSeparator:",
	"-allowsFloats",
	"-setAllowsFloats:",
	"-decimalSeparator",
	"-setDecimalSeparator:",
	"-maximum",
	"-setMaximum:",
	"-minimum",
	"-setMinimum:",
	"-setFormatterBehavior:",
	"-formatterBehavior",
	"+setDefaultFormatterBehavior:",
	"+defaultFormatterBehavior",
	"-setNumberStyle:",
	"-numberStyle",
	"-setGeneratesDecimalNumbers:",
	"-generatesDecimalNumbers",
	"-setLocale:",
	"-locale",
	"-setRoundingIncrement:",
	"-roundingIncrement",
	"-setRoundingMode:",
	"-roundingMode",
	"-setFormatWidth:",
	"-formatWidth",
	"-setMultiplier:",
	"-multiplier",
	"-setPercentSymbol:",
	"-percentSymbol",
	"-setPerMillSymbol:",
	"-perMillSymbol",
	"-setMinusSign:",
	"-minusSign",
	"-setPlusSign:",
	"-plusSign",
	"-setExponentSymbol:",
	"-exponentSymbol",
	"-setZeroSymbol:",
	"-zeroSymbol",
	"-setNilSymbol:",
	"-nilSymbol",
	"-setNotANumberSymbol:",
	"-notANumberSymbol",
	"-setNegativeInfinitySymbol:",
	"-negativeInfinitySymbol",
	"-setPositiveInfinitySymbol:",
	"-positiveInfinitySymbol",
	"-setCurrencySymbol:",
	"-currencySymbol",
	"-setCurrencyCode:",
	"-currencyCode",
	"-setInternationalCurrencySymbol:",
	"-internationalCurrencySymbol",
	"-setPositivePrefix:",
	"-positivePrefix",
	"-setPositiveSuffix:",
	"-positiveSuffix",
	"-setNegativePrefix:",
	"-negativePrefix",
	"-setNegativeSuffix:",
	"-negativeSuffix",
	"-setTextAttributesForZero:",
	"-textAttributesForZero",
	"-setTextAttributesForNil:",
	"-textAttributesForNil",
	"-setTextAttributesForNotANumber:",
	"-textAttributesForNotANumber",
	"-setTextAttributesForPositiveInfinity:",
	"-textAttributesForPositiveInfinity",
	"-setTextAttributesForNegativeInfinity:",
	"-textAttributesForNegativeInfinity",
	"-setGroupingSeparator:",
	"-groupingSeparator",
	"-setUsesGroupingSeparator:",
	"-usesGroupingSeparator",
	"-setAlwaysShowsDecimalSeparator:",
	"-alwaysShowsDecimalSeparator",
	"-setCurrencyDecimalSeparator:",
	"-currencyDecimalSeparator",
	"-setGroupingSize:",
	"-groupingSize",
	"-setSecondaryGroupingSize:",
	"-secondaryGroupingSize",
	"-setPaddingCharacter:",
	"-paddingCharacter",
	"-setPaddingPosition:",
	"-paddingPosition",
	"-setMinimumIntegerDigits:",
	"-minimumIntegerDigits",
	"-setMinimumFractionDigits:",
	"-minimumFractionDigits",
	"-setMaximumIntegerDigits:",
	"-maximumIntegerDigits",
	"-setMaximumFractionDigits:",
	"-maximumFractionDigits",
	"-numberFromString:",
	"-stringFromNumber:",
	"-getObjectValue:forString:range:error:",
	"-setUsesSignificantDigits:",
	"-usesSignificantDigits",
	"-setMinimumSignificantDigits:",
	"-minimumSignificantDigits",
	"-setMaximumSignificantDigits:",
	"-maximumSignificantDigits",
	"-setCurrencyGroupingSeparator:",
	"-currencyGroupingSeparator",
	"-setLenient:",
	"-isLenient",
	"-setPartialStringValidationEnabled:",
	"-isPartialStringValidationEnabled",
	"+localizedStringFromNumber:numberStyle:"
    );
    NSObject = (
	"-finalize",
	"-className",
	"+allocWithZone:",
	"+alloc",
	"+class",
	"+load",
	"+initialize",
	"+instanceMethodForSelector:",
	"+instanceMethodSignatureForSelector:",
	"+instancesRespondToSelector:",
	"+isSubclassOfClass:",
	"+new",
	"+poseAsClass:",
	"+setVersion:",
	"+version",
	"-awakeAfterUsingCoder:",
	"-classForArchiver",
	"-classForCoder",
	"-copy",
	"-dealloc",
	"-doesNotRecognizeSelector:",
	"-forwardInvocation:",
	"-init",
	"-methodForSelector:",
	"-methodSignatureForSelector:",
	"-mutableCopy",
	"-replacementObjectForArchiver:",
	"-replacementObjectForCoder:",
	"-superclass",
	"+resolveClassMethod:",
	"+resolveInstanceMethod:",
	"-autoContentAccessingProxy",
	"-forwardingTargetForSelector:"
    );
    "NSObject(GNUstep)" = (
	"+enableDoubleReleaseCheck:"
    );
    "NSObject(GSTraceLocks)" = (
	"+shouldCreateTraceableLocks:",
	"+tracedCondition",
	"+tracedConditionLockWithCondition:",
	"+tracedLock",
	"+tracedRecursiveLock"
    );
    "NSObject(NEXTSTEP)" = (
	"-error:,..."
    );
    "NSObject(NSClassDescriptionPrimitives)" = (
	"-attributeKeys",
	"-classDescription",
	"-inverseForRelationshipKey:",
	"-toManyRelationshipKeys",
	"-toOneRelationshipKeys"
    );
    "NSObject(NSComparisonMethods)" = (
	"-doesContain:",
	"-isCaseInsensitiveLike:",
	"-isEqualTo:",
	"-isGreaterThan:",
	"-isGreaterThanOrEqualTo:",
	"-isLessThan:",
	"-isLessThanOrEqualTo:",
	"-isLike:",
	"-isNotEqualTo:"
    );
    "NSObject(NSConnectionDelegate)" = (
	"-authenticateComponents:withData:",
	"-authenticationDataForComponents:",
	"-connection:shouldMakeNewConnection:",
	"-connection:didConnect:",
	"-makeNewConnection:sender:"
    );
    "NSObject(NSErrorRecoveryAttempting)" = (
	"-attemptRecoveryFromError:optionIndex:",
	"-attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:"
    );
    "NSObject(NSFileManagerDelegate)" = (
	"-fileManager:shouldCopyItemAtPath:toPath:",
	"-fileManager:shouldCopyItemAtURL:toURL:",
	"-fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:",
	"-fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:",
	"-fileManager:shouldMoveItemAtPath:toPath:",
	"-fileManager:shouldMoveItemAtURL:toURL:",
	"-fileManager:shouldProceedAfterError:movingItemAtPath:toPath:",
	"-fileManager:shouldProceedAfterError:movingItemAtURL:toURL:",
	"-fileManager:shouldLinkItemAtPath:toPath:",
	"-fileManager:shouldLinkItemAtURL:toURL:",
	"-fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:",
	"-fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:",
	"-fileManager:shouldRemoveItemAtPath:",
	"-fileManager:shouldRemoveItemAtURL:",
	"-fileManager:shouldProceedAfterError:removingItemAtPath:",
	"-fileManager:shouldProceedAfterError:removingItemAtURL:"
    );
    "NSObject(NSFileManagerHandler)" = (
	"-fileManager:shouldProceedAfterError:",
	"-fileManager:willProcessPath:"
    );
    "NSObject(NSFilePresenter)" = (
	"-primaryPresentedItemURL",
	"-observedPresentedItemUbiquityAttributes",
	"-accommodatePresentedItemDeletionWithCompletionHandler:",
	"-accommodatePresentedSubitemDeletionAtURL:completionHandler:",
	"-presentedItemDidChange",
	"-presentedItemDidChangeUbiquityAttributes:",
	"-presentedItemDidGainVersion:",
	"-presentedItemDidLoseVersion:",
	"-presentedItemDidMoveToURL:",
	"-presentedItemDidResolveConflictVersion:",
	"-presentedSubitemAtURL:didMoveToURL:",
	"-presentedSubitemAtURL:didGainVersion:",
	"-presentedSubitemAtURL:didLoseVersion:",
	"-presentedSubitemAtURL:didResolveConflictVersion:",
	"-presentedSubitemDidAppearAtURL:",
	"-presentedSubitemDidChangeAtURL:",
	"-relinquishPresentedItemToReader:",
	"-relinquishPresentedItemToWriter:",
	"-savePresentedItemChangesWithCompletionHandler:"
    );
    "NSObject(NSKeyValueCoding)" = (
	"+accessInstanceVariablesDirectly",
	"+useStoredAccessor",
	"-dictionaryWithValuesForKeys:",
	"-handleQueryWithUnboundKey:",
	"-handleTakeValue:forUnboundKey:",
	"-mutableArrayValueForKey:",
	"-mutableArrayValueForKeyPath:",
	"-mutableSetValueForKey:",
	"-mutableSetValueForKeyPath:",
	"-setNilValueForKey:",
	"-setValue:forKey:",
	"-setValue:forKeyPath:",
	"-setValue:forUndefinedKey:",
	"-setValuesForKeysWithDictionary:",
	"-storedValueForKey:",
	"-takeStoredValue:forKey:",
	"-takeStoredValuesFromDictionary:",
	"-takeValue:forKey:",
	"-takeValue:forKeyPath:",
	"-takeValuesFromDictionary:",
	"-unableToSetNilForKey:",
	"-validateValue:forKey:error:",
	"-validateValue:forKeyPath:error:",
	"-valueForKey:",
	"-valueForKeyPath:",
	"-valueForUndefinedKey:",
	"-valuesForKeys:"
    );
    "NSObject(NSKeyValueObserverNotification)" = (
	"-didChangeValueForKey:",
	"-didChange:valuesAtIndexes:forKey:",
	"-willChangeValueForKey:",
	"-willChange:valuesAtIndexes:forKey:",
	"-didChangeValueForKey:withSetMutation:usingObjects:",
	"-willChangeValueForKey:withSetMutation:usingObjects:"
    );
    "NSObject(NSKeyValueObserverRegistration)" = (
	"-addObserver:forKeyPath:options:context:",
	"-removeObserver:forKeyPath:",
	"-removeObserver:forKeyPath:context:"
    );
    "NSObject(NSKeyValueObserving)" = (
	"-observeValueForKeyPath:ofObject:change:context:"
    );
    "NSObject(NSKeyValueObservingCustomization)" = (
	"+automaticallyNotifiesObserversForKey:",
	"+setKeys:triggerChangeNotificationsForDependentKey:",
	"+keyPathsForValuesAffectingValueForKey:",
	"-observationInfo",
	"-setObservationInfo:"
    );
    "NSObject(NSKeyedArchiverDelegate)" = (
	"-archiver:didEncodeObject:",
	"-archiver:willEncodeObject:",
	"-archiverDidFinish:",
	"-archiverWillFinish:",
	"-archiver:willReplaceObject:withObject:"
    );
    "NSObject(NSKeyedArchiverObjectSubstitution)" = (
	"-classForKeyedArchiver",
	"-replacementObjectForKeyedArchiver:"
    );
    "NSObject(NSKeyedUnarchiverDelegate)" = (
	"-unarchiver:cannotDecodeObjectOfClassName:originalClasses:",
	"-unarchiver:didDecodeObject:",
	"-unarchiverDidFinish:",
	"-unarchiverWillFinish:",
	"-unarchiver:willReplaceObject:withObject:"
    );
    "NSObject(NSKeyedUnarchiverObjectSubstitution)" = (
	"+classForKeyedUnarchiver"
    );
    "NSObject(NSMetadataQueryDelegate)" = (
	"-metadataQuery:replacementObjectForResultObject:",
	"-metadataQuery:replacementValueForAttribute:value:"
    );
    "NSObject(NSNetServiceBrowserDelegateMethods)" = (
	"-netServiceBrowserWillSearch:",
	"-netServiceBrowser:didNotSearch:",
	"-netServiceBrowserDidStopSearch:",
	"-netServiceBrowser:didFindDomain:moreComing:",
	"-netServiceBrowser:didRemoveDomain:moreComing:",
	"-netServiceBrowser:didFindService:moreComing:",
	"-netServiceBrowser:didRemoveService:moreComing:"
    );
    "NSObject(NSNetServiceDelegateMethods)" = (
	"-netServiceWillPublish:",
	"-netServiceDidPublish:",
	"-netService:didNotPublish:",
	"-netServiceWillResolve:",
	"-netServiceDidResolveAddress:",
	"-netService:didNotResolve:",
	"-netServiceDidStop:",
	"-netService:didUpdateTXTRecordData:",
	"-netService:didAcceptConnectionWithInputStream:outputStream:"
    );
    "NSObject(NSPortCoder)" = (
	"-classForPortCoder",
	"-replacementObjectForPortCoder:"
    );
    "NSObject(NSPortDelegateMethods)" = (
	"-handlePortMessage:"
    );
    "NSObject(NSSpellServerDelegate)" = (
	"-spellServer:findMisspelledWordInString:language:wordCount:countOnly:",
	"-spellServer:suggestGuessesForWord:inLanguage:",
	"-spellServer:didLearnWord:inLanguage:",
	"-spellServer:didForgetWord:inLanguage:",
	"-spellServer:suggestCompletionsForPartialWordRange:inString:language:",
	"-spellServer:checkGrammarInString:language:details:"
    );
    "NSObject(NSStreamDelegate)" = (
	"-stream:handleEvent:"
    );
    "NSObject(NSThreadPerformAdditions)" = (
	"-performSelectorOnMainThread:withObject:waitUntilDone:modes:",
	"-performSelectorOnMainThread:withObject:waitUntilDone:",
	"-performSelector:onThread:withObject:waitUntilDone:modes:",
	"-performSelector:onThread:withObject:waitUntilDone:",
	"-performSelectorInBackground:withObject:"
    );
    "NSObject(NSURLClient)" = (
	"-URL:resourceDataDidBecomeAvailable:",
	"-URLResourceDidFinishLoading:",
	"-URLResourceDidCancelLoading:",
	"-URL:resourceDidFailLoadingWithReason:"
    );
    "NSObject(NSURLConnectionDelegate)" = (
	"-connection:didCancelAuthenticationChallenge:",
	"-connection:didFailWithError:",
	"-connectionDidFinishLoading:",
	"-connection:didReceiveAuthenticationChallenge:",
	"-connection:didReceiveData:",
	"-connection:didReceiveResponse:",
	"-connection:willCacheResponse:",
	"-connection:willSendRequest:redirectResponse:"
    );
    "NSObject(NSURLDownloadDelegate)" = (
	"-downloadDidBegin:",
	"-downloadDidFinish:",
	"-download:decideDestinationWithSuggestedFilename:",
	"-download:didCancelAuthenticationChallenge:",
	"-download:didCreateDestination:",
	"-download:didFailWithError:",
	"-download:didReceiveAuthenticationChallenge:",
	"-download:didReceiveDataOfLength:",
	"-download:didReceiveResponse:",
	"-download:shouldDecodeSourceDataOfMIMEType:",
	"-download:willResumeWithResponse:fromByte:",
	"-download:willSendRequest:redirectResponse:"
    );
    "NSObject(NSUserNotificationCenterDelegateMethods)" = (
	"-userNotificationCenter:didDeliverNotification:",
	"-userNotificationCenter:didActivateNotification:",
	"-userNotificationCenter:shouldPresentNotification:"
    );
    "NSObject(NSXMLParserDelegateEventAdditions)" = (
	"-parser:resolveExternalEntityName:systemID:",
	"-parser:didEndElement:namespaceURI:qualifiedName:",
	"-parser:didEndMappingPrefix:",
	"-parser:didStartElement:namespaceURI:qualifiedName:attributes:",
	"-parser:didStartMappingPrefix:toURI:",
	"-parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:",
	"-parser:foundCDATA:",
	"-parser:foundCharacters:",
	"-parser:foundComment:",
	"-parser:foundElementDeclarationWithName:model:",
	"-parser:foundExternalEntityDeclarationWithName:publicID:systemID:",
	"-parser:foundIgnorableWhitespace:",
	"-parser:foundInternalEntityDeclarationWithName:value:",
	"-parser:foundNotationDeclarationWithName:publicID:systemID:",
	"-parser:foundProcessingInstructionWithTarget:data:",
	"-parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:",
	"-parser:parseErrorOccurred:",
	"-parser:validationErrorOccurred:",
	"-parserDidEndDocument:",
	"-parserDidStartDocument:"
    );
    "NSObject(RunLoopEvents)" = (
	"-runLoopShouldBlock:"
    );
    "NSObject(TimedPerformers)" = (
	"+cancelPreviousPerformRequestsWithTarget:",
	"+cancelPreviousPerformRequestsWithTarget:selector:object:",
	"-performSelector:withObject:afterDelay:",
	"-performSelector:withObject:afterDelay:inModes:"
    );
    NSOperation = (
	"-addDependency:",
	"-cancel",
	"-completionBlock",
	"-dependencies",
	"-isCancelled",
	"-isConcurrent",
	"-isExecuting",
	"-isFinished",
	"-isReady",
	"-main",
	"-queuePriority",
	"-removeDependency:",
	"-setCompletionBlock:",
	"-setQueuePriority:",
	"-setThreadPriority:",
	"-start",
	"-threadPriority",
	"-waitUntilFinished"
    );
    NSOperationQueue = (
	"+currentQueue",
	"+mainQueue",
	"-addOperation:",
	"-addOperations:waitUntilFinished:",
	"-addOperationWithBlock:",
	"-cancelAllOperations",
	"-isSuspended",
	"-maxConcurrentOperationCount",
	"-name",
	"-operationCount",
	"-operations",
	"-setMaxConcurrentOperationCount:",
	"-setName:",
	"-setSuspended:",
	"-waitUntilAllOperationsAreFinished"
    );
    NSOrderedSet = (
	"+orderedSet",
	"+orderedSetWithArray:",
	"+orderedSetWithArray:range:copyItems:",
	"+orderedSetWithObject:",
	"+orderedSetWithObjects:,...",
	"+orderedSetWithObjects:count:",
	"+orderedSetWithOrderedSet:",
	"+orderedSetWithSet:",
	"+orderedSetWithSet:copyItems:",
	"-initWithArray:",
	"-initWithArray:copyItems:",
	"-initWithArray:range:copyItems:",
	"-initWithObject:",
	"-initWithObjects:,...",
	"-initWithObjects:count:",
	"-initWithOrderedSet:",
	"-initWithOrderedSet:copyItems:",
	"-initWithOrderedSet:range:copyItems:",
	"-initWithSet:",
	"-initWithSet:copyItems:",
	"-init",
	"-count",
	"-containsObject:",
	"-enumerateObjectsAtIndexes:options:usingBlock:",
	"-enumerateObjectsUsingBlock:",
	"-enumerateObjectsWithOptions:usingBlock:",
	"-firstObject",
	"-lastObject",
	"-objectAtIndex:",
	"-objectAtIndexedSubscript:",
	"-objectsAtIndexes:",
	"-indexOfObject:",
	"-indexOfObject:inSortedRange:options:usingComparator:",
	"-indexOfObjectAtIndexes:options:passingTest:",
	"-indexOfObjectPassingTest:",
	"-indexOfObjectWithOptions:passingTest:",
	"-indexesOfObjectsAtIndexes:options:passingTest:",
	"-indexesOfObjectsPassingTest:",
	"-indexesOfObjectsWithOptions:passingTest:",
	"-objectEnumerator",
	"-reverseObjectEnumerator",
	"-reversedOrderedSet",
	"-getObjects:range:",
	"-setValue:forKey:",
	"-valueForKey:",
	"-isEqualToOrderedSet:",
	"-intersectsOrderedSet:",
	"-intersectsSet:",
	"-isSubsetOfOrderedSet:",
	"-isSubsetOfSet:",
	"-sortedArrayUsingDescriptors:",
	"-sortedArrayUsingComparator:",
	"-sortedArrayWithOptions:usingComparator:",
	"-filteredOrderedSetUsingPredicate:",
	"-description",
	"-descriptionWithLocale:",
	"-descriptionWithLocale:indent:",
	"-array",
	"-set"
    );
    NSOrthography = (
	"-initWithDominantScript:languageMap:",
	"-dominantScript",
	"-languationMap",
	"-languagesForScript:",
	"-dominantLanguageForScript:",
	"-dominantLanguage",
	"-allScripts",
	"-allLanguages",
	"+defaultOrthographyForLanguage:",
	"+orthographyWithDominantScript:languageMap:"
    );
    NSOutputStream = (
	"+outputStreamToBuffer:capacity:",
	"+outputStreamToFileAtPath:append:",
	"+outputStreamToMemory",
	"-hasSpaceAvailable",
	"-initToBuffer:capacity:",
	"-initToFileAtPath:append:",
	"-initToMemory",
	"-write:maxLength:"
    );
    NSPersonNameComponents = (
	"-namePrefix",
	"-setNamePrefix:",
	"-givenName",
	"-setGivenName:",
	"-middleName",
	"-setMiddleName:",
	"-familyName",
	"-setFamilyName:",
	"-nameSuffix",
	"-setNameSuffix:",
	"-nickname",
	"-setNickname:",
	"-phoneticRepresentation",
	"-setPhoneticRepresentation:"
    );
    NSPersonNameComponentsFormatter = (
	"+localizedStringFromPersonNameComponents:style:options:",
	"-style",
	"-setStyle:",
	"-isPhonetic",
	"-setPhonetic:",
	"-stringFromPersonNameComponents:",
	"-annotatedStringFromPersonNameComponents:",
	"-personNameComponentsFromString:",
	"-getObjectValue:forString:errorDescription:"
    );
    NSPipe = (
	"+pipe",
	"-fileHandleForReading",
	"-fileHandleForWriting"
    );
    NSPointerArray = (
	"+pointerArrayWithOptions:",
	"+pointerArrayWithPointerFunctions:",
	"+strongObjectsPointerArray",
	"+weakObjectsPointerArray",
	"-compact",
	"-count",
	"-initWithOptions:",
	"-initWithPointerFunctions:",
	"-addPointer:",
	"-insertPointer:atIndex:",
	"-pointerAtIndex:",
	"-pointerFunctions",
	"-removePointerAtIndex:",
	"-replacePointerAtIndex:withPointer:",
	"-setCount:"
    );
    "NSPointerArray(NSArrayConveniences)" = (
	"-allObjects"
    );
    NSPointerFunctions = (
	"+pointerFunctionsWithOptions:",
	"-initWithOptions:",
	"-acquireFunction",
	"-descriptionFunction",
	"-hashFunction",
	"-isEqualFunction",
	"-relinquishFunction",
	"-setAcquireFunction:",
	"-setDescriptionFunction:",
	"-setHashFunction:",
	"-setIsEqualFunction:",
	"-setRelinquishFunction:",
	"-setSizeFunction:",
	"-setUsesStrongWriteBarrier:",
	"-setUsesWeakReadAndWriteBarriers:",
	"-sizeFunction",
	"-usesStrongWriteBarrier",
	"-usesWeakReadAndWriteBarriers"
    );
    NSPort = (
	"+port",
	"+portWithMachPort:",
	"-delegate",
	"-setDelegate:",
	"-init",
	"-initWithMachPort:",
	"-machPort",
	"-invalidate",
	"-isValid",
	"-addConnection:toRunLoop:forMode:",
	"-removeConnection:fromRunLoop:forMode:",
	"-reservedSpaceLength",
	"-sendBeforeDate:msgid:components:from:reserved:",
	"-sendBeforeDate:components:from:reserved:"
    );
    NSPortCoder = (
	"+portCoderWithReceivePort:sendPort:components:",
	"-initWithReceivePort:sendPort:components:",
	"-connection",
	"-decodePortObject",
	"-dispatch",
	"-encodePortObject:",
	"-isBycopy",
	"-isByref"
    );
    NSPortMessage = (
	"-initWithMachMessage:",
	"-initWithSendPort:receivePort:components:",
	"-sendBeforeDate:",
	"-components",
	"-sendPort",
	"-receivePort",
	"-setMsgid:",
	"-msgid"
    );
    NSPortNameServer = (
	"+systemDefaultPortNameServer",
	"-portForName:",
	"-portForName:onHost:",
	"-registerPort:forName:",
	"-removePortForName:"
    );
    NSPredicate = (
	"+predicateWithFormat:,...",
	"+predicateWithFormat:argumentArray:",
	"+predicateWithFormat:arguments:",
	"+predicateWithValue:",
	"+predicateWithBlock:",
	"-evaluateWithObject:",
	"-predicateFormat",
	"-predicateWithSubstitutionVariables:",
	"-evaluateWithObject:substitutionVariables:"
    );
    NSProcessInfo = (
	"+processInfo",
	"-systemUptime",
	"-systemUptime",
	"-arguments",
	"-environment",
	"-globallyUniqueString",
	"-hostName",
	"-operatingSystem",
	"-operatingSystemName",
	"-operatingSystemVersionString",
	"-processIdentifier",
	"-processName",
	"-setProcessName:",
	"-processorCount",
	"-activeProcessorCount",
	"-physicalMemory",
	"-enableSuddenTermination",
	"-disableSuddenTermination",
	"-beginActivityWithOptions:reason:",
	"-endActivity:",
	"-performActivityWithOptions:reason:usingBlock:",
	"-performExpiringActivityWithReason:usingBlock:"
    );
    "NSProcessInfo(GNUstep)" = (
	"-setLogFile:",
	"+initializeWithArguments:count:environment:",
	"-androidContext",
	"-androidFilesDir",
	"-androidCacheDir"
    );
    NSProgress = (
	"-initWithParent:userInfo:",
	"+discreteProgressWithTotalUnitCount:",
	"+progressWithTotalUnitCount:",
	"+progressWithTotalUnitCount:parent:pendingUnitCount:",
	"+currentProgress",
	"-becomeCurrentWithPendingUnitCount:",
	"-addChild:withPendingUnitCount:",
	"-resignCurrent",
	"-totalUnitCount",
	"-setTotalUnitCount:",
	"-completedUnitCount",
	"-setCompletedUnitCount:",
	"-localizedDescription",
	"-localizedAdditionalDescription",
	"-fractionCompleted",
	"-isCancellable",
	"-isCancelled",
	"-cancel",
	"-setCancellationHandler:",
	"-isPausable",
	"-isPaused",
	"-pause",
	"-setPausingHandler:",
	"-resume",
	"-setResumingHandler:",
	"-isIndeterminate",
	"-setIndeterminate:",
	"-kind",
	"-setKind:",
	"-setUserInfoObject:forKey:",
	"-userInfo",
	"-setFileOperationKind:",
	"-fileOperationKind",
	"-setFileUrl:",
	"-fileUrl",
	"-isFinished",
	"-isOld",
	"-setEstimatedTimeRemaining:",
	"-estimatedTimeRemaining",
	"-setFileCompletedCount:",
	"-fileCompletedCount",
	"-setFileTotalCount:",
	"-fileTotalCount",
	"-setThroughput:",
	"-throughtput",
	"-publish",
	"-unpublish",
	"-performAsCurrentWithPendingUnitCount:usingBlock:",
	"+addSubscriberForFileURL:withPublishingHandler:",
	"+removeSubscriber:"
    );
    NSPropertyListSerialization = (
	"+dataFromPropertyList:format:errorDescription:",
	"+propertyList:isValidForFormat:",
	"+propertyListFromData:mutabilityOption:format:errorDescription:",
	"+dataWithPropertyList:format:options:error:",
	"+propertyListWithData:options:format:error:",
	"+propertyListWithStream:options:format:error:",
	"+writePropertyList:toStream:format:options:error:"
    );
    NSProtocolChecker = (
	"+protocolCheckerWithTarget:protocol:",
	"-initWithTarget:protocol:",
	"-forwardInvocation:",
	"-protocol",
	"-target"
    );
    NSProxy = (
	"+alloc",
	"+allocWithZone:",
	"+autorelease",
	"+class",
	"+description",
	"+isKindOfClass:",
	"+isMemberOfClass:",
	"+load",
	"+release",
	"+respondsToSelector:",
	"+retain",
	"+retainCount",
	"-autorelease",
	"-class",
	"-conformsToProtocol:",
	"-dealloc",
	"-description",
	"-forwardInvocation:",
	"-hash",
	"-init",
	"-isEqual:",
	"-isKindOfClass:",
	"-isMemberOfClass:",
	"-isProxy",
	"-methodSignatureForSelector:",
	"-release",
	"-respondsToSelector:",
	"-retain",
	"-retainCount",
	"-self",
	"-superclass",
	"-zone"
    );
    NSRecursiveLock = (
	"-isLockedByCurrentThread",
	"-tryLock",
	"-lockBeforeDate:",
	"-lock",
	"-unlock",
	"-name",
	"-setName:"
    );
    NSRegularExpression = (
	"+regularExpressionWithPattern:options:error:",
	"-initWithPattern:options:error:",
	"+regularExpressionWithPattern:options:error:",
	"-initWithPattern:options:error:",
	"-pattern",
	"-enumerateMatchesInString:options:range:usingBlock:",
	"-numberOfMatchesInString:options:range:",
	"-firstMatchInString:options:range:",
	"-matchesInString:options:range:",
	"-rangeOfFirstMatchInString:options:range:",
	"-replaceMatchesInString:options:range:withTemplate:",
	"-stringByReplacingMatchesInString:options:range:withTemplate:",
	"-replacementStringForResult:inString:offset:template:",
	"+escapedPatternForString:",
	"-options",
	"-numberOfCaptureGroups",
	"-options",
	"-numberOfCaptureGroups"
    );
    NSRunLoop = (
	"+currentRunLoop",
	"+mainRunLoop",
	"-acceptInputForMode:beforeDate:",
	"-addTimer:forMode:",
	"-currentMode",
	"-limitDateForMode:",
	"-run",
	"-runMode:beforeDate:",
	"-runUntilDate:"
    );
    "NSRunLoop(GNUstepExtensions)" = (
	"-addEvent:type:watcher:forMode:",
	"-removeEvent:type:forMode:all:"
    );
    "NSRunLoop(OPENSTEP)" = (
	"-addPort:forMode:",
	"-cancelPerformSelectorsWithTarget:",
	"-cancelPerformSelector:target:argument:",
	"-configureAsServer",
	"-performSelector:target:argument:order:modes:",
	"-removePort:forMode:"
    );
    NSScanner = (
	"+localizedScannerWithString:",
	"+scannerWithString:",
	"-initWithString:",
	"-string",
	"-scanLocation",
	"-setScanLocation:",
	"-caseSensitive",
	"-setCaseSensitive:",
	"-charactersToBeSkipped",
	"-setCharactersToBeSkipped:",
	"-locale",
	"-setLocale:",
	"-scanInt:",
	"-scanHexInt:",
	"-scanLongLong:",
	"-scanFloat:",
	"-scanDouble:",
	"-scanString:intoString:",
	"-scanCharactersFromSet:intoString:",
	"-scanUpToString:intoString:",
	"-scanUpToCharactersFromSet:intoString:",
	"-isAtEnd",
	"-scanRadixUnsignedInt:",
	"-scanRadixUnsignedLongLong:",
	"-scanDecimal:",
	"-scanHexLongLong:",
	"-scanHexDouble:",
	"-scanHexFloat:",
	"-scanInteger:"
    );
    NSSerializer = (
	"+serializePropertyList:",
	"+serializePropertyList:intoData:"
    );
    "NSSerializer(GNUstep)" = (
	"+shouldBeCompact:",
	"+serializePropertyList:intoData:compact:"
    );
    NSSet = (
	"+set",
	"+setWithArray:",
	"+setWithObject:",
	"+setWithObjects:,...",
	"+setWithObjects:count:",
	"+setWithSet:",
	"-allObjects",
	"-anyObject",
	"-containsObject:",
	"-count",
	"-description",
	"-descriptionWithLocale:",
	"-init",
	"-initWithArray:",
	"-initWithObjects:,...",
	"-initWithObjects:count:",
	"-initWithSet:",
	"-initWithSet:copyItems:",
	"-intersectsSet:",
	"-isEqualToSet:",
	"-isSubsetOfSet:",
	"-makeObjectsPerform:",
	"-makeObjectsPerform:withObject:",
	"-makeObjectsPerformSelector:",
	"-makeObjectsPerformSelector:withObject:",
	"-member:",
	"-objectEnumerator",
	"-enumerateObjectsUsingBlock:",
	"-enumerateObjectsWithOptions:usingBlock:",
	"-objectsPassingTest:",
	"-objectsWithOptions:passingTest:",
	"-setByAddingObject:",
	"-setByAddingObjectsFromSet:",
	"-setByAddingObjectsFromArray:"
    );
    "NSSet(NSPredicate)" = (
	"-filteredSetUsingPredicate:"
    );
    "NSSet(NSSortDescriptorSorting)" = (
	"-sortedArrayUsingDescriptors:"
    );
    NSSocketPort = (
	"+existingPortWithNumber:onHost:",
	"+portWithNumber:onHost:forceAddress:listener:",
	"-address",
	"-getFds:count:",
	"-handlePortMessage:",
	"-host",
	"-portNumber",
	"+setClientOptionsForTLS:",
	"+setServerOptionsForTLS:",
	"-setClientOptionsForTLS:",
	"-setServerOptionsForTLS:"
    );
    NSSocketPortNameServer = (
	"+sharedInstance",
	"-portForName:onHost:",
	"-registerPort:forName:",
	"-removePortForName:"
    );
    NSSortDescriptor = (
	"-ascending",
	"-compareObject:toObject:",
	"+sortDescriptorWithKey:ascending:",
	"+sortDescriptorWithKey:ascending:selector:",
	"+sortDescriptorWithKey:ascending:comparator:",
	"-initWithKey:ascending:comparator:",
	"-initWithKey:ascending:",
	"-initWithKey:ascending:selector:",
	"-key",
	"-selector",
	"-reversedSortDescriptor"
    );
    NSSpellServer = (
	"-registerLanguage:byVendor:",
	"-delegate",
	"-setDelegate:",
	"-run",
	"-isWordInUserDictionaries:caseSensitive:"
    );
    NSStream = (
	"+getStreamsToHost:port:inputStream:outputStream:",
	"-close",
	"-delegate",
	"-open",
	"-propertyForKey:",
	"-removeFromRunLoop:forMode:",
	"-scheduleInRunLoop:forMode:",
	"-setDelegate:",
	"-setProperty:forKey:",
	"-streamError",
	"-streamStatus"
    );
    NSString = (
	"+string",
	"+stringWithCharacters:length:",
	"+stringWithCString:encoding:",
	"+stringWithCString:length:",
	"+stringWithCString:",
	"+stringWithFormat:,...",
	"+stringWithContentsOfFile:",
	"-init",
	"-initWithBytes:length:encoding:",
	"-initWithBytesNoCopy:length:encoding:freeWhenDone:",
	"+stringWithContentsOfFile:usedEncoding:error:",
	"-initWithContentsOfFile:usedEncoding:error:",
	"+stringWithContentsOfFile:encoding:error:",
	"-initWithContentsOfFile:encoding:error:",
	"+stringWithContentsOfURL:usedEncoding:error:",
	"-initWithContentsOfURL:usedEncoding:error:",
	"+stringWithContentsOfURL:encoding:error:",
	"-initWithContentsOfURL:encoding:error:",
	"-writeToFile:atomically:encoding:error:",
	"-writeToURL:atomically:encoding:error:",
	"-stringByReplacingOccurrencesOfString:withString:options:range:",
	"-stringByReplacingOccurrencesOfString:withString:",
	"-stringByReplacingCharactersInRange:withString:",
	"-initWithCharactersNoCopy:length:freeWhenDone:",
	"-initWithCharacters:length:",
	"-initWithCStringNoCopy:length:freeWhenDone:",
	"-initWithCString:length:",
	"-initWithCString:",
	"-initWithString:",
	"-initWithFormat:,...",
	"-initWithFormat:arguments:",
	"-initWithData:encoding:",
	"-initWithContentsOfFile:",
	"-length",
	"-characterAtIndex:",
	"-getCharacters:",
	"-getCharacters:range:",
	"-stringByAppendingFormat:,...",
	"-stringByAppendingString:",
	"-componentsSeparatedByString:",
	"-substringFromIndex:",
	"-substringToIndex:",
	"-rangeOfCharacterFromSet:",
	"-rangeOfCharacterFromSet:options:",
	"-rangeOfCharacterFromSet:options:range:",
	"-rangeOfString:",
	"-rangeOfString:options:",
	"-rangeOfString:options:range:",
	"-rangeOfComposedCharacterSequenceAtIndex:",
	"-decomposedStringWithCompatibilityMapping",
	"-decomposedStringWithCanonicalMapping",
	"-precomposedStringWithCompatibilityMapping",
	"-precomposedStringWithCanonicalMapping",
	"-propertyList",
	"-propertyListFromStringsFileFormat",
	"-compare:",
	"-compare:options:",
	"-compare:options:range:",
	"-hasPrefix:",
	"-hasSuffix:",
	"-isEqual:",
	"-isEqualToString:",
	"-hash",
	"-commonPrefixWithString:options:",
	"-capitalizedString",
	"-lowercaseString",
	"-uppercaseString",
	"-cString",
	"-cStringUsingEncoding:",
	"-getCString:maxLength:encoding:",
	"-initWithCString:encoding:",
	"-lengthOfBytesUsingEncoding:",
	"-maximumLengthOfBytesUsingEncoding:",
	"-cStringLength",
	"-getCString:",
	"-getCString:maxLength:",
	"-getCString:maxLength:range:remainingRange:",
	"-floatValue",
	"-intValue",
	"-canBeConvertedToEncoding:",
	"-dataUsingEncoding:",
	"-dataUsingEncoding:allowLossyConversion:",
	"+defaultCStringEncoding",
	"-description",
	"-fastestEncoding",
	"-smallestEncoding",
	"-completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:",
	"-fileSystemRepresentation",
	"-getFileSystemRepresentation:maxLength:",
	"-lastPathComponent",
	"-pathExtension",
	"-stringByAbbreviatingWithTildeInPath",
	"-stringByAppendingPathComponent:",
	"-stringByAppendingPathExtension:",
	"-stringByDeletingLastPathComponent",
	"-stringByDeletingPathExtension",
	"-stringByExpandingTildeInPath",
	"-stringByResolvingSymlinksInPath",
	"-stringByStandardizingPath",
	"-_baseLength",
	"+pathWithComponents:",
	"-isAbsolutePath",
	"-pathComponents",
	"-stringsByAppendingPaths:",
	"+localizedStringWithFormat:,...",
	"+stringWithString:",
	"+stringWithContentsOfURL:",
	"+stringWithUTF8String:",
	"-initWithFormat:locale:,...",
	"-initWithFormat:locale:arguments:",
	"-initWithUTF8String:",
	"-initWithContentsOfURL:",
	"-substringWithRange:",
	"-caseInsensitiveCompare:",
	"-compare:options:range:locale:",
	"-localizedCompare:",
	"-localizedCaseInsensitiveCompare:",
	"-writeToFile:atomically:",
	"-writeToURL:atomically:",
	"-doubleValue",
	"+availableStringEncodings",
	"+localizedNameOfStringEncoding:",
	"-getLineStart:end:contentsEnd:forRange:",
	"-lineRangeForRange:",
	"-lossyCString",
	"-stringByAddingPercentEscapesUsingEncoding:",
	"-stringByPaddingToLength:withString:startingAtIndex:",
	"-stringByReplacingPercentEscapesUsingEncoding:",
	"-stringByTrimmingCharactersInSet:",
	"-UTF8String",
	"-stringByAddingPercentEncodingWithAllowedCharacters:",
	"-stringByRemovingPercentEncoding",
	"-getParagraphStart:end:contentsEnd:forRange:",
	"-paragraphRangeForRange:",
	"-boolValue",
	"-componentsSeparatedByCharactersInSet:",
	"-integerValue",
	"-longLongValue",
	"-rangeOfComposedCharacterSequencesForRange:",
	"-rangeOfString:options:range:locale:",
	"-containsString:",
	"+constantStringClass",
	"-enumerateLinesUsingBlock:",
	"-enumerateSubstringsInRange:options:usingBlock:"
    );
    "NSString(NSLinguisticAnalysis)" = (
	"-linguisticTagsInRange:scheme:options:orthography:tokenRanges:",
	"-enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:"
    );
    NSTask = (
	"+launchedTaskWithLaunchPath:arguments:",
	"-arguments",
	"-currentDirectoryPath",
	"-environment",
	"-launchPath",
	"-standardError",
	"-standardInput",
	"-standardOutput",
	"-setArguments:",
	"-setCurrentDirectoryPath:",
	"-setEnvironment:",
	"-setLaunchPath:",
	"-setStandardError:",
	"-setStandardInput:",
	"-setStandardOutput:",
	"-isRunning",
	"-processIdentifier",
	"-terminationReason",
	"-terminationStatus",
	"-interrupt",
	"-launch",
	"-resume",
	"-suspend",
	"-terminate",
	"-waitUntilExit",
	"-usePseudoTerminal",
	"-validatedLaunchPath",
	"+launchedTaskWithExecutableURL:arguments:error:terminationHandler:",
	"-launchAndReturnError:",
	"-executableURL",
	"-currentDirectoryURL"
    );
    NSTextCheckingResult = (
	"-addressComponents",
	"-components",
	"-date",
	"-duration",
	"-grammarDetails",
	"-numberOfRanges",
	"-orthography",
	"-phoneNumber",
	"-range",
	"-regularExpression",
	"-replacementString",
	"-resultType",
	"-timeZone",
	"-URL",
	"-addressComponents",
	"-components",
	"-date",
	"-duration",
	"-grammarDetails",
	"-numberOfRanges",
	"-orthography",
	"-phoneNumber",
	"-range",
	"-regularExpression",
	"-replacementString",
	"-resultType",
	"-timeZone",
	"-URL",
	"+regularExpressionCheckingResultWithRanges:count:regularExpression:",
	"-rangeAtIndex:",
	"-resultByAdjustingRangesWithOffset:"
    );
    NSThread = (
	"+currentThread",
	"+detachNewThreadSelector:toTarget:withObject:",
	"+exit",
	"+isMultiThreaded",
	"+sleepUntilDate:",
	"-threadDictionary",
	"+setThreadPriority:",
	"+threadPriority",
	"+callStackReturnAddresses",
	"+isMainThread",
	"+mainThread",
	"+sleepForTimeInterval:",
	"-cancel",
	"-init",
	"-initWithTarget:selector:object:",
	"-isCancelled",
	"-isExecuting",
	"-isFinished",
	"-isMainThread",
	"-main",
	"-name",
	"-setName:",
	"-setStackSize:",
	"-stackSize",
	"-start"
    );
    "NSThread(BlockAdditions)" = (
	"+detachNewThreadWithBlock:",
	"-initWithBlock:"
    );
    "NSThread(CallStackSymbols)" = (
	"+callStackSymbols"
    );
    "NSThread(GSLockInfo)" = (
	"-mutexDrop:",
	"-mutexHold:",
	"-mutexWait:"
    );
    NSTimeZone = (
	"+localTimeZone",
	"+timeZoneForSecondsFromGMT:",
	"+timeZoneWithName:",
	"+setDefaultTimeZone:",
	"+abbreviationDictionary",
	"+knownTimeZoneNames",
	"+timeZoneArray",
	"-timeZoneDetailArray",
	"+abbreviationMap",
	"+resetSystemTimeZone",
	"+systemTimeZone",
	"+timeZoneWithName:data:",
	"-abbreviation",
	"-abbreviationForDate:",
	"-data",
	"-initWithName:",
	"-initWithName:data:",
	"-isDaylightSavingTime",
	"-isDaylightSavingTimeForDate:",
	"-isEqualToTimeZone:",
	"-name",
	"-secondsFromGMT",
	"-secondsFromGMTForDate:",
	"-daylightSavingTimeOffsetForDate:",
	"-nextDaylightSavingTimeTransitionAfterDate:",
	"-daylightSavingTimeOffset",
	"-nextDaylightSavingTimeTransition",
	"-localizedName:locale:",
	"-timeZoneDetailForDate:",
	"-timeZoneName",
	"+defaultTimeZone",
	"+timeZoneWithAbbreviation:"
    );
    NSTimeZoneDetail = (
	"-isDaylightSavingTimeZone",
	"-timeZoneAbbreviation",
	"-timeZoneSecondsFromGMT"
    );
    NSTimer = (
	"+scheduledTimerWithTimeInterval:invocation:repeats:",
	"+scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",
	"+scheduledTimerWithTimeInterval:repeats:block:",
	"+timerWithTimeInterval:invocation:repeats:",
	"+timerWithTimeInterval:target:selector:userInfo:repeats:",
	"+timerWithTimeInterval:repeats:block:",
	"-fire",
	"-fireDate",
	"-invalidate",
	"-userInfo",
	"-isValid",
	"-timeInterval",
	"-initWithFireDate:interval:target:selector:userInfo:repeats:",
	"-setFireDate:",
	"-initWithFireDate:interval:repeats:block:"
    );
    NSURL = (
	"+fileURLWithPath:",
	"+fileURLWithPathComponents:",
	"+fileURLWithPath:isDirectory:",
	"+fileURLWithPath:isDirectory:relativeToURL:",
	"+fileURLWithPath:relativeToURL:",
	"+URLWithString:",
	"+URLByResolvingAliasFileAtURL:options:error:",
	"+URLWithString:relativeToURL:",
	"-initFileURLWithPath:",
	"-initFileURLWithPath:isDirectory:",
	"-initFileURLWithPath:relativeToURL:",
	"-initFileURLWithPath:isDirectory:relativeToURL:",
	"-initWithScheme:host:path:",
	"-initWithString:",
	"-initWithString:relativeToURL:",
	"-isFileURL",
	"-isFileURL",
	"-absoluteString",
	"-absoluteURL",
	"-baseURL",
	"-checkResourceIsReachableAndReturnError:",
	"-fragment",
	"-host",
	"-lastPathComponent",
	"-loadResourceDataNotifyingClient:usingCache:",
	"-parameterString",
	"-password",
	"-path",
	"-pathComponents",
	"-pathExtension",
	"-port",
	"-propertyForKey:",
	"-query",
	"-relativePath",
	"-relativeString",
	"-resourceDataUsingCache:",
	"-resourceSpecifier",
	"-scheme",
	"-setProperty:forKey:",
	"-setResourceData:",
	"-standardizedURL",
	"-URLByAppendingPathComponent:",
	"-URLByAppendingPathExtension:",
	"-URLByDeletingLastPathComponent",
	"-URLByDeletingPathExtension",
	"-URLByResolvingSymlinksInPath",
	"-URLByStandardizingPath",
	"-URLByAppendingPathComponent:isDirectory:",
	"-isFileReferenceURL",
	"-fileReferenceURL",
	"-filePathURL",
	"-getResourceValue:forKey:error:",
	"-URLHandleUsingCache:",
	"-user"
    );
    NSURLAuthenticationChallenge = (
	"-error",
	"-failureResponse",
	"-initWithAuthenticationChallenge:sender:",
	"-initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:",
	"-previousFailureCount",
	"-proposedCredential",
	"-protectionSpace",
	"-sender"
    );
    NSURLCache = (
	"+setSharedURLCache:",
	"+sharedURLCache",
	"-cachedResponseForRequest:",
	"-currentDiskUsage",
	"-currentMemoryUsage",
	"-diskCapacity",
	"-initWithMemoryCapacity:diskCapacity:diskPath:",
	"-memoryCapacity",
	"-removeAllCachedResponses",
	"-removeCachedResponseForRequest:",
	"-setDiskCapacity:",
	"-setMemoryCapacity:",
	"-storeCachedResponse:forRequest:"
    );
    "NSURLCache(NSURLSessionTaskAdditions)" = (
	"-storeCachedResponse:forDataTask:",
	"-cachedResponseForDataTask:",
	"-removeCachedResponseForDataTask:"
    );
    NSURLComponents = (
	"+componentsWithString:",
	"+componentsWithURL:resolvingAgainstBaseURL:",
	"-init",
	"-initWithString:",
	"-initWithURL:resolvingAgainstBaseURL:",
	"-string",
	"-setString:",
	"-URL",
	"-setURL:",
	"-URLRelativeToURL:",
	"-fragment",
	"-setFragment:",
	"-host",
	"-setHost:",
	"-password",
	"-setPassword:",
	"-path",
	"-setPath:",
	"-port",
	"-setPort:",
	"-query",
	"-setQuery:",
	"-queryItems",
	"-setQueryItems:",
	"-scheme",
	"-setScheme:",
	"-user",
	"-setUser:",
	"-percentEncodedFragment",
	"-setPercentEncodedFragment:",
	"-percentEncodedHost",
	"-setPercentEncodedHost:",
	"-percentEncodedPassword",
	"-setPercentEncodedPassword:",
	"-percentEncodedPath",
	"-setPercentEncodedPath:",
	"-percentEncodedQuery",
	"-setPercentEncodedQuery:",
	"-percentEncodedQueryItems",
	"-setPercentEncodedQueryItems:",
	"-percentEncodedUser",
	"-setPercentEncodedUser:",
	"-rangeOfFragment",
	"-rangeOfHost",
	"-rangeOfPassword",
	"-rangeOfPath",
	"-rangeOfPort",
	"-rangeOfQuery",
	"-rangeOfScheme",
	"-rangeOfUser"
    );
    NSURLConnection = (
	"+canHandleRequest:",
	"+connectionWithRequest:delegate:",
	"-start",
	"-cancel",
	"-scheduleInRunLoop:forMode:",
	"-unscheduleFromRunLoop:forMode:",
	"-initWithRequest:delegate:",
	"-initWithRequest:delegate:startImmediately:"
    );
    "NSURLConnection(NSURLConnectionSynchronousLoading)" = (
	"+sendSynchronousRequest:returningResponse:error:"
    );
    NSURLCredential = (
	"+credentialWithUser:password:persistence:",
	"-hasPassword",
	"-initWithUser:password:persistence:",
	"-isEqual:",
	"-password",
	"-persistence",
	"-user"
    );
    NSURLCredentialStorage = (
	"+sharedCredentialStorage",
	"-allCredentials",
	"-credentialsForProtectionSpace:",
	"-defaultCredentialForProtectionSpace:",
	"-removeCredential:forProtectionSpace:",
	"-setCredential:forProtectionSpace:",
	"-setDefaultCredential:forProtectionSpace:"
    );
    NSURLDownload = (
	"+canResumeDownloadDecodedWithEncodingMIMEType:",
	"-cancel",
	"-deletesFileUponFailure",
	"-initWithRequest:delegate:",
	"-initWithResumeData:delegate:path:",
	"-request",
	"-resumeData",
	"-setDeletesFileUponFailure:",
	"-setDestination:allowOverwrite:"
    );
    NSURLHandle = (
	"+cachedHandleForURL:",
	"+canInitWithURL:",
	"+registerURLHandleClass:",
	"+URLHandleClassForURL:",
	"-addClient:",
	"-availableResourceData",
	"-backgroundLoadDidFailWithReason:",
	"-beginLoadInBackground",
	"-cancelLoadInBackground",
	"-didLoadBytes:loadComplete:",
	"-endLoadInBackground",
	"-failureReason",
	"-flushCachedData",
	"-initWithURL:cached:",
	"-loadInBackground",
	"-loadInForeground",
	"-propertyForKey:",
	"-propertyForKeyIfAvailable:",
	"-removeClient:",
	"-resourceData",
	"-setDebug:",
	"-setReturnAll:",
	"-setURL:",
	"-status",
	"-writeData:",
	"-writeProperty:forKey:"
    );
    NSURLProtectionSpace = (
	"-authenticationMethod",
	"-host",
	"-initWithHost:port:protocol:realm:authenticationMethod:",
	"-initWithProxyHost:port:type:realm:authenticationMethod:",
	"-isProxy",
	"-port",
	"-protocol",
	"-proxyType",
	"-realm",
	"-receivesCredentialSecurely",
	"-distinguishedNames",
	"-distinguishedNames"
    );
    NSURLProtocol = (
	"+propertyForKey:inRequest:",
	"+registerClass:",
	"+setProperty:forKey:inRequest:",
	"+unregisterClass:",
	"-cachedResponse",
	"-client",
	"-initWithRequest:cachedResponse:client:",
	"-initWithTask:cachedResponse:client:",
	"-request",
	"-task"
    );
    "NSURLProtocol(Subclassing)" = (
	"+canInitWithRequest:",
	"+canInitWithTask:",
	"+canonicalRequestForRequest:",
	"+requestIsCacheEquivalent:toRequest:",
	"-startLoading",
	"-stopLoading"
    );
    NSURLQueryItem = (
	"+queryItemWithName:value:",
	"-initWithName:value:",
	"-name",
	"-value"
    );
    NSURLRequest = (
	"+requestWithURL:",
	"+requestWithURL:cachePolicy:timeoutInterval:",
	"-cachePolicy",
	"-initWithURL:",
	"-initWithURL:cachePolicy:timeoutInterval:",
	"-mainDocumentURL",
	"-timeoutInterval",
	"-URL"
    );
    "NSURLRequest(NSHTTPURLRequest)" = (
	"-allHTTPHeaderFields",
	"-HTTPBody",
	"-HTTPBodyStream",
	"-HTTPMethod",
	"-HTTPShouldHandleCookies",
	"-valueForHTTPHeaderField:",
	"-assumesHTTP3Capable"
    );
    NSURLResponse = (
	"-expectedContentLength",
	"-initWithURL:MIMEType:expectedContentLength:textEncodingName:",
	"-initWithURL:statusCode:HTTPVersion:headerFields:",
	"-MIMEType",
	"-suggestedFilename",
	"-textEncodingName",
	"-URL"
    );
    NSURLSessionConfiguration = (
	"-configureRequest:",
	"+defaultSessionConfiguration",
	"+ephemeralSessionConfiguration",
	"+backgroundSessionConfigurationWithIdentifier:",
	"-HTTPAdditionalHeaders",
	"-setHTTPAdditionalHeaders:",
	"-timeoutIntervalForRequest",
	"-setTimeoutIntervalForRequest:",
	"-timeoutIntervalForResource",
	"-setTimeoutIntervalForResource:",
	"-HTTPCookieAcceptPolicy",
	"-setHTTPCookieAcceptPolicy:",
	"-HTTPCookieStorage",
	"-setHTTPCookieStorage:",
	"-HTTPMaximumConnectionsPerHost",
	"-setHTTPMaximumConnectionsPerHost:",
	"-HTTPShouldSetCookies",
	"-setHTTPShouldSetCookies:",
	"-HTTPShouldUsePipelining",
	"-setHTTPShouldUsePipelining:",
	"-identifier",
	"-protocolClasses",
	"-requestCachePolicy",
	"-setRequestCachePolicy:",
	"-URLCache",
	"-setURLCache:",
	"-URLCredentialStorage",
	"-setURLCredentialStorage:",
	"-HTTPMaximumConnectionLifetime",
	"-setHTTPMaximumConnectionLifetime:"
    );
    NSURLSessionTask = (
	"-taskIdentifier",
	"-originalRequest",
	"-currentRequest",
	"-response",
	"-state",
	"-progress",
	"-error",
	"-delegate",
	"-setDelegate:",
	"-earliestBeginDate",
	"-setEarliestBeginDate:",
	"-countOfBytesClientExpectsToSend",
	"-countOfBytesClientExpectsToReceive",
	"-countOfBytesSent",
	"-countOfBytesReceived",
	"-countOfBytesExpectedToSend",
	"-countOfBytesExpectedToReceive",
	"-taskDescription",
	"-setTaskDescription:",
	"-cancel",
	"-suspend",
	"-resume",
	"-priority",
	"-setPriority:"
    );
    NSUUID = (
	"+UUID",
	"-initWithUUIDString:",
	"-initWithUUIDBytes:",
	"-UUIDString",
	"-getUUIDBytes:"
    );
    NSUbiquitousKeyValueStore = (
	"+defaultStore",
	"-arrayForKey:",
	"-boolForKey:",
	"-dataForKey:",
	"-dictionaryForKey:",
	"-doubleForKey:",
	"-longLongForKey:",
	"-objectForKey:",
	"-stringForKey:",
	"-setArray:forKey:",
	"-setBool:forKey:",
	"-setData:forKey:",
	"-setDictionary:forKey:",
	"-setDouble:forKey:",
	"-setLongLong:forKey:",
	"-setObject:forKey:",
	"-setString:forKey:",
	"-synchronize",
	"-removeObjectForKey:",
	"-dictionaryRepresentation"
    );
    NSUnarchiver = (
	"-initForReadingWithData:",
	"+unarchiveObjectWithData:",
	"+unarchiveObjectWithFile:",
	"-isAtEnd",
	"-objectZone",
	"-setObjectZone:",
	"-systemVersion",
	"+classNameDecodedForArchiveClassName:",
	"+decodeClassName:asClassName:",
	"-classNameDecodedForArchiveClassName:",
	"-decodeClassName:asClassName:",
	"-replaceObject:withObject:"
    );
    "NSUnarchiver(GNUstep)" = (
	"-cursor",
	"-resetUnarchiverWithData:atIndex:",
	"-directDataAccess",
	"-deserializeHeaderAt:version:classes:objects:pointers:"
    );
    NSUndoManager = (
	"-beginUndoGrouping",
	"-canRedo",
	"-canUndo",
	"-disableUndoRegistration",
	"-enableUndoRegistration",
	"-endUndoGrouping",
	"-forwardInvocation:",
	"-groupingLevel",
	"-groupsByEvent",
	"-isRedoing",
	"-isUndoing",
	"-isUndoRegistrationEnabled",
	"-levelsOfUndo",
	"-prepareWithInvocationTarget:",
	"-redo",
	"-redoActionName",
	"-redoMenuItemTitle",
	"-redoMenuTitleForUndoActionName:",
	"-registerUndoWithTarget:selector:object:",
	"-removeAllActions",
	"-removeAllActionsWithTarget:",
	"-runLoopModes",
	"-setActionName:",
	"-setGroupsByEvent:",
	"-setLevelsOfUndo:",
	"-setRunLoopModes:",
	"-undo",
	"-undoActionName",
	"-undoMenuItemTitle",
	"-undoMenuTitleForUndoActionName:",
	"-undoNestedGroup"
    );
    NSUnit = (
	"-init",
	"-initWithSymbol:",
	"-symbol"
    );
    NSUnitAcceleration = (
	"+metersPerSecondSquared",
	"+gravity"
    );
    NSUnitAngle = (
	"+degrees",
	"+arcMinutes",
	"+arcSeconds",
	"+radians",
	"+gradians",
	"+revolutions"
    );
    NSUnitArea = (
	"+squareMegameters",
	"+squareKilometers",
	"+squareMeters",
	"+squareCentimeters",
	"+squareMillimeters",
	"+squareMicrometers",
	"+squareNanometers",
	"+squareInches",
	"+squareFeet",
	"+squareYards",
	"+squareMiles",
	"+acres",
	"+ares",
	"+hectares"
    );
    NSUnitConcentrationMass = (
	"+gramsPerLiter",
	"+milligramsPerDeciliter",
	"+millimolesPerLiterWithGramsPerMole:"
    );
    NSUnitConverter = (
	"-baseUnitValueFromValue:",
	"-valueFromBaseUnitValue:"
    );
    NSUnitConverterLinear = (
	"-initWithCoefficient:",
	"-initWithCoefficient:constant:",
	"-coefficient",
	"-constant"
    );
    NSUnitDispersion = (
	"+partsPerMillion"
    );
    NSUnitDuration = (
	"+seconds",
	"+minutes",
	"+hours"
    );
    NSUnitElectricCharge = (
	"+coulombs",
	"+megaampereHours",
	"+kiloampereHours",
	"+ampereHours",
	"+milliampereHours",
	"+microampereHours"
    );
    NSUnitElectricCurrent = (
	"+megaamperes",
	"+kiloamperes",
	"+amperes",
	"+milliamperes",
	"+microamperes"
    );
    NSUnitElectricPotentialDifference = (
	"+megavolts",
	"+kilovolts",
	"+volts",
	"+millivolts",
	"+microvolts"
    );
    NSUnitElectricResistance = (
	"+megaohms",
	"+kiloohms",
	"+ohms",
	"+milliohms",
	"+microohms"
    );
    NSUnitEnergy = (
	"+kilojoules",
	"+joules",
	"+kilocalories",
	"+calories",
	"+kilowattHours"
    );
    NSUnitFrequency = (
	"+terahertz",
	"+gigahertz",
	"+megahertz",
	"+kilohertz",
	"+hertz",
	"+millihertz",
	"+microhertz",
	"+nanohertz"
    );
    NSUnitFuelEfficiency = (
	"+litersPer100Kilometers",
	"+milesPerImperialGallon",
	"+milesPerGallon"
    );
    NSUnitIlluminance = (
	"+lux"
    );
    NSUnitLength = (
	"+megameters",
	"+kilometers",
	"+hectometers",
	"+decameters",
	"+meters",
	"+decimeters",
	"+centimeters",
	"+millimeters",
	"+micrometers",
	"+nanometers",
	"+picometers",
	"+inches",
	"+feet",
	"+yards",
	"+miles",
	"+scandinavianMiles",
	"+lightyears",
	"+nauticalMiles",
	"+fathoms",
	"+furlongs",
	"+astronomicalUnits",
	"+parsecs"
    );
    NSUnitMass = (
	"+kilograms",
	"+grams",
	"+decigrams",
	"+centigrams",
	"+milligrams",
	"+micrograms",
	"+nanograms",
	"+picograms",
	"+ounces",
	"+pounds",
	"+stones",
	"+metricTons",
	"+shortTons",
	"+carats",
	"+ouncesTroy",
	"+slugs"
    );
    NSUnitPower = (
	"+terawatts",
	"+gigawatts",
	"+megawatts",
	"+kilowatts",
	"+watts",
	"+milliwatts",
	"+microwatts",
	"+nanowatts",
	"+picowatts",
	"+femtowatts",
	"+horsepower"
    );
    NSUnitPressure = (
	"+newtonsPerMetersSquared",
	"+gigapascals",
	"+megapascals",
	"+kilopascals",
	"+hectopascals",
	"+inchesOfMercury",
	"+bars",
	"+millibars",
	"+millimetersOfMercury",
	"+poundsForcePerSquareInch"
    );
    NSUnitSpeed = (
	"+metersPerSecond",
	"+kilometersPerHour",
	"+milesPerHour",
	"+knots"
    );
    NSUnitTemperature = (
	"+kelvin",
	"+celsius",
	"+fahrenheit"
    );
    NSUnitVolume = (
	"+megaliters",
	"+kiloliters",
	"+liters",
	"+deciliters",
	"+centiliters",
	"+milliliters",
	"+cubicKilometers",
	"+cubicMeters",
	"+cubicDecimeters",
	"+cubicCentimeters",
	"+cubicMillimeters",
	"+cubicInches",
	"+cubicFeet",
	"+cubicYards",
	"+cubicMiles",
	"+acreFeet",
	"+bushels",
	"+teaspoons",
	"+tablespoons",
	"+fluidOunces",
	"+cups",
	"+pints",
	"+quarts",
	"+gallons",
	"+imperialTeaspoons",
	"+imperialTablespoons",
	"+imperialFluidOunces",
	"+imperialPints",
	"+imperialQuarts",
	"+imperialGallons",
	"+metricCups"
    );
    NSUserDefaults = (
	"+standardUserDefaults",
	"+resetStandardUserDefaults",
	"+userLanguages",
	"+setUserLanguages:",
	"-addSuiteNamed:",
	"-arrayForKey:",
	"-boolForKey:",
	"-dataForKey:",
	"-dictionaryForKey:",
	"-doubleForKey:",
	"-floatForKey:",
	"-init",
	"-initWithUser:",
	"-integerForKey:",
	"-objectForKey:",
	"-removeObjectForKey:",
	"-removeSuiteNamed:",
	"-searchList",
	"-setBool:forKey:",
	"-setDouble:forKey:",
	"-setFloat:forKey:",
	"-setInteger:forKey:",
	"-setObject:forKey:",
	"-setSearchList:",
	"-stringArrayForKey:",
	"-stringForKey:",
	"-persistentDomainForName:",
	"-persistentDomainNames",
	"-removePersistentDomainForName:",
	"-setPersistentDomain:forName:",
	"-synchronize",
	"-removeVolatileDomainForName:",
	"-setVolatileDomain:forName:",
	"-volatileDomainForName:",
	"-volatileDomainNames",
	"-dictionaryRepresentation",
	"-registerDefaults:"
    );
    NSUserNotification = (
	"-title",
	"-setTitle:",
	"-subtitle",
	"-setSubtitle:",
	"-informativeText",
	"-setInformativeText:",
	"-actionButtonTitle",
	"-setActionButtonTitle:",
	"-userInfo",
	"-setUserInfo:",
	"-deliveryDate",
	"-setDeliveryDate:",
	"-deliveryTimeZone",
	"-setDeliveryTimeZone:",
	"-deliveryRepeatInterval",
	"-setDeliveryRepeatInterval:",
	"-actualDeliveryDate",
	"-isPresented",
	"-isRemote",
	"-soundName",
	"-setSoundName:",
	"-hasActionButton",
	"-setHasActionButton:",
	"-activationType",
	"-otherButtonTitle",
	"-setOtherButtonTitle:",
	"-identifier",
	"-setIdentifier:",
	"-contentImage",
	"-setContentImage:",
	"-hasReplyButton",
	"-setHasReplyButton:",
	"-responsePlaceholder",
	"-setResponsePlaceholder:",
	"-response"
    );
    NSUserNotificationCenter = (
	"+defaultUserNotificationCenter",
	"-delegate",
	"-setDelegate:",
	"-scheduledNotifications",
	"-setScheduledNotifications:",
	"-scheduleNotification:",
	"-removeScheduledNotification:",
	"-deliveredNotifications",
	"-deliverNotification:",
	"-removeDeliveredNotification:",
	"-removeAllDeliveredNotifications"
    );
    NSValue = (
	"+value:withObjCType:",
	"+valueWithNonretainedObject:",
	"+valueWithPoint:",
	"+valueWithPointer:",
	"+valueWithRange:",
	"+valueWithRect:",
	"+valueWithSize:",
	"+valueWithBytes:objCType:",
	"-initWithBytes:objCType:",
	"-isEqualToValue:",
	"-getValue:",
	"-objCType",
	"-nonretainedObjectValue",
	"-pointerValue",
	"-rangeValue",
	"-rectValue",
	"-sizeValue",
	"-pointValue"
    );
    "NSValue(Subclassing)" = (
	"+valueClassWithObjCType:"
    );
    NSValueTransformer = (
	"+allowsReverseTransformation",
	"+setValueTransformer:forName:",
	"+transformedValueClass",
	"+valueTransformerForName:",
	"+valueTransformerNames",
	"-reverseTransformedValue:",
	"-transformedValue:"
    );
    NSXMLDTD = (
	"-addChild:",
	"-attributeDeclarationForName:elementName:",
	"-elementDeclarationForName:",
	"-entityDeclarationForName:",
	"-initWithContentsOfURL:options:error:",
	"-initWithData:options:error:",
	"-insertChild:atIndex:",
	"-insertChildren:atIndex:",
	"-notationDeclarationForName:",
	"+predefinedEntityDeclarationForName:",
	"-publicID",
	"-removeChildAtIndex:",
	"-replaceChildAtIndex:withNode:",
	"-setChildren:",
	"-setPublicID:",
	"-setSystemID:",
	"-systemID"
    );
    NSXMLDTDNode = (
	"-DTDKind",
	"-initWithXMLString:",
	"-isExternal",
	"-notationName",
	"-publicID",
	"-setDTDKind:",
	"-setNotationName:",
	"-setPublicID:",
	"-setSystemID:",
	"-systemID"
    );
    NSXMLDocument = (
	"+replacementClassForClass:",
	"-characterEncoding",
	"-documentContentKind",
	"-DTD",
	"-initWithContentsOfURL:options:error:",
	"-initWithData:options:error:",
	"-initWithRootElement:",
	"-initWithXMLString:options:error:",
	"-isStandalone",
	"-MIMEType",
	"-rootElement",
	"-setCharacterEncoding:",
	"-setDocumentContentKind:",
	"-setDTD:",
	"-setMIMEType:",
	"-setRootElement:",
	"-setStandalone:",
	"-setVersion:",
	"-version",
	"-insertChild:atIndex:",
	"-insertChildren:atIndex:",
	"-removeChildAtIndex:",
	"-setChildren:",
	"-addChild:",
	"-replaceChildAtIndex:withNode:",
	"-XMLData",
	"-XMLDataWithOptions:",
	"-objectByApplyingXSLT:arguments:error:",
	"-objectByApplyingXSLTString:arguments:error:",
	"-objectByApplyingXSLTAtURL:arguments:error:",
	"-validateAndReturnError:"
    );
    NSXMLElement = (
	"-initWithName:",
	"-initWithName:URI:",
	"-initWithName:stringValue:",
	"-initWithXMLString:error:",
	"-elementsForName:",
	"-elementsForLocalName:URI:",
	"-addAttribute:",
	"-removeAttributeForName:",
	"-setAttributes:",
	"-setAttributesAsDictionary:",
	"-setAttributesWithDictionary:",
	"-attributes",
	"-attributeForName:",
	"-attributeForLocalName:URI:",
	"-addNamespace:",
	"-removeNamespaceForPrefix:",
	"-setNamespaces:",
	"-namespaces",
	"-namespaceForPrefix:",
	"-resolveNamespaceForName:",
	"-resolvePrefixForNamespaceURI:",
	"-insertChild:atIndex:",
	"-insertChildren:atIndex:",
	"-removeChildAtIndex:",
	"-setChildren:",
	"-addChild:",
	"-replaceChildAtIndex:withNode:",
	"-normalizeAdjacentTextNodesPreservingCDATA:"
    );
    NSXMLNode = (
	"+attributeWithName:stringValue:",
	"+attributeWithName:URI:stringValue:",
	"+commentWithStringValue:",
	"+document",
	"+documentWithRootElement:",
	"+DTDNodeWithXMLString:",
	"+elementWithName:",
	"+elementWithName:children:attributes:",
	"+elementWithName:URI:",
	"+elementWithName:stringValue:",
	"+localNameForName:",
	"+namespaceWithName:stringValue:",
	"+predefinedNamespaceForPrefix:",
	"+prefixForName:",
	"+processingInstructionWithName:stringValue:",
	"+textWithStringValue:",
	"-canonicalXMLStringPreservingComments:",
	"-childAtIndex:",
	"-childCount",
	"-children",
	"-detach",
	"-index",
	"-initWithKind:",
	"-initWithKind:options:",
	"-level",
	"-localName",
	"-kind",
	"-name",
	"-nextNode",
	"-nextSibling",
	"-nodesForXPath:error:",
	"-objectsForXQuery:error:",
	"-objectsForXQuery:constants:error:",
	"-objectValue",
	"-parent",
	"-prefix",
	"-previousNode",
	"-previousSibling",
	"-rootDocument",
	"-setName:",
	"-setObjectValue:",
	"-setStringValue:",
	"-setStringValue:resolvingEntities:",
	"-setURI:",
	"-stringValue",
	"-URI",
	"-XPath",
	"-XMLString",
	"-XMLStringWithOptions:"
    );
    NSXMLParser = (
	"-abortParsing",
	"-delegate",
	"-initWithContentsOfURL:",
	"-initWithData:",
	"-initWithStream:",
	"-parse",
	"-parserError",
	"-setDelegate:",
	"-setShouldProcessNamespaces:",
	"-setShouldReportNamespacePrefixes:",
	"-setShouldResolveExternalEntities:",
	"-shouldProcessNamespaces",
	"-shouldReportNamespacePrefixes",
	"-shouldResolveExternalEntities"
    );
    "NSXMLParser(NSXMLParserLocatorAdditions)" = (
	"-columnNumber",
	"-lineNumber",
	"-publicID",
	"-systemID"
    );
    NSXPCConnection = (
	"-initWithListenerEndpoint:",
	"-initWithMachServiceName:options:",
	"-initWithServiceName:",
	"-endpoint",
	"-setEndpoint:",
	"-exportedInterface",
	"-setExportInterface:",
	"-remoteObjectInterface",
	"-setRemoteObjectInterface:",
	"-remoteObjectProxy",
	"-setRemoteObjectProxy:",
	"-remoteObjectProxyWithErrorHandler:",
	"-serviceName",
	"-setServiceName:",
	"-synchronousRemoteObjectProxyWithErrorHandler:",
	"-interruptionHandler",
	"-setInterruptionHandler:",
	"-invalidationHandler",
	"-setInvalidationHandler:",
	"-resume",
	"-suspend",
	"-invalidate",
	"-auditSessionIdentifier",
	"-processIdentifier",
	"-effectiveUserIdentifier",
	"-effectiveGroupIdentifier"
    );
    NSXPCInterface = (
	"+interfaceWithProtocol:",
	"-protocol",
	"-setProtocol:",
	"-setClasses:forSelector:argumentIndex:ofReply:",
	"-classesForSelector:argumentIndex:ofReply:",
	"-setInterface:forSelector:argumentIndex:ofReply:",
	"-interfaceForSelector:argumentIndex:ofReply:"
    );
    NSXPCListener = (
	"+serviceListener",
	"+anonymousListener",
	"-initWithMachServiceName:",
	"-delegate",
	"-setDelegate:",
	"-endpoint",
	"-setEndpoint:",
	"-resume",
	"-suspend",
	"-invalidate"
    );
}