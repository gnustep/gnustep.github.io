{
    author = {
	"Generated by Gregory John Casamento,,," = (
	);
	"Jonathan Gapen" = (
	    "jagapen@whitewater.chem.wisc.edu"
	);
	"Richard Frith-MacDonald" = (
	);
	"Richard Frith-Macdonald" = (
	    "richard@brainstorm.co.uk",
	    "rfm@gnu.org"
	);
	"and various others..." = (
	);
    };
    class = {
	AGSHtml = AGSHtml;
	AGSIndex = AGSIndex;
	AGSOutput = AGSOutput;
	AGSParser = AGSParser;
	GDNCClient = gdnc;
	GDNCNotification = gdnc;
	GDNCObserver = gdnc;
	GDNCServer = gdnc;
	GSXMLParse = xmlparse;
	NSDistributedNotificationCenterGDNCDummy = gdnc;
    };
    classvars = {
	AGSHtml = {
	    base = AGSHtml;
	    category = AGSHtml;
	    chap = AGSHtml;
	    classname = AGSHtml;
	    fileName = AGSHtml;
	    globalRefs = AGSHtml;
	    heading = AGSHtml;
	    indent = AGSHtml;
	    isContentsDoc = AGSHtml;
	    ivarsAtEnd = AGSHtml;
	    localRefs = AGSHtml;
	    nextFile = AGSHtml;
	    prevFile = AGSHtml;
	    project = AGSHtml;
	    projectRefs = AGSHtml;
	    sect = AGSHtml;
	    ssect = AGSHtml;
	    sssect = AGSHtml;
	    unit = AGSHtml;
	    upFile = AGSHtml;
	    verbose = AGSHtml;
	    warn = AGSHtml;
	};
	AGSIndex = {
	    base = AGSIndex;
	    category = AGSIndex;
	    chap = AGSIndex;
	    classname = AGSIndex;
	    refs = AGSIndex;
	    sect = AGSIndex;
	    ssect = AGSIndex;
	    sssect = AGSIndex;
	    unit = AGSIndex;
	};
	AGSOutput = {
	    args = AGSOutput;
	    identStart = AGSOutput;
	    identifier = AGSOutput;
	    info = AGSOutput;
	    informalProtocols = AGSOutput;
	    spacenl = AGSOutput;
	    spaces = AGSOutput;
	    verbose = AGSOutput;
	    warn = AGSOutput;
	};
	AGSParser = {
	    buffer = AGSParser;
	    comment = AGSParser;
	    commentsRead = AGSParser;
	    debug = AGSParser;
	    declared = AGSParser;
	    documentAllInstanceVariables = AGSParser;
	    documentInstanceVariables = AGSParser;
	    fileName = AGSParser;
	    haveOutput = AGSParser;
	    haveSource = AGSParser;
	    identStart = AGSParser;
	    identifier = AGSParser;
	    ifStack = AGSParser;
	    inArgList = AGSParser;
	    inHeader = AGSParser;
	    inInstanceVariables = AGSParser;
	    inPreprocessorDirective = AGSParser;
	    inUnclosedExample = AGSParser;
	    info = AGSParser;
	    itemName = AGSParser;
	    length = AGSParser;
	    lines = AGSParser;
	    orderedSymbolDeclsByUnit = AGSParser;
	    pos = AGSParser;
	    source = AGSParser;
	    spacenl = AGSParser;
	    spaces = AGSParser;
	    standards = AGSParser;
	    unitName = AGSParser;
	    verbose = AGSParser;
	    warn = AGSParser;
	    wordMap = AGSParser;
	};
	GDNCClient = {
	    client = gdnc;
	    observers = gdnc;
	    suspended = gdnc;
	};
	GDNCNotification = {
	    info = gdnc;
	    name = gdnc;
	    object = gdnc;
	};
	GDNCObserver = {
	    behavior = gdnc;
	    client = gdnc;
	    notificationName = gdnc;
	    notificationObject = gdnc;
	    observer = gdnc;
	    queue = gdnc;
	    selector = gdnc;
	};
	GDNCServer = {
	    allObservers = gdnc;
	    conn = gdnc;
	    connections = gdnc;
	    observersForNames = gdnc;
	    observersForObjects = gdnc;
	};
    };
    function = {
	"convert_unicode" = sfparse;
	"convert_utf8" = sfparse;
	firstBadCharacter = plparse;
	"gdnc_log" = gdnc;
	ihandler = gdnc;
	input = defaults;
	output = defaults;
    };
    ivariable = {
	allObservers = {
	    GDNCServer = gdnc;
	};
	args = {
	    AGSOutput = AGSOutput;
	};
	base = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	behavior = {
	    GDNCObserver = gdnc;
	};
	buffer = {
	    AGSParser = AGSParser;
	};
	category = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	chap = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	classname = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	client = {
	    GDNCClient = gdnc;
	    GDNCObserver = gdnc;
	};
	comment = {
	    AGSParser = AGSParser;
	};
	commentsRead = {
	    AGSParser = AGSParser;
	};
	conn = {
	    GDNCServer = gdnc;
	};
	connections = {
	    GDNCServer = gdnc;
	};
	debug = {
	    AGSParser = AGSParser;
	};
	declared = {
	    AGSParser = AGSParser;
	};
	documentAllInstanceVariables = {
	    AGSParser = AGSParser;
	};
	documentInstanceVariables = {
	    AGSParser = AGSParser;
	};
	fileName = {
	    AGSHtml = AGSHtml;
	    AGSParser = AGSParser;
	};
	globalRefs = {
	    AGSHtml = AGSHtml;
	};
	haveOutput = {
	    AGSParser = AGSParser;
	};
	haveSource = {
	    AGSParser = AGSParser;
	};
	heading = {
	    AGSHtml = AGSHtml;
	};
	identStart = {
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	};
	identifier = {
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	};
	ifStack = {
	    AGSParser = AGSParser;
	};
	inArgList = {
	    AGSParser = AGSParser;
	};
	inHeader = {
	    AGSParser = AGSParser;
	};
	inInstanceVariables = {
	    AGSParser = AGSParser;
	};
	inPreprocessorDirective = {
	    AGSParser = AGSParser;
	};
	inUnclosedExample = {
	    AGSParser = AGSParser;
	};
	indent = {
	    AGSHtml = AGSHtml;
	};
	info = {
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	    GDNCNotification = gdnc;
	};
	informalProtocols = {
	    AGSOutput = AGSOutput;
	};
	isContentsDoc = {
	    AGSHtml = AGSHtml;
	};
	itemName = {
	    AGSParser = AGSParser;
	};
	ivarsAtEnd = {
	    AGSHtml = AGSHtml;
	};
	length = {
	    AGSParser = AGSParser;
	};
	lines = {
	    AGSParser = AGSParser;
	};
	localRefs = {
	    AGSHtml = AGSHtml;
	};
	name = {
	    GDNCNotification = gdnc;
	};
	nextFile = {
	    AGSHtml = AGSHtml;
	};
	notificationName = {
	    GDNCObserver = gdnc;
	};
	notificationObject = {
	    GDNCObserver = gdnc;
	};
	object = {
	    GDNCNotification = gdnc;
	};
	observer = {
	    GDNCObserver = gdnc;
	};
	observers = {
	    GDNCClient = gdnc;
	};
	observersForNames = {
	    GDNCServer = gdnc;
	};
	observersForObjects = {
	    GDNCServer = gdnc;
	};
	orderedSymbolDeclsByUnit = {
	    AGSParser = AGSParser;
	};
	pos = {
	    AGSParser = AGSParser;
	};
	prevFile = {
	    AGSHtml = AGSHtml;
	};
	project = {
	    AGSHtml = AGSHtml;
	};
	projectRefs = {
	    AGSHtml = AGSHtml;
	};
	queue = {
	    GDNCObserver = gdnc;
	};
	refs = {
	    AGSIndex = AGSIndex;
	};
	sect = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	selector = {
	    GDNCObserver = gdnc;
	};
	source = {
	    AGSParser = AGSParser;
	};
	spacenl = {
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	};
	spaces = {
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	};
	ssect = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	sssect = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	standards = {
	    AGSParser = AGSParser;
	};
	suspended = {
	    GDNCClient = gdnc;
	};
	unit = {
	    AGSHtml = AGSHtml;
	    AGSIndex = AGSIndex;
	};
	unitName = {
	    AGSParser = AGSParser;
	};
	upFile = {
	    AGSHtml = AGSHtml;
	};
	verbose = {
	    AGSHtml = AGSHtml;
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	};
	warn = {
	    AGSHtml = AGSHtml;
	    AGSOutput = AGSOutput;
	    AGSParser = AGSParser;
	};
	wordMap = {
	    AGSParser = AGSParser;
	};
    };
    label = {
	abstract = gsdoc;
	arg = gsdoc;
	author = gsdoc;
	blockElements = gsdoc;
	body = gsdoc;
	br = gsdoc;
	category = gsdoc;
	cdata = gsdoc;
	chapter = gsdoc;
	class = gsdoc;
	code = gsdoc;
	conform = gsdoc;
	constant = gsdoc;
	copy = gsdoc;
	crossrefElements = gsdoc;
	date = gsdoc;
	declared = gsdoc;
	definitionElements = gsdoc;
	deflist = gsdoc;
	desc = gsdoc;
	dictionary = gsdoc;
	em = gsdoc;
	email = gsdoc;
	embed = gsdoc;
	entry = gsdoc;
	enum = gsdoc;
	example = gsdoc;
	file = gsdoc;
	footnote = gsdoc;
	function = gsdoc;
	gsdoc = gsdoc;
	head = gsdoc;
	heading = gsdoc;
	index = gsdoc;
	ivar = gsdoc;
	ivariable = gsdoc;
	label = gsdoc;
	list = gsdoc;
	listElements = gsdoc;
	macro = gsdoc;
	method = gsdoc;
	p = gsdoc;
	prjref = gsdoc;
	protocol = gsdoc;
	qalist = gsdoc;
	ref = gsdoc;
	section = gsdoc;
	sectioningElements = gsdoc;
	sel = gsdoc;
	site = gsdoc;
	strong = gsdoc;
	subsection = gsdoc;
	subsubsection = gsdoc;
	textElements = gsdoc;
	title = gsdoc;
	type = gsdoc;
	uref = gsdoc;
	url = gsdoc;
	var = gsdoc;
	vararg = gsdoc;
	variable = gsdoc;
	version = gsdoc;
    };
    macro = {
	char2num = cvtenc;
	inrange = cvtenc;
    };
    method = {
	"+loadEntity:at:" = {
	    GSXMLParse = xmlparse;
	};
	"+notificationWithName:object:data:" = {
	    GDNCNotification = gdnc;
	};
	"-addInformalProtocols:" = {
	    AGSIndex = AGSIndex;
	};
	"-addObserver:selector:name:object:suspensionBehavior:for:" = {
	    GDNCServer = gdnc;
	};
	"-authors" = {
	    AGSIndex = AGSIndex;
	};
	"-checkComment:unit:info:" = {
	    AGSOutput = AGSOutput;
	};
	"-connection:shouldMakeNewConnection:" = {
	    GDNCServer = gdnc;
	};
	"-connectionBecameInvalid:" = {
	    GDNCServer = gdnc;
	};
	"-debug" = {
	    AGSParser = AGSParser;
	};
	"-decIndent" = {
	    AGSHtml = AGSHtml;
	};
	"-find:" = {
	    AGSIndex = AGSIndex;
	};
	"-fitWords:from:to:maxSize:output:" = {
	    AGSOutput = AGSOutput;
	};
	"-globalRef:type:" = {
	    AGSIndex = AGSIndex;
	};
	"-incIndent" = {
	    AGSHtml = AGSHtml;
	};
	"-info" = {
	    AGSParser = AGSParser;
	};
	"-informalProtocols" = {
	    AGSOutput = AGSOutput;
	};
	"-init" = {
	    AGSParser = AGSParser;
	};
	"-makeAnchor:ofType:name:" = {
	    AGSHtml = AGSHtml;
	};
	"-makeLink:ofType:inUnit:isRef:" = {
	    AGSHtml = AGSHtml;
	};
	"-makeLink:ofType:isRef:" = {
	    AGSHtml = AGSHtml;
	};
	"-makeRefs:" = {
	    AGSIndex = AGSIndex;
	};
	"-mergeRefs:override:" = {
	    AGSIndex = AGSIndex;
	};
	"-methodsInUnit:" = {
	    AGSIndex = AGSIndex;
	};
	"-orderedSymbolDeclarationsByUnit" = {
	    AGSParser = AGSParser;
	};
	"-output:" = {
	    AGSOutput = AGSOutput;
	};
	"-outputBlock:to:inPara:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputDecl:kind:to:" = {
	    AGSOutput = AGSOutput;
	};
	"-outputDocument:name:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputFunction:to:" = {
	    AGSOutput = AGSOutput;
	};
	"-outputIndex:scope:title:style:target:to:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputInstanceVariable:to:for:" = {
	    AGSOutput = AGSOutput;
	};
	"-outputList:to:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputMacro:to:" = {
	    AGSOutput = AGSOutput;
	};
	"-outputMethod:to:for:" = {
	    AGSOutput = AGSOutput;
	};
	"-outputNode:to:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputNodeList:to:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputText:to:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputUnit:to:" = {
	    AGSHtml = AGSHtml;
	    AGSOutput = AGSOutput;
	};
	"-outputVersion:to:" = {
	    AGSHtml = AGSHtml;
	};
	"-outputs" = {
	    AGSParser = AGSParser;
	};
	"-outputsForHeader:" = {
	    AGSIndex = AGSIndex;
	};
	"-parseComment" = {
	    AGSParser = AGSParser;
	};
	"-parseDeclarations" = {
	    AGSParser = AGSParser;
	};
	"-parseFile:isSource:" = {
	    AGSParser = AGSParser;
	};
	"-parseIdentifier" = {
	    AGSParser = AGSParser;
	};
	"-parseImplementation" = {
	    AGSParser = AGSParser;
	};
	"-parseInstanceVariables" = {
	    AGSParser = AGSParser;
	};
	"-parseInterface" = {
	    AGSParser = AGSParser;
	};
	"-parseMacro" = {
	    AGSParser = AGSParser;
	};
	"-parseMethodIsDeclaration:" = {
	    AGSParser = AGSParser;
	};
	"-parseMethodType" = {
	    AGSParser = AGSParser;
	};
	"-parseMethodsAreDeclarations:" = {
	    AGSParser = AGSParser;
	};
	"-parsePreprocessor" = {
	    AGSParser = AGSParser;
	};
	"-parseProtocol" = {
	    AGSParser = AGSParser;
	};
	"-parseProtocolList" = {
	    AGSParser = AGSParser;
	};
	"-parseSpace" = {
	    AGSParser = AGSParser;
	};
	"-parseSpace:" = {
	    AGSParser = AGSParser;
	};
	"-parseVersion" = {
	    AGSParser = AGSParser;
	};
	"-postNotificationName:object:userInfo:deliverImmediately:for:" = {
	    GDNCServer = gdnc;
	};
	"-postNotificationName:object:userInfo:selector:to:" = {
	    NSDistributedNotificationCenterGDNCDummy = gdnc;
	};
	"-protocolRef:" = {
	    AGSHtml = AGSHtml;
	};
	"-reformat:withIndent:to:" = {
	    AGSOutput = AGSOutput;
	};
	"-refs" = {
	    AGSIndex = AGSIndex;
	};
	"-removeObserver:" = {
	    GDNCServer = gdnc;
	};
	"-removeObserver:name:object:for:" = {
	    GDNCServer = gdnc;
	};
	"-removeObserversForClients:" = {
	    GDNCServer = gdnc;
	};
	"-reset" = {
	    AGSParser = AGSParser;
	};
	"-setDebug:" = {
	    AGSParser = AGSParser;
	};
	"-setDeclared:" = {
	    AGSParser = AGSParser;
	};
	"-setDirectory:" = {
	    AGSIndex = AGSIndex;
	};
	"-setDocumentAllInstanceVariables:" = {
	    AGSParser = AGSParser;
	};
	"-setDocumentInstanceVariables:" = {
	    AGSParser = AGSParser;
	};
	"-setEmail:forAuthor:" = {
	    AGSIndex = AGSIndex;
	};
	"-setGenerateStandards:" = {
	    AGSParser = AGSParser;
	};
	"-setGlobalRef:type:" = {
	    AGSIndex = AGSIndex;
	};
	"-setGlobalRefs:" = {
	    AGSHtml = AGSHtml;
	};
	"-setInstanceVariablesAtEnd:" = {
	    AGSHtml = AGSHtml;
	};
	"-setLocalRefs:" = {
	    AGSHtml = AGSHtml;
	};
	"-setOutputs:forHeader:" = {
	    AGSIndex = AGSIndex;
	};
	"-setProjectRefs:" = {
	    AGSHtml = AGSHtml;
	};
	"-setRelationship:from:to:" = {
	    AGSIndex = AGSIndex;
	};
	"-setSources:forHeader:" = {
	    AGSIndex = AGSIndex;
	};
	"-setStandards:" = {
	    AGSParser = AGSParser;
	};
	"-setSuspended:for:" = {
	    GDNCServer = gdnc;
	};
	"-setUnitRef:type:" = {
	    AGSIndex = AGSIndex;
	};
	"-setWordMap:" = {
	    AGSParser = AGSParser;
	};
	"-setupBuffer" = {
	    AGSParser = AGSParser;
	};
	"-skipArray" = {
	    AGSParser = AGSParser;
	};
	"-skipBlock" = {
	    AGSParser = AGSParser;
	};
	"-skipBlock:" = {
	    AGSParser = AGSParser;
	};
	"-skipGeneric" = {
	    AGSParser = AGSParser;
	};
	"-skipLiteral" = {
	    AGSParser = AGSParser;
	};
	"-skipRemainderOfLine" = {
	    AGSParser = AGSParser;
	};
	"-skipSpaces" = {
	    AGSParser = AGSParser;
	};
	"-skipStatement" = {
	    AGSParser = AGSParser;
	};
	"-skipStatementLine" = {
	    AGSParser = AGSParser;
	};
	"-skipToEndOfLine" = {
	    AGSParser = AGSParser;
	};
	"-skipUnit" = {
	    AGSParser = AGSParser;
	};
	"-sources" = {
	    AGSParser = AGSParser;
	};
	"-sourcesForHeader:" = {
	    AGSIndex = AGSIndex;
	};
	"-split:" = {
	    AGSOutput = AGSOutput;
	};
	"-typeRef:" = {
	    AGSHtml = AGSHtml;
	};
	"-unitRef:type:" = {
	    AGSIndex = AGSIndex;
	};
	"-unitRef:type:unit:" = {
	    AGSIndex = AGSIndex;
	};
	"-where" = {
	    AGSParser = AGSParser;
	};
    };
    output = {
	"../Tools/AGSHtml.h" = (
	    "../Documentation/BaseTools/AGSHtml.gsdoc"
	);
	"../Tools/AGSIndex.h" = (
	    "../Documentation/BaseTools/AGSIndex.gsdoc"
	);
	"../Tools/AGSOutput.h" = (
	    "../Documentation/BaseTools/AGSOutput.gsdoc"
	);
	"../Tools/AGSParser.h" = (
	    "../Documentation/BaseTools/AGSParser.gsdoc"
	);
	"autogsdoc.m" = (
	    "../Documentation/BaseTools/autogsdoc.gsdoc"
	);
	"cvtenc.m" = (
	    "../Documentation/BaseTools/cvtenc.gsdoc"
	);
	"defaults.m" = (
	    "../Documentation/BaseTools/defaults.gsdoc"
	);
	"gdnc.m" = (
	    "../Documentation/BaseTools/gdnc.gsdoc"
	);
	"gdomap.c" = (
	    "../Documentation/BaseTools/gdomap.gsdoc"
	);
	"gspath.m" = (
	    "../Documentation/BaseTools/gspath.gsdoc"
	);
	"pl2link.m" = (
	    "../Documentation/BaseTools/pl2link.gsdoc"
	);
	"pldes.m" = (
	    "../Documentation/BaseTools/pldes.gsdoc"
	);
	"plmerge.m" = (
	    "../Documentation/BaseTools/plmerge.gsdoc"
	);
	"plparse.m" = (
	    "../Documentation/BaseTools/plparse.gsdoc"
	);
	"plser.m" = (
	    "../Documentation/BaseTools/plser.gsdoc"
	);
	"sfparse.m" = (
	    "../Documentation/BaseTools/sfparse.gsdoc"
	);
	"xmlparse.m" = (
	    "../Documentation/BaseTools/xmlparse.gsdoc"
	);
    };
    source = {
	"../Tools/AGSHtml.h" = (
	    "../Tools/AGSHtml.m"
	);
	"../Tools/AGSIndex.h" = (
	    "../Tools/AGSIndex.m"
	);
	"../Tools/AGSOutput.h" = (
	    "../Tools/AGSOutput.m"
	);
	"../Tools/AGSParser.h" = (
	    "../Tools/AGSParser.m"
	);
	"autogsdoc.m" = (
	    "autogsdoc.m"
	);
	"cvtenc.m" = (
	    "cvtenc.m"
	);
	"defaults.m" = (
	    "defaults.m"
	);
	"gdnc.m" = (
	    "gdnc.m"
	);
	"gdomap.c" = (
	    "gdomap.c"
	);
	"gspath.m" = (
	    "gspath.m"
	);
	"pl2link.m" = (
	    "pl2link.m"
	);
	"pldes.m" = (
	    "pldes.m"
	);
	"plmerge.m" = (
	    "plmerge.m"
	);
	"plparse.m" = (
	    "plparse.m"
	);
	"plser.m" = (
	    "plser.m"
	);
	"sfparse.m" = (
	    "sfparse.m"
	);
	"xmlparse.m" = (
	    "xmlparse.m"
	);
    };
    super = {
	AGSHtml = NSObject;
	AGSIndex = NSObject;
	AGSOutput = NSObject;
	AGSParser = NSObject;
	GDNCClient = NSObject;
	GDNCNotification = NSObject;
	GDNCObserver = NSObject;
	GDNCServer = NSObject;
	GSXMLParse = GSXMLParser;
	NSDistributedNotificationCenterGDNCDummy = NSObject;
    };
    title = {
	AGSHtml = "AGSHtml... a class to output html for a gsdoc file";
	AGSIndex = "AGSIndex... a class to create references for a gsdoc
      file";
	AGSOutput = "AGSOutput... a class to output gsdoc source";
	AGSParser = "AGSParser...a class to get documention info from ObjC
      source";
	BaseTools = "Base Tools";
	autogsdoc = "Autogsdoc... a tool to make documentation from source
      code";
	cvtenc = "cvtenc documentation";
	defaults = "defaults documentation";
	gdnc = "gdnc documentation";
	gdomap = "gdomap documentation";
	gsdoc = "GNUstep Documentation XML markup language (GSDoc)";
	gspath = "gspath documentation";
	pl2link = "pl2link documentation";
	pldes = "pldes documentation";
	plmerge = "plmerge documentation";
	plparse = "plparse documentation";
	plser = "plser documentation";
	sfparse = "sfparse documentation";
	xmlparse = "xmlparse... a tool to parse xml documents";
    };
    tool = {
	autogsdoc = autogsdoc;
	cvtenc = cvtenc;
	defaults = defaults;
	gdnc = gdnc;
	gdomap = gdomap;
	gspath = gspath;
	pl2link = pl2link;
	pldes = pldes;
	plmerge = plmerge;
	plparse = plparse;
	plser = plser;
	sfparse = sfparse;
	xmlparse = xmlparse;
    };
    unitmethods = {
	AGSHtml = {
	    "-decIndent" = AGSHtml;
	    "-incIndent" = AGSHtml;
	    "-makeAnchor:ofType:name:" = AGSHtml;
	    "-makeLink:ofType:inUnit:isRef:" = AGSHtml;
	    "-makeLink:ofType:isRef:" = AGSHtml;
	    "-outputBlock:to:inPara:" = AGSHtml;
	    "-outputDocument:name:" = AGSHtml;
	    "-outputIndex:scope:title:style:target:to:" = AGSHtml;
	    "-outputList:to:" = AGSHtml;
	    "-outputNode:to:" = AGSHtml;
	    "-outputNodeList:to:" = AGSHtml;
	    "-outputText:to:" = AGSHtml;
	    "-outputUnit:to:" = AGSHtml;
	    "-outputVersion:to:" = AGSHtml;
	    "-protocolRef:" = AGSHtml;
	    "-setGlobalRefs:" = AGSHtml;
	    "-setInstanceVariablesAtEnd:" = AGSHtml;
	    "-setLocalRefs:" = AGSHtml;
	    "-setProjectRefs:" = AGSHtml;
	    "-typeRef:" = AGSHtml;
	};
	AGSIndex = {
	    "-addInformalProtocols:" = AGSIndex;
	    "-authors" = AGSIndex;
	    "-find:" = AGSIndex;
	    "-globalRef:type:" = AGSIndex;
	    "-makeRefs:" = AGSIndex;
	    "-mergeRefs:override:" = AGSIndex;
	    "-methodsInUnit:" = AGSIndex;
	    "-outputsForHeader:" = AGSIndex;
	    "-refs" = AGSIndex;
	    "-setDirectory:" = AGSIndex;
	    "-setEmail:forAuthor:" = AGSIndex;
	    "-setGlobalRef:type:" = AGSIndex;
	    "-setOutputs:forHeader:" = AGSIndex;
	    "-setRelationship:from:to:" = AGSIndex;
	    "-setSources:forHeader:" = AGSIndex;
	    "-setUnitRef:type:" = AGSIndex;
	    "-sourcesForHeader:" = AGSIndex;
	    "-unitRef:type:" = AGSIndex;
	    "-unitRef:type:unit:" = AGSIndex;
	};
	AGSOutput = {
	    "-checkComment:unit:info:" = AGSOutput;
	    "-fitWords:from:to:maxSize:output:" = AGSOutput;
	    "-informalProtocols" = AGSOutput;
	    "-output:" = AGSOutput;
	    "-outputDecl:kind:to:" = AGSOutput;
	    "-outputFunction:to:" = AGSOutput;
	    "-outputInstanceVariable:to:for:" = AGSOutput;
	    "-outputMacro:to:" = AGSOutput;
	    "-outputMethod:to:for:" = AGSOutput;
	    "-outputUnit:to:" = AGSOutput;
	    "-reformat:withIndent:to:" = AGSOutput;
	    "-split:" = AGSOutput;
	};
	AGSParser = {
	    "-debug" = AGSParser;
	    "-info" = AGSParser;
	    "-init" = AGSParser;
	    "-orderedSymbolDeclarationsByUnit" = AGSParser;
	    "-outputs" = AGSParser;
	    "-parseComment" = AGSParser;
	    "-parseDeclarations" = AGSParser;
	    "-parseFile:isSource:" = AGSParser;
	    "-parseIdentifier" = AGSParser;
	    "-parseImplementation" = AGSParser;
	    "-parseInstanceVariables" = AGSParser;
	    "-parseInterface" = AGSParser;
	    "-parseMacro" = AGSParser;
	    "-parseMethodIsDeclaration:" = AGSParser;
	    "-parseMethodType" = AGSParser;
	    "-parseMethodsAreDeclarations:" = AGSParser;
	    "-parsePreprocessor" = AGSParser;
	    "-parseProtocol" = AGSParser;
	    "-parseProtocolList" = AGSParser;
	    "-parseSpace" = AGSParser;
	    "-parseSpace:" = AGSParser;
	    "-parseVersion" = AGSParser;
	    "-reset" = AGSParser;
	    "-setDebug:" = AGSParser;
	    "-setDeclared:" = AGSParser;
	    "-setDocumentAllInstanceVariables:" = AGSParser;
	    "-setDocumentInstanceVariables:" = AGSParser;
	    "-setGenerateStandards:" = AGSParser;
	    "-setStandards:" = AGSParser;
	    "-setWordMap:" = AGSParser;
	    "-setupBuffer" = AGSParser;
	    "-skipArray" = AGSParser;
	    "-skipBlock" = AGSParser;
	    "-skipBlock:" = AGSParser;
	    "-skipGeneric" = AGSParser;
	    "-skipLiteral" = AGSParser;
	    "-skipRemainderOfLine" = AGSParser;
	    "-skipSpaces" = AGSParser;
	    "-skipStatement" = AGSParser;
	    "-skipStatementLine" = AGSParser;
	    "-skipToEndOfLine" = AGSParser;
	    "-skipUnit" = AGSParser;
	    "-sources" = AGSParser;
	    "-where" = AGSParser;
	};
	GDNCNotification = {
	    "+notificationWithName:object:data:" = gdnc;
	};
	GDNCServer = {
	    "-addObserver:selector:name:object:suspensionBehavior:for:" = gdnc;
	    "-connection:shouldMakeNewConnection:" = gdnc;
	    "-connectionBecameInvalid:" = gdnc;
	    "-postNotificationName:object:userInfo:deliverImmediately:for:" = gdnc;
	    "-removeObserver:" = gdnc;
	    "-removeObserver:name:object:for:" = gdnc;
	    "-removeObserversForClients:" = gdnc;
	    "-setSuspended:for:" = gdnc;
	};
	GSXMLParse = {
	    "+loadEntity:at:" = xmlparse;
	};
	NSDistributedNotificationCenterGDNCDummy = {
	    "-postNotificationName:object:userInfo:selector:to:" = gdnc;
	};
    };
    variable = {
	"auto_stop" = gdnc;
	debugging = gdnc;
	"is_daemon" = gdnc;
	"log_priority" = gdnc;
	timer = gdnc;
    };
}