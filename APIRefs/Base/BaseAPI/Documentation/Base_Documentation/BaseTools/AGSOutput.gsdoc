<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="AGSOutput" up="BaseTools">
  <head>
    <title>AGSOutput... a class to output gsdoc source</title>
    <author name="Richard Frith-Macdonald">
      <email address="richard@brainstorm.co.uk">
        richard@brainstorm.co.uk
      </email>
    </author>
    <date>Generated at 2024-11-07 16:52:14 -0500</date>
    <copy>2001 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>The AGSOutput class</heading>
      <p>
        This is a really great class... but it's not really
        reusable since it's far too special purpose.
      </p>
      <class name="AGSOutput" super="NSObject" ovadd="1.0.0">
        <declared>AGSOutput.h</declared>
        <desc>
          And finally, here is the actual class description...
          outside the chapter. This is the class description
          for <code>AGSOutput</code>, including some sample uses of
          GSDoc, such as cross-references (see
          <ref type="class" id="NSString">NSString</ref>
            ). Functions, (recognised as an identifier immediately
            followed by open and closing brackets), are
            automatically referenced (if they are found).
        </desc>
        <ivariable type="NSArray*" name="args" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="NSCharacterSet*" name="identStart" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="NSCharacterSet*" name="identifier" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="NSDictionary*" name="info" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="NSMutableArray*" name="informalProtocols" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="NSCharacterSet*" name="spacenl" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="NSCharacterSet*" name="spaces" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="verbose" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="warn" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <method type="NSString*" ovadd="1.0.0">
          <sel>checkComment:</sel>
          <arg type="NSString*">comment</arg>
          <sel>unit:</sel>
          <arg type="NSString*">unit</arg>
          <sel>info:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="unsigned" ovadd="1.0.0">
          <sel>fitWords:</sel>
          <arg type="NSArray*">a</arg>
          <sel>from:</sel>
          <arg type="unsigned">start</arg>
          <sel>to:</sel>
          <arg type="unsigned">end</arg>
          <sel>maxSize:</sel>
          <arg type="unsigned">limit</arg>
          <sel>output:</sel>
          <arg type="NSMutableString*">buf</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>informalProtocols</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>output:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <desc>
            Return an array containing the names of any files
            modified as a result of outputing the specified
            data structure.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>outputDecl:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <sel>kind:</sel>
          <arg type="NSString*">kind</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">str</arg>
          <desc>
            Uses <ref type="method" id="-split:">-split:</ref> and
            <ref type="method" id="-reformat:withIndent:to:">
              -reformat:withIndent:to:
            </ref>
            .
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>outputFunction:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">str</arg>
          <desc>
            Uses <ref type="method" id="-split:">-split:</ref> and
            <ref type="method" id="-reformat:withIndent:to:">
              -reformat:withIndent:to:
            </ref>
            . <br /> Place the names of function arguments in a
            temporary array 'args' so that they will be
            highlighted if they appear in the function
            description.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>outputInstanceVariable:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">str</arg>
          <sel>for:</sel>
          <arg type="NSString*">unit</arg>
          <desc>
            Output the gsdoc code for an instance variable.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>outputMacro:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">str</arg>
          <desc>
            Uses <ref type="method" id="-split:">-split:</ref> and
            <ref type="method" id="-reformat:withIndent:to:">
              -reformat:withIndent:to:
            </ref>
            .
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>outputMethod:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">str</arg>
          <sel>for:</sel>
          <arg type="NSString*">unit</arg>
          <desc>
            Uses <ref type="method" id="-split:">-split:</ref> and
            <ref type="method" id="-reformat:withIndent:to:">
              -reformat:withIndent:to:
            </ref>
            . Also has fun with <code>YES</code>, <code>NO</code>,
            and <code>nil</code>. <br /> Check special markup which
            should be removed from the text actually placed in
            the gsdoc method documentation... the special markup is
            included in the gsdoc markup differently.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>outputUnit:</sel>
          <arg type="NSMutableDictionary*">d</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">str</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="unsigned" ovadd="1.0.0">
          <sel>reformat:</sel>
          <arg type="NSString*">str</arg>
          <sel>withIndent:</sel>
          <arg type="unsigned">ind</arg>
          <sel>to:</sel>
          <arg type="NSMutableString*">buf</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>split:</sel>
          <arg type="NSString*">str</arg>
          <desc>
            Split comment text into an array of words (to be
            reformatted) and insert markup for cross
            referencing and highlighting. <br /> Phase 1...
            we take the supplied string and check for white space.
            Any white space sequence is deleted and treated as a
            word separator except within xml element markup. The
            format of element start and end marks is tidied for
            consistency. The resulting data is made into
            an array of strings, each containing either an element
            start or end tag, or one of the whitespace separated
            words. What about str?
          </desc>
        </method>
      </class>
      <p>
        Here is the afterword for the class.
      </p>
      <p>
        And here is some automated cross referencing... A method in
        a protocol:
        <ref type="method" id="-copyWithZone:" class="(NSCopying)">
          &lt;NSCopying&gt;-copyWithZone:
        </ref>
        , a class:
        <ref type="class" id="NSString">NSString</ref>
          , a protocol:
          <ref type="protocol" id="(NSCopying)">&lt;NSCopying&gt;</ref>, and a category: <ref type="category" id="NSRunLoop(GNUstepExtensions)">NSRunLoop(GNUstepExtensions)</ref>.</p></chapter>
  </body>
</gsdoc>
