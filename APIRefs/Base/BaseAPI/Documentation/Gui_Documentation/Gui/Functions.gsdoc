<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="Functions" stylesheeturl="Functions.template"" up="Gui">
  <head>
    <title>Functions</title>
    <author name="Generated by Gregory John Casamento,,,"></author>
  </head>
  <body>
    <front><contents /></front>
  <!--StartFunctions-->
<!--StartDPSOperatorsFunctions-->
    <chapter>
      <heading>DPSOperators functions</heading>
      <p></p>
      <function type="void" name="DPSPrintf" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">fmt</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSWriteData" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">buf</arg>
        <arg type="unsigned int">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSarc" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">r</arg>
        <arg type="CGFloat">angle1</arg>
        <arg type="CGFloat">angle2</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSarcn" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">r</arg>
        <arg type="CGFloat">angle1</arg>
        <arg type="CGFloat">angle2</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSarct" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x1</arg>
        <arg type="CGFloat">y1</arg>
        <arg type="CGFloat">x2</arg>
        <arg type="CGFloat">y2</arg>
        <arg type="CGFloat">r</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSashow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSawidthshow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">cx</arg>
        <arg type="CGFloat">cy</arg>
        <arg type="int">c</arg>
        <arg type="CGFloat">ax</arg>
        <arg type="CGFloat">ay</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScharpath" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">s</arg>
        <arg type="int">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSclip" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSclosepath" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScomposite" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <arg type="NSInteger">gstateNum</arg>
        <arg type="CGFloat">dx</arg>
        <arg type="CGFloat">dy</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScompositerect" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSconcat" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const CGFloat*">m</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentalpha" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">a</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentcmykcolor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">c</arg>
        <arg type="CGFloat*">m</arg>
        <arg type="CGFloat*">y</arg>
        <arg type="CGFloat*">k</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentflat" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">flatness</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentgray" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">gray</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrenthsbcolor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">h</arg>
        <arg type="CGFloat*">s</arg>
        <arg type="CGFloat*">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentlinecap" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int*">linecap</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentlinejoin" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int*">linejoin</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentlinewidth" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">width</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentmiterlimit" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">limit</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentoffset" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int*">x</arg>
        <arg type="int*">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentpoint" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">x</arg>
        <arg type="CGFloat*">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentrgbcolor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">r</arg>
        <arg type="CGFloat*">g</arg>
        <arg type="CGFloat*">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurrentstrokeadjust" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int*">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPScurveto" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x1</arg>
        <arg type="CGFloat">y1</arg>
        <arg type="CGFloat">x2</arg>
        <arg type="CGFloat">y2</arg>
        <arg type="CGFloat">x3</arg>
        <arg type="CGFloat">y3</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSdissolve" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <arg type="NSInteger">gstateNum</arg>
        <arg type="CGFloat">dx</arg>
        <arg type="CGFloat">dy</arg>
        <arg type="CGFloat">delta</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSeoclip" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSeofill" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSfill" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSflattenpath" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSgrestore" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSgsave" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSinitclip" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSinitgraphics" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSinitmatrix" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSlineto" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSmoveto" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSnewpath" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSpathbbox" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">llx</arg>
        <arg type="CGFloat*">lly</arg>
        <arg type="CGFloat*">urx</arg>
        <arg type="CGFloat*">ury</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrcurveto" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x1</arg>
        <arg type="CGFloat">y1</arg>
        <arg type="CGFloat">x2</arg>
        <arg type="CGFloat">y2</arg>
        <arg type="CGFloat">x3</arg>
        <arg type="CGFloat">y3</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrectclip" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrectfill" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrectstroke" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSreversepath" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrlineto" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrmoveto" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSrotate" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">angle</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSscale" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetalpha" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">a</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetcmykcolor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">c</arg>
        <arg type="CGFloat">m</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">k</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetdash" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const CGFloat*">pat</arg>
        <arg type="NSInteger">size</arg>
        <arg type="CGFloat">offset</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetflat" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">flatness</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetgray" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">gray</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetgstate" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSInteger">gst</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsethalftonephase" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsethsbcolor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">h</arg>
        <arg type="CGFloat">s</arg>
        <arg type="CGFloat">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetlinecap" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int">linecap</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetlinejoin" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int">linejoin</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetlinewidth" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">width</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetmiterlimit" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">limit</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetoffset" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="short int">x</arg>
        <arg type="short int">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetrgbcolor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">r</arg>
        <arg type="CGFloat">g</arg>
        <arg type="CGFloat">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSsetstrokeadjust" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="int">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSshfill" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSDictionary*">shaderDictionary</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSshow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSstroke" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPStranslate" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSwidthshow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="int">c</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSxshow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">s</arg>
        <arg type="const CGFloat*">numarray</arg>
        <arg type="int">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSxyshow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">s</arg>
        <arg type="const CGFloat*">numarray</arg>
        <arg type="int">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="DPSyshow" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">s</arg>
        <arg type="const CGFloat*">numarray</arg>
        <arg type="int">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSConcatCTM" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSAffineTransform*">ctm</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSAffineTransform*" name="GSCurrentCTM" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSCurrentDevice" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="void**">device</arg>
        <arg type="int*">x</arg>
        <arg type="int*">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="GSDefineGState" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSDrawImage" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSRect">rect</arg>
        <arg type="void*">imageref</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSAffineTransform*" name="GSGetTextCTM" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSPoint" name="GSGetTextPosition" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSRectClipList" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const NSRect*">rects</arg>
        <arg type="int">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSRectFillList" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const NSRect*">rects</arg>
        <arg type="int">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSReplaceGState" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSInteger">gst</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSendBezierPath" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSBezierPath*">path</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetCTM" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSAffineTransform*">ctm</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetCharacterSpacing" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">extra</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetDevice" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="void*">device</arg>
        <arg type="int">x</arg>
        <arg type="int">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetFillColor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">values</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetFillColorspace" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSDictionary*">dict</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetFont" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSFont*">font</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetFontSize" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetStrokeColor" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="CGFloat*">values</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetStrokeColorspace" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSDictionary*">dict</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetTextCTM" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSAffineTransform*">ctm</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetTextDrawingMode" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="GSTextDrawingMode">mode</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSSetTextPosition" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSPoint">loc</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSShowGlyphs" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const NSGlyph*">glyphs</arg>
        <arg type="size_t">length</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSShowGlyphsWithAdvances" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const NSGlyph*">glyphs</arg>
        <arg type="const NSSize*">advances</arg>
        <arg type="size_t">length</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSShowText" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="const char*">string</arg>
        <arg type="size_t">length</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSUndefineGState" ovadd="1.0.0">
        <arg type="GSCTXT*">ctxt</arg>
        <arg type="NSInteger">gst</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndDPSOperatorsFunctions-->
<!--StartNSAccessibilityConstantsFunctions-->
    <chapter>
      <heading>NSAccessibilityConstants functions</heading>
      <p></p>
      <function type="void" name="NSAccessibilityPostNotificationWithUserInfo" ovadd="1.0.0">
        <arg type="id">element</arg>
        <arg type="NSString*">notification</arg>
        <arg type="NSDictionary*">userInfo</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSAccessibilityConstantsFunctions-->
<!--StartNSAccessibilityFunctions-->
    <chapter>
      <heading>NSAccessibility functions</heading>
      <p></p>
      <function type="NSString*" name="NSAccessibilityActionDescription" ovadd="1.0.0">
        <arg type="NSString*">action</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSAccessibilityPostNotification" ovadd="1.0.0">
        <arg type="id">element</arg>
        <arg type="NSString*">notification</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSString*" name="NSAccessibilityRoleDescription" ovadd="1.0.0">
        <arg type="NSString*">role</arg>
        <arg type="NSString*">subrole</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSString*" name="NSAccessibilityRoleDescriptionForUIElement" ovadd="1.0.0">
        <arg type="id">element</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSAccessibilityUnignoredAncestor" ovadd="1.0.0">
        <arg type="id">element</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSArray*" name="NSAccessibilityUnignoredChildren" ovadd="1.0.0">
        <arg type="NSArray*">originalChildren</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSArray*" name="NSAccessibilityUnignoredChildrenForOnlyChild" ovadd="1.0.0">
        <arg type="id">originalChild</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSAccessibilityUnignoredDescendant" ovadd="1.0.0">
        <arg type="id">element</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSAccessibilityFunctions-->
<!--StartNSApplicationFunctions-->
    <chapter>
      <heading>NSApplication functions</heading>
      <p></p>
      <function type="id" name="GSContactApplication" ovadd="0.0.0" ovrem="0.0.0">
        <arg type="NSString*">appName</arg>
        <arg type="NSString*">port</arg>
        <arg type="NSDate*">expire</arg>
        <desc>
          <p>
            Establishes an NSConnection to the application
            listening at <var>port</var> (by convention
            usually the application name), launching
            <var>appName</var> if necessary. Returns the proxy to
            the remote application, or <code>nil</code> on failure.
          </p>
          <p>
            The value of <var>port</var> specifies the name of the
            distributed objects service to which the
            connection is to be made. If this is
            <code>nil</code> it will be inferred from
            <var>appName</var>... by convention, applications use
            their own name (minus any path or extension) for
            this.
          </p>
          <p>
            If <var>appName</var> is <code>nil</code> or cannot be
            launched, this attempts to locate any application
            in a standard location whose name matches
            <var>port</var> and launch that application.
          </p>
          <p>
            The value of <var>expire</var> provides a timeout in
            case the application cannot be contacted promptly. If
            it is omitted, a thirty second timeout is used.
          </p>
        </desc>
      </function>
      <function type="int" name="NSApplicationMain" ovadd="1.0.0">
        <arg type="int">argc</arg>
        <arg type="const char**">argv</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="BOOL" name="NSPerformService" ovadd="1.0.0">
        <arg type="NSString*">serviceItem</arg>
        <arg type="NSPasteboard*">pboard</arg>
        <desc>
          <p>
            Given the name of a <var>serviceItem</var>, and some
            data in a pasteboard this function sends the data to
            the service provider (launching another application if
            necessary) and retrieves the result of the
            service in the pastebaord.
          </p>
          Returns <code>YES</code> on success, <code>NO</code>
          otherwise.
        </desc>
      </function>
      <function type="void" name="NSRegisterServicesProvider" ovadd="1.0.0">
        <arg type="id">provider</arg>
        <arg type="NSString*">name</arg>
        <desc>
          Registers a services providing object using the
          specified port <var>name</var>. <br /> Applications
          should not need to use this, as they can use the
          <ref type="method" id="-setServicesProvider:" class="NSApplication">[NSApplication -setServicesProvider:]</ref> method instead. The NSApplication method will use the <var>name</var> of the application rather than an other port <var>name</var>.
        </desc>
      </function>
      <function type="int" name="NSSetShowsServicesMenuItem" ovadd="1.0.0">
        <arg type="NSString*">name</arg>
        <arg type="BOOL">enabled</arg>
        <desc>
          <p>
            Controls whether the item <var>name</var> should
            be included in the services menu.
          </p>
          <p>
            If <var>enabled</var> is <code>YES</code> then the
            services menu for each application will include
            the named item, if <var>enabled</var> is
            <code>NO</code> then the service will not be shown
            in application services menus.
          </p>
          <p>
            Returns 0 if the setting is successfuly changed.
            Non-zero otherwise.
          </p>
        </desc>
      </function>
      <function type="void" name="NSShowSystemInfoPanel" ovadd="1.0.0">
        <arg type="NSDictionary*">options</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="BOOL" name="NSShowsServicesMenuItem" ovadd="1.0.0">
        <arg type="NSString*">name</arg>
        <desc>
          Returns a flag indicating whether the named service
          is supposed to be displayed in application services menus.
        </desc>
      </function>
      <function type="void" name="NSUnRegisterServicesProvider" ovadd="1.0.0">
        <arg type="NSString*">name</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSUpdateDynamicServices" ovadd="1.0.0">
        <desc>
          A services providing application may use this to update the
          list of services it provides. <br /> In order to update
          the services advertised, the application must create a
          <em>.service</em> bundle and place it in
          <code>~/Library/Services</code> before invoking this
          function.
        </desc>
      </function>
    </chapter>
<!--EndNSApplicationFunctions-->
<!--StartNSDataLinkManagerFunctions-->
    <chapter>
      <heading>NSDataLinkManager functions</heading>
      <p></p>
      <function type="void" name="NSFrameLinkRect" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="BOOL">isDestination</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="float" name="NSLinkFrameThickness" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSDataLinkManagerFunctions-->
<!--StartNSEventFunctions-->
    <chapter>
      <heading>NSEvent functions</heading>
      <p></p>
      <function type="NSEventMask" name="NSEventMaskFromType" ovadd="1.0.0">
        <arg type="NSEventType">type</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSEventFunctions-->
<!--StartNSFontFunctions-->
    <chapter>
      <heading>NSFont functions</heading>
      <p></p>
      <function type="int" name="NSConvertGlyphsToPackedGlyphs" ovadd="10.0.0">
        <arg type="NSGlyph*">glBuf</arg>
        <arg type="int">count</arg>
        <arg type="NSMultibyteGlyphPacking">packing</arg>
        <arg type="char*">packedGlyphs</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSFontFunctions-->
<!--StartNSGraphicsContextFunctions-->
    <chapter>
      <heading>NSGraphicsContext functions</heading>
      <p></p>
      <function type="NSGraphicsContext*" name="GSCurrentContext" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSGraphicsContextFunctions-->
<!--StartNSGraphicsFunctions-->
    <chapter>
      <heading>NSGraphics functions</heading>
      <p></p>
      <function type="NSArray*" name="GSAllWindows" ovadd="0.0.0" ovrem="0.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSArray*" name="GSOrderedWindows" ovadd="0.0.0" ovrem="0.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="GSWSetViewIsFlipped" ovadd="1.0.0">
        <arg type="NSGraphicsContext*">ctxt</arg>
        <arg type="BOOL">flipped</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="BOOL" name="GSWViewIsFlipped" ovadd="1.0.0">
        <arg type="NSGraphicsContext*">ctxt</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSWindow*" name="GSWindowWithNumber" ovadd="0.0.0" ovrem="0.0.0">
        <arg type="NSInteger">num</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="const NSWindowDepth*" name="NSAvailableWindowDepths" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeep" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSWindowDepth" name="NSBestDepth" ovadd="1.0.0">
        <arg type="NSString*">colorSpace</arg>
        <arg type="NSInteger">bitsPerSample</arg>
        <arg type="NSInteger">bitsPerPixel</arg>
        <arg type="BOOL">planar</arg>
        <arg type="BOOL*">exactMatch</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSBitsPerPixelFromDepth" ovadd="1.0.0">
        <arg type="NSWindowDepth">depth</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSBitsPerSampleFromDepth" ovadd="1.0.0">
        <arg type="NSWindowDepth">depth</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSString*" name="NSColorSpaceFromDepth" ovadd="1.0.0">
        <arg type="NSWindowDepth">depth</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSConvertGlobalToWindowNumber" ovadd="10.0.0">
        <arg type="int">globalNum</arg>
        <arg type="unsigned int*">winNum</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSConvertWindowNumberToGlobal" ovadd="10.0.0">
        <arg type="int">winNum</arg>
        <arg type="unsigned int*">globalNum</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSCopyBitmapFromGState" ovadd="1.0.0">
        <arg type="int">srcGstate</arg>
        <arg type="NSRect">srcRect</arg>
        <arg type="NSRect">destRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSCopyBits" ovadd="1.0.0">
        <arg type="NSInteger">srcGstate</arg>
        <arg type="NSRect">srcRect</arg>
        <arg type="NSPoint">destPoint</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSCountWindows" ovadd="1.0.0">
        <arg type="NSInteger*">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSCountWindowsForContext" ovadd="10.0.0">
        <arg type="NSInteger">context</arg>
        <arg type="NSInteger*">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDottedFrameRect" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <desc>
          Draws a rectangle along the inside of <var>aRect</var>.
          The rectangle will be black, dotted (using 1 point
          dashes), and will have a line width of 1 point.
        </desc>
      </function>
      <function type="void" name="NSDrawBezel" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawBitmap" ovadd="1.0.0">
        <arg type="NSRect">rect</arg>
        <arg type="NSInteger">pixelsWide</arg>
        <arg type="NSInteger">pixelsHigh</arg>
        <arg type="NSInteger">bitsPerSample</arg>
        <arg type="NSInteger">samplesPerPixel</arg>
        <arg type="NSInteger">bitsPerPixel</arg>
        <arg type="NSInteger">bytesPerRow</arg>
        <arg type="BOOL">isPlanar</arg>
        <arg type="BOOL">hasAlpha</arg>
        <arg type="NSString*">colorSpaceName</arg>
        <arg type="const unsigned char* const[]">data</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawButton" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSRect" name="NSDrawColorTiledRects" ovadd="10.0.0">
        <arg type="NSRect">boundsRect</arg>
        <arg type="NSRect">clipRect</arg>
        <arg type="const NSRectEdge*">sides</arg>
        <arg type="NSColor**">colors</arg>
        <arg type="NSInteger">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawDarkBezel" ovadd="10.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawFramePhoto" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawGrayBezel" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawGroove" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawLightBezel" ovadd="10.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawNinePartImage" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="NSImage*">topLeft</arg>
        <arg type="NSImage*">topMiddle</arg>
        <arg type="NSImage*">topRight</arg>
        <arg type="NSImage*">centerLeft</arg>
        <arg type="NSImage*">centerMiddle</arg>
        <arg type="NSImage*">centerRight</arg>
        <arg type="NSImage*">bottomLeft</arg>
        <arg type="NSImage*">bottomMiddle</arg>
        <arg type="NSImage*">bottomRight</arg>
        <arg type="NSCompositingOperation">op</arg>
        <arg type="CGFloat">fraction</arg>
        <arg type="BOOL">flipped</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawThreePartImage" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="NSImage*">start</arg>
        <arg type="NSImage*">middle</arg>
        <arg type="NSImage*">end</arg>
        <arg type="BOOL">isVertical</arg>
        <arg type="NSCompositingOperation">op</arg>
        <arg type="CGFloat">fraction</arg>
        <arg type="BOOL">flipped</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSRect" name="NSDrawTiledRects" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <arg type="const NSRectEdge*">sides</arg>
        <arg type="const CGFloat*">grays</arg>
        <arg type="NSInteger">count</arg>
        <desc>
          Draws a set of edges of <var>aRect</var>. The
          <var>sides</var> array should contain <var>count</var>
          edges, and <var>grays</var> the corresponding color.
          Edges are drawn in the order given in the array, and
          subsequent edges are drawn inside previous edges
          (thus, they will never overlap).
        </desc>
      </function>
      <function type="void" name="NSDrawWhiteBezel" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="const NSRect">clipRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSDrawWindowBackground" ovadd="10.0.0">
        <arg type="NSRect">aRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSEraseRect" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSFrameRect" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <desc>
          <p>
            Draws a rectangle using the current color along the
            inside of <var>aRect</var>. NSFrameRectWithWidth
            uses the frameWidth as the line width, while
            NSFrameRect always uses 1 point wide lines. The
            functions do not change the line width of the
            current graphics context.
          </p>
          <p>
            'Inside' here means that no part of the stroked
            rectangle will extend outside the given
            rectangle.
          </p>
        </desc>
      </function>
      <function type="void" name="NSFrameRectWithWidth" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="CGFloat">frameWidth</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSFrameRectWithWidthUsingOperation" ovadd="1.0.0">
        <arg type="const NSRect">aRect</arg>
        <arg type="CGFloat">frameWidth</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="int" name="NSGetWindowServerMemory" ovadd="10.0.0">
        <arg type="int">context</arg>
        <arg type="int*">virtualMemory</arg>
        <arg type="int*">windowBackingMemory</arg>
        <arg type="NSString**">windowDumpStream</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSHighlightRect" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSNumberOfColorComponents" ovadd="1.0.0">
        <arg type="NSString*">colorSpaceName</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="BOOL" name="NSPlanarFromDepth" ovadd="1.0.0">
        <arg type="NSWindowDepth">depth</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSColor*" name="NSReadPixel" ovadd="1.0.0">
        <arg type="NSPoint">location</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectClip" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectClipList" ovadd="1.0.0">
        <arg type="const NSRect*">rects</arg>
        <arg type="NSInteger">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFill" ovadd="1.0.0">
        <arg type="NSRect">aRect</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFillList" ovadd="1.0.0">
        <arg type="const NSRect*">rects</arg>
        <arg type="NSInteger">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFillListUsingOperation" ovadd="10.0.0">
        <arg type="const NSRect*">rects</arg>
        <arg type="NSInteger">count</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFillListWithColors" ovadd="10.0.0">
        <arg type="const NSRect*">rects</arg>
        <arg type="NSColor**">colors</arg>
        <arg type="NSInteger">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFillListWithColorsUsingOperation" ovadd="10.0.0">
        <arg type="const NSRect*">rects</arg>
        <arg type="NSColor**">colors</arg>
        <arg type="NSInteger">num</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFillListWithGrays" ovadd="1.0.0">
        <arg type="const NSRect*">rects</arg>
        <arg type="const CGFloat*">grays</arg>
        <arg type="NSInteger">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSRectFillUsingOperation" ovadd="10.0.0">
        <arg type="NSRect">aRect</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSSetFocusRingStyle" ovadd="10.1.0">
        <arg type="NSFocusRingPlacement">placement</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSWindowList" ovadd="1.0.0">
        <arg type="NSInteger">size</arg>
        <arg type="NSInteger[]">list</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSWindowListForContext" ovadd="10.0.0">
        <arg type="NSInteger">context</arg>
        <arg type="NSInteger">size</arg>
        <arg type="NSInteger**">list</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSGraphicsFunctions-->
<!--StartNSInterfaceStyleFunctions-->
    <chapter>
      <heading>NSInterfaceStyle functions</heading>
      <p></p>
      <function type="NSInterfaceStyle" name="NSInterfaceStyleForKey" ovadd="10.0.0">
        <arg type="NSString*">key</arg>
        <arg type="NSResponder*">responder</arg>
        <desc>
          <p>
            Returns the interface style the
            <var>responder</var> should use, which affects how a
            UI element (such as a button or menu) is displayed. If
            the <var>responder</var> has an interface style set,
            the <var>key</var> is ignored and the responder's
            interface style is returned. Otherwise the style
            associated with the <var>key</var> is returned
            (if set), otherwise the default style is returned. In
            no case will the style <code>NSNoInterfaceStyle</code>
            be returned.
          </p>
          <p>
            Styles can be set using the user defaults system.
            Currently available styles are
          </p>
          <list>
            <item>NSNextStepInterfaceStyle</item>
            <item>NSMacintoshInterfaceStyle</item>
            <item>NSWindows95InterfaceStyle</item>
            <item>GSWindowMakerInterfaceStyle</item>
          </list>
          <p>
            You can set a default style for all UI elements using
            the <code>NSInterfaceStyleDefault</code> key:
          </p>
<example>
   defaults write NSGlobalDomain NSInterfaceStyleDefault GSWindowMakerInterfaceStyle 
   </example>
        </desc>
      </function>
    </chapter>
<!--EndNSInterfaceStyleFunctions-->
<!--StartNSKeyValueBindingFunctions-->
    <chapter>
      <heading>NSKeyValueBinding functions</heading>
      <p></p>
      <function type="BOOL" name="NSIsControllerMarker" ovadd="10.4.0">
        <arg type="id">object</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSKeyValueBindingFunctions-->
<!--StartNSPanelFunctions-->
    <chapter>
      <heading>NSPanel functions</heading>
      <p></p>
      <function type="NSInteger" name="GSRunExceptionPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSException*">exception</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeginAlertSheet" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <arg type="NSWindow*">docWindow</arg>
        <arg type="id">modalDelegate</arg>
        <arg type="SEL">willEndSelector</arg>
        <arg type="SEL">didEndSelector</arg>
        <arg type="void*">contextInfo</arg>
        <arg type="NSString*">msg</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeginCriticalAlertSheet" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <arg type="NSWindow*">docWindow</arg>
        <arg type="id">modalDelegate</arg>
        <arg type="SEL">willEndSelector</arg>
        <arg type="SEL">didEndSelector</arg>
        <arg type="void*">contextInfo</arg>
        <arg type="NSString*">msg</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSBeginInformationalAlertSheet" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <arg type="NSWindow*">docWindow</arg>
        <arg type="id">modalDelegate</arg>
        <arg type="SEL">willEndSelector</arg>
        <arg type="SEL">didEndSelector</arg>
        <arg type="void*">contextInfo</arg>
        <arg type="NSString*">msg</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSGetAlertPanel" ovadd="1.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSGetCriticalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="id" name="NSGetInformationalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="NSReleaseAlertPanel" ovadd="1.0.0">
        <arg type="id">panel</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunAlertPanel" ovadd="1.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunCriticalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunInformationalAlertPanel" ovadd="10.0.0">
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="NSInteger" name="NSRunLocalizedAlertPanel" ovadd="0.0.0" ovrem="0.0.0">
        <arg type="NSString*">table</arg>
        <arg type="NSString*">title</arg>
        <arg type="NSString*">msg</arg>
        <arg type="NSString*">defaultButton</arg>
        <arg type="NSString*">alternateButton</arg>
        <arg type="NSString*">otherButton</arg>
        <vararg />
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSPanelFunctions-->
<!--StartNSPasteboardFunctions-->
    <chapter>
      <heading>NSPasteboard functions</heading>
      <p></p>
      <function type="NSString*" name="NSCreateFileContentsPboardType" ovadd="1.0.0">
        <arg type="NSString*">fileType</arg>
        <desc>
          <p>
            Returns a standardised pasteboard type for file
            contents, formed from the supplied file
            extension.
          </p>
          <p>
            Data written to a pasteboard with a file contents type
            should be written using the
            <ref type="method" id="-writeFileContents:" class="NSPasteboard">[NSPasteboard -writeFileContents:]</ref> or <ref type="method" id="-writeFileWrapper:" class="NSPasteboard">[NSPasteboard -writeFileWrapper:]</ref> method. Similarly, the data should be read using the <ref type="method" id="-readFileContentsType:toFile:" class="NSPasteboard">[NSPasteboard -readFileContentsType:toFile:]</ref> or <ref type="method" id="-readFileWrapper" class="NSPasteboard">[NSPasteboard -readFileWrapper]</ref> method.
          </p>
        </desc>
      </function>
      <function type="NSString*" name="NSCreateFilenamePboardType" ovadd="1.0.0">
        <arg type="NSString*">fileType</arg>
        <desc>
          <p>
            Returns a standardised pasteboard type for file
            names, formed from the supplied file extension.
          </p>
          <p>
            Data written to a pasteboard with a file names type
            should be a single name written using
            <ref type="method" id="-setString:forType:" class="NSPasteboard">[NSPasteboard -setString:forType:]</ref> or an array of strings written using <ref type="method" id="-setPropertyList:forType:" class="NSPasteboard">[NSPasteboard -setPropertyList:forType:]</ref>. <br /> Similarly, the data should be read using the <ref type="method" id="-stringForType:" class="NSPasteboard">[NSPasteboard -stringForType:]</ref> or <ref type="method" id="-propertyListForType:" class="NSPasteboard">[NSPasteboard -propertyListForType:]</ref> method.
          </p>
          <p>
            See also the
            <ref type="function" id="NSGetFileType">
              NSGetFileType()
            </ref>
            and
            <ref type="function" id="NSGetFileTypes">
              NSGetFileTypes()
            </ref>
            functions.
          </p>
        </desc>
      </function>
      <function type="NSString*" name="NSGetFileType" ovadd="1.0.0">
        <arg type="NSString*">pboardType</arg>
        <desc>
          Returns the file type (fileType extension)
          corresponding to the pasteboard type given.
          <br /> This is a counterpart to the
          <ref type="function" id="NSCreateFilenamePboardType">
            NSCreateFilenamePboardType()
          </ref>
          function.
        </desc>
      </function>
      <function type="NSArray*" name="NSGetFileTypes" ovadd="1.0.0">
        <arg type="NSArray*">pboardTypes</arg>
        <desc>
          Returns the file types (filename extensions)
          corresponding to the pasteboard types given.
        </desc>
      </function>
    </chapter>
<!--EndNSPasteboardFunctions-->
<!--StartNSSoundFunctions-->
    <chapter>
      <heading>NSSound functions</heading>
      <p></p>
      <function type="NSArray*" name="PlaybackDeviceIdentifiers" ovadd="1.0.0">
        <desc>
          Function used to retrieve all available playback
          devices.
          <p>
            This function is the only way to retrieve possible
            playback device identifiers understood by [NSSound
            -setPlaybackDeviceIdentifier:].
          </p>
        </desc>
      </function>
    </chapter>
<!--EndNSSoundFunctions-->
<!--StartNSViewFunctions-->
    <chapter>
      <heading>NSView functions</heading>
      <p></p>
      <function type="NSArray*" name="GSGetDragTypes" ovadd="1.0.0">
        <arg type="NSView*">aView</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndNSViewFunctions-->
<!--StartPSOperatorsFunctions-->
    <chapter>
      <heading>PSOperators functions</heading>
      <p></p>
      <function type="void" name="PSPrintf" ovadd="1.0.0">
        <arg type="const char*">fmt</arg>
        <arg type="va_list">args</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSWait" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSWriteData" ovadd="1.0.0">
        <arg type="const char*">buf</arg>
        <arg type="unsigned int">count</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSarc" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">r</arg>
        <arg type="CGFloat">angle1</arg>
        <arg type="CGFloat">angle2</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSarcn" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">r</arg>
        <arg type="CGFloat">angle1</arg>
        <arg type="CGFloat">angle2</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSarct" ovadd="1.0.0">
        <arg type="CGFloat">x1</arg>
        <arg type="CGFloat">y1</arg>
        <arg type="CGFloat">x2</arg>
        <arg type="CGFloat">y2</arg>
        <arg type="CGFloat">r</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSashow" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSawidthshow" ovadd="1.0.0">
        <arg type="CGFloat">cx</arg>
        <arg type="CGFloat">cy</arg>
        <arg type="int">c</arg>
        <arg type="CGFloat">ax</arg>
        <arg type="CGFloat">ay</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScharpath" ovadd="1.0.0">
        <arg type="const char*">s</arg>
        <arg type="int">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSclip" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSclosepath" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScomposite" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <arg type="NSInteger">gstateNum</arg>
        <arg type="CGFloat">dx</arg>
        <arg type="CGFloat">dy</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScompositerect" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <arg type="NSCompositingOperation">op</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSconcat" ovadd="1.0.0">
        <arg type="const CGFloat*">m</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScountwindowlist" ovadd="1.0.0">
        <arg type="int">d</arg>
        <arg type="int*">c</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentalpha" ovadd="1.0.0">
        <arg type="CGFloat*">a</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentcmykcolor" ovadd="1.0.0">
        <arg type="CGFloat*">c</arg>
        <arg type="CGFloat*">m</arg>
        <arg type="CGFloat*">y</arg>
        <arg type="CGFloat*">k</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentflat" ovadd="1.0.0">
        <arg type="CGFloat*">flatness</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentgray" ovadd="1.0.0">
        <arg type="CGFloat*">gray</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrenthsbcolor" ovadd="1.0.0">
        <arg type="CGFloat*">h</arg>
        <arg type="CGFloat*">s</arg>
        <arg type="CGFloat*">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentlinecap" ovadd="1.0.0">
        <arg type="int*">linecap</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentlinejoin" ovadd="1.0.0">
        <arg type="int*">linejoin</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentlinewidth" ovadd="1.0.0">
        <arg type="CGFloat*">width</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentmiterlimit" ovadd="1.0.0">
        <arg type="CGFloat*">limit</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentpoint" ovadd="1.0.0">
        <arg type="CGFloat*">x</arg>
        <arg type="CGFloat*">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentrgbcolor" ovadd="1.0.0">
        <arg type="CGFloat*">r</arg>
        <arg type="CGFloat*">g</arg>
        <arg type="CGFloat*">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurrentstrokeadjust" ovadd="1.0.0">
        <arg type="int*">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PScurveto" ovadd="1.0.0">
        <arg type="CGFloat">x1</arg>
        <arg type="CGFloat">y1</arg>
        <arg type="CGFloat">x2</arg>
        <arg type="CGFloat">y2</arg>
        <arg type="CGFloat">x3</arg>
        <arg type="CGFloat">y3</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSdissolve" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <arg type="NSInteger">gstateNum</arg>
        <arg type="CGFloat">dx</arg>
        <arg type="CGFloat">dy</arg>
        <arg type="CGFloat">delta</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSeoclip" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSeofill" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSfill" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSflattenpath" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSgrestore" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSgsave" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSinitclip" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSinitgraphics" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSinitmatrix" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSlineto" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSmoveto" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSnewpath" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSpathbbox" ovadd="1.0.0">
        <arg type="CGFloat*">llx</arg>
        <arg type="CGFloat*">lly</arg>
        <arg type="CGFloat*">urx</arg>
        <arg type="CGFloat*">ury</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrcurveto" ovadd="1.0.0">
        <arg type="CGFloat">x1</arg>
        <arg type="CGFloat">y1</arg>
        <arg type="CGFloat">x2</arg>
        <arg type="CGFloat">y2</arg>
        <arg type="CGFloat">x3</arg>
        <arg type="CGFloat">y3</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrectclip" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrectfill" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrectstroke" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">w</arg>
        <arg type="CGFloat">h</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSreversepath" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrlineto" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrmoveto" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSrotate" ovadd="1.0.0">
        <arg type="CGFloat">angle</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSscale" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetalpha" ovadd="1.0.0">
        <arg type="CGFloat">a</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetcmykcolor" ovadd="1.0.0">
        <arg type="CGFloat">c</arg>
        <arg type="CGFloat">m</arg>
        <arg type="CGFloat">y</arg>
        <arg type="CGFloat">k</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetdash" ovadd="1.0.0">
        <arg type="const CGFloat*">pat</arg>
        <arg type="NSInteger">size</arg>
        <arg type="CGFloat">offset</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetflat" ovadd="1.0.0">
        <arg type="CGFloat">flatness</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetgray" ovadd="1.0.0">
        <arg type="CGFloat">gray</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetgstate" ovadd="1.0.0">
        <arg type="NSInteger">gst</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsethalftonephase" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsethsbcolor" ovadd="1.0.0">
        <arg type="CGFloat">h</arg>
        <arg type="CGFloat">s</arg>
        <arg type="CGFloat">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetlinecap" ovadd="1.0.0">
        <arg type="int">linecap</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetlinejoin" ovadd="1.0.0">
        <arg type="int">linejoin</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetlinewidth" ovadd="1.0.0">
        <arg type="CGFloat">width</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetmiterlimit" ovadd="1.0.0">
        <arg type="CGFloat">limit</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetrgbcolor" ovadd="1.0.0">
        <arg type="CGFloat">r</arg>
        <arg type="CGFloat">g</arg>
        <arg type="CGFloat">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSsetstrokeadjust" ovadd="1.0.0">
        <arg type="int">b</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSshfill" ovadd="1.0.0">
        <arg type="NSDictionary*">shaderDictionary</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSshow" ovadd="1.0.0">
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSstroke" ovadd="1.0.0">
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PStranslate" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSwidthshow" ovadd="1.0.0">
        <arg type="CGFloat">x</arg>
        <arg type="CGFloat">y</arg>
        <arg type="int">c</arg>
        <arg type="const char*">s</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSwindowlist" ovadd="1.0.0">
        <arg type="int">d</arg>
        <arg type="int">c</arg>
        <arg type="int*">array</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSxshow" ovadd="1.0.0">
        <arg type="const char*">s</arg>
        <arg type="const CGFloat*">numarray</arg>
        <arg type="int">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSxyshow" ovadd="1.0.0">
        <arg type="const char*">s</arg>
        <arg type="const CGFloat*">numarray</arg>
        <arg type="int">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
      <function type="void" name="PSyshow" ovadd="1.0.0">
        <arg type="const char*">s</arg>
        <arg type="const CGFloat*">numarray</arg>
        <arg type="int">size</arg>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </function>
    </chapter>
<!--EndPSOperatorsFunctions-->
<!--EndFunctions-->
<!--StartMacros-->
<!--StartNSTextAttachmentMacros-->
    <chapter>
      <heading>NSTextAttachment macros</heading>
      <p></p>
      <macro name="_GNUstep_H_NSTextAttachment" ovadd="1.0.0">
        <desc>
          NSTextAttachment is used to represent text
          attachments. When inline, text attachments
          appear as the value of the NSAttachmentAttributeName
          attached to the special character
          NSAttachmentCharacter.
          NSTextAttachment uses an object obeying the
          NSTextAttachmentCell protocol to get
          input from the user and to display an image.
          NSTextAttachmentCell is a simple
          subclass of NSCell which provides the
          NSTextAttachment protocol.
        </desc>
      </macro>
    </chapter>
<!--EndNSTextAttachmentMacros-->
<!--StartNSTextContainerMacros-->
    <chapter>
      <heading>NSTextContainer macros</heading>
      <p></p>
      <macro name="_GNUstep_H_NSTextContainer" ovadd="1.0.0">
        <desc>
          A text container defines a region in the plane. It is used
          by the text system to lay out text: text is laid out
          inside this region. A layout manager has a list of
          text containers that it lays out text in. A text
          container may have one NSTextView attached to it
          that displays the text laid out in the text container.
          Note that the coordinate system used by NSTextContainer
          is the same as in the rest of the text system classes, ie.
          positive y is down. NSTextContainer itself defines a
          simple rectangular region as large as the container
          size. In most cases, only a single, simple text
          container is used with a layout manager and a text
          view. Examples of cases where you might want to use
          several text containers, or subclasses that define
          more complex regions, are:
          <list>
            <item>
              Multi-page layout; one text container for each
              page.
            </item>
            <item>
              Multi-column layout; one text container for
              each column.
            </item>
            <item>
              Layout flowing around pictures; the text container
              would define a region that does not include the
              space used by the picture.
            </item>
          </list>
          If the region defined by a text container can change
          dynamically, the text container should call
          <ref type="method" id="-textContainerChangedGeometry:" class="GSLayoutManager">[GSLayoutManager -textContainerChangedGeometry:]</ref> whenever this happens.
        </desc>
      </macro>
    </chapter>
<!--EndNSTextContainerMacros-->
<!--EndMacros-->
</body>
</gsdoc>
