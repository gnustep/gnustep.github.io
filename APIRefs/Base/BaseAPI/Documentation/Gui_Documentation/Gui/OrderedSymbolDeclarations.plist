{
    "(GSImageDelegateProtocol)" = (
	"-imageDidNotDraw:inRect:"
    );
    "(NSAccessibilityButton)" = (
	"-accessibilityLabel",
	"-accessibilityPerformPress"
    );
    "(NSAccessibilityCustomRotorItemSearchDelegate)" = (
	"-rotor:resultForSearchParameters:"
    );
    "(NSAccessibilityElement)" = (
	"-accessibilityFrame",
	"-accessibilityIdentifier",
	"-accessibilityParent",
	"-isAccessibilityFocused"
    );
    "(NSAccessibilitySwitch)" = (
	"-accessibilityPerformDecrement",
	"-accessibilityPerformIncrement",
	"-accessibilityValue"
    );
    "(NSAppearanceCustomization)" = (
	"-appearance",
	"-setAppearance:",
	"-effectiveAppearance",
	"-appearance",
	"-setAppearance:",
	"-effectiveAppearance"
    );
    "(NSChangeSpelling)" = (
	"-changeSpelling:"
    );
    "(NSCollectionViewDataSource)" = (
	"-collectionView:numberOfItemsInSection:",
	"-collectionView:itemForRepresentedObjectAtIndexPath:",
	"-numberOfSectionsInCollectionView:",
	"-collectionView:viewForSupplementaryElementOfKind:atIndexPath:"
    );
    "(NSCollectionViewDelegate)" = (
	"-collectionView:canDragItemsAtIndexPaths:withEvent:",
	"-collectionView:canDragItemsAtIndexes:withEvent:",
	"-collectionView:writeItemsAtIndexPaths:toPasteboard:",
	"-collectionView:writeItemsAtIndexes:toPasteboard:",
	"-collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexPaths:",
	"-collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:",
	"-collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:",
	"-collectionView:draggingImageForItemsAtIndexes:withEvent:offset:",
	"-collectionView:validateDrop:proposedIndexPath:dropOperation:",
	"-collectionView:validateDrop:proposedIndex:dropOperation:",
	"-collectionView:acceptDrop:indexPath:dropOperation:",
	"-collectionView:acceptDrop:index:dropOperation:",
	"-collectionView:pasteboardWriterForItemAtIndexPath:",
	"-collectionView:pasteboardWriterForItemAtIndex:",
	"-collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:",
	"-collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:",
	"-collectionView:draggingSession:endedAtPoint:dragOperation:",
	"-collectionView:updateDraggingItemsForDrag:",
	"-collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:",
	"-collectionView:didChangeItemsAtIndexPaths:toHighlightState:",
	"-collectionView:shouldSelectItemsAtIndexPaths:",
	"-collectionView:shouldDeselectItemsAtIndexPaths:",
	"-collectionView:didSelectItemsAtIndexPaths:",
	"-collectionView:didDeselectItemsAtIndexPaths:",
	"-collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:",
	"-collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:",
	"-collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:",
	"-collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:",
	"-collectionView:transitionLayoutForOldLayout:newLayout:"
    );
    "(NSCollectionViewDelegateFlowLayout)" = (
	"-collectionView:layout:sizeForItemAtIndexPath:",
	"-collectionView:layout:insetForSectionAtIndex:",
	"-collectionView:layout:minimumLineSpacingForSectionAtIndex:",
	"-collectionView:layout:minimumInteritemSpacingForSectionAtIndex:",
	"-collectionView:layout:referenceSizeForHeaderInSection:",
	"-collectionView:layout:referenceSizeForFooterInSection:"
    );
    "(NSCollectionViewElement)" = (
	"-prepareForReuse",
	"-applyLayoutAttributes:",
	"-willTransitionFromLayout:toLayout:",
	"-didTransitionFromLayout:toLayout:",
	"-preferredLayoutAttributesFittingAttributes:"
    );
    "(NSCollectionViewPrefetching)" = (
	"-collectionView:prefetchItemsAtIndexPaths:",
	"-collectionView:cancelPrefetchingForItemsAtIndexPaths:"
    );
    "(NSColorPickingCustom)" = (
	"-currentMode",
	"-supportsMode:",
	"-provideNewView:",
	"-setColor:"
    );
    "(NSColorPickingDefault)" = (
	"-initWithPickerMask:colorPanel:",
	"-insertNewButtonImage:in:",
	"-provideNewButtonImage",
	"-setMode:",
	"-attachColorList:",
	"-detachColorList:",
	"-alphaControlAddedOrRemoved:",
	"-viewSizeChanged:"
    );
    "(NSComboBoxDataSource)" = (
	"-numberOfItemsInComboBox:",
	"-comboBox:objectValueForItemAtIndex:",
	"-comboBox:indexOfItemWithStringValue:",
	"-comboBox:completedString:"
    );
    "(NSComboBoxDelegate)" = (
	"-comboBoxWillPopUp:",
	"-comboBoxWillDismiss:",
	"-comboBoxSelectionDidChange:",
	"-comboBoxSelectionIsChanging:"
    );
    "(NSDraggingInfo)" = (
	"-draggingDestinationWindow",
	"-draggingLocation",
	"-draggingPasteboard",
	"-draggingSequenceNumber",
	"-draggingSource",
	"-draggingSourceOperationMask",
	"-draggedImage",
	"-draggedImageLocation",
	"-slideDraggedImageTo:",
	"-namesOfPromisedFilesDroppedAtDestination:"
    );
    "(NSDraggingSource)" = (
	"-draggingSession:sourceOperationMaskForDraggingContext:"
    );
    "(NSGlyphStorage)" = (
	"-attributedString",
	"-insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:",
	"-layoutOptions",
	"-setIntAttribute:value:forGlyphAtIndex:"
    );
    "(NSIgnoreMisspelledWords)" = (
	"-ignoreSpelling:"
    );
    "(NSInputServerMouseTracker)" = (
	"-mouseDownOnCharacterIndex:atCoordinate:withModifier:client:",
	"-mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:",
	"-mouseUpOnCharacterIndex:atCoordinate:withModifier:client:"
    );
    "(NSInputServiceProvider)" = (
	"-activeConversationChanged:toNewConversation:",
	"-activeConversationWillChange:fromOldConversation:",
	"-canBeDisabled",
	"-doCommandBySelector:client:",
	"-inputClientBecomeActive:",
	"-inputClientDisabled:",
	"-inputClientEnabled:",
	"-inputClientResignActive:",
	"-insertText:client:",
	"-markedTextAbandoned:",
	"-markedTextSelectionChanged:client:",
	"-terminate:",
	"-wantsToDelayTextChangeNotifications",
	"-wantsToHandleMouseEvents",
	"-wantsToInterpretAllKeystrokes"
    );
    "(NSMenuDelegate)" = (
	"-menuHasKeyEquivalent:forEvent:target:action:",
	"-menuWillOpen:",
	"-numberOfItemsInMenu:",
	"-menuNeedsUpdate:",
	"-menuDidClose:",
	"-menu:willHighlightItem:",
	"-menu:updateItem:atIndex:shouldCancel:",
	"-confinementRectForMenu:onScreen:"
    );
    "(NSMenuItem)" = (
	"+separatorItem",
	"+setUsesUserKeyEquivalents:",
	"+usesUserKeyEquivalents",
	"-action",
	"-attributedTitle",
	"-hasSubmenu",
	"-image",
	"-indentationLevel",
	"-initWithTitle:action:keyEquivalent:",
	"-isAlternate",
	"-isEnabled",
	"-isSeparatorItem",
	"-keyEquivalent",
	"-keyEquivalentModifierMask",
	"-menu",
	"-mixedStateImage",
	"-mnemonic",
	"-mnemonicLocation",
	"-offStateImage",
	"-onStateImage",
	"-representedObject",
	"-setAction:",
	"-setAlternate:",
	"-setAttributedTitle:",
	"-setEnabled:",
	"-setImage:",
	"-setIndentationLevel:",
	"-setKeyEquivalent:",
	"-setKeyEquivalentModifierMask:",
	"-setMenu:",
	"-setMixedStateImage:",
	"-setMnemonicLocation:",
	"-setOffStateImage:",
	"-setOnStateImage:",
	"-setRepresentedObject:",
	"-setState:",
	"-setSubmenu:",
	"-setTag:",
	"-setTarget:",
	"-setTitle:",
	"-setTitleWithMnemonic:",
	"-setToolTip:",
	"-state",
	"-submenu",
	"-tag",
	"-target",
	"-title",
	"-toolTip",
	"-userKeyEquivalentModifierMask",
	"-userKeyEquivalent"
    );
    "(NSMenuValidation)" = (
	"-validateMenuItem:"
    );
    "(NSMenuView)" = (
	"-setMenu:",
	"-setHighlightedItemIndex:",
	"-highlightedItemIndex",
	"-detachSubmenu",
	"-update",
	"-sizeToFit",
	"-stateImageWidth",
	"-imageAndTitleOffset",
	"-imageAndTitleWidth",
	"-keyEquivalentOffset",
	"-keyEquivalentWidth",
	"-locationForSubmenu:",
	"-performActionWithHighlightingForItemAtIndex:",
	"-trackWithEvent:"
    );
    "(NSOutlineViewDataSource)" = (
	"-outlineView:acceptDrop:item:childIndex:",
	"-outlineView:child:ofItem:",
	"-outlineView:isItemExpandable:",
	"-outlineView:itemForPersistentObject:",
	"-outlineView:numberOfChildrenOfItem:",
	"-outlineView:objectValueForTableColumn:byItem:",
	"-outlineView:persistentObjectForItem:",
	"-outlineView:setObjectValue:forTableColumn:byItem:",
	"-outlineView:validateDrop:proposedItem:proposedChildIndex:",
	"-outlineView:writeItems:toPasteboard:",
	"-outlineView:sortDescriptorsDidChange:",
	"-outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:"
    );
    "(NSOutlineViewDelegate)" = (
	"-outlineViewColumnDidMove:",
	"-outlineViewColumnDidResize:",
	"-outlineViewItemDidCollapse:",
	"-outlineViewItemDidExpand:",
	"-outlineViewItemWillCollapse:",
	"-outlineViewItemWillExpand:",
	"-outlineViewSelectionDidChange:",
	"-outlineViewSelectionIsChanging:",
	"-outlineView:shouldCollapseItem:",
	"-outlineView:shouldEditTableColumn:item:",
	"-outlineView:shouldExpandItem:",
	"-outlineView:shouldSelectItem:",
	"-outlineView:shouldSelectTableColumn:",
	"-outlineView:willDisplayCell:forTableColumn:item:",
	"-outlineView:dataCellForTableColumn:item:",
	"-outlineView:willDisplayOutlineCell:forTableColumn:item:",
	"-selectionShouldChangeInOutlineView:",
	"-outlineView:didClickTableColumn:",
	"-outlineView:viewForTableColumn:item:",
	"-outlineView:rowViewForItem:",
	"-outlineView:didAddRowView:forRow:",
	"-outlineView:didRemoveRowView:forRow:"
    );
    "(NSPageControllerDelegate)" = (
	"-pageController:identifierForObject:",
	"-pageController:viewControllerForIdentifier:",
	"-pageController:frameForObject:",
	"-pageController:prepareViewController:withObject:",
	"-pageController:didTransitionToObject:",
	"-pageControllerWillStartLiveTransition:",
	"-pageControllerDidEndLiveTransition:"
    );
    "(NSPasteboardItemDataProvider)" = (
	"-pasteboard:item:provideDataForType:"
    );
    "(NSPasteboardReading)" = (
	"+readableTypesForPasteboard:"
    );
    "(NSPasteboardWriting)" = (
	"-writableTypesForPasteboard:",
	"-pasteboardPropertyListForType:"
    );
    "(NSPathCellDelegate)" = (
	"-pathCell:willDisplayOpenPanel:",
	"-pathCell:willPopUpMenu:"
    );
    "(NSPathControlDelegate)" = (
	"-pathControl:shouldDragPathComponentCell:withPasteboard:",
	"-pathControl:validateDrop:",
	"-pathControl:acceptDrop:",
	"-pathControl:willDisplayOpenPanel:",
	"-pathControl:willPopUpMenu:",
	"-pathControl:shouldDragItem:withPasteboard:"
    );
    "(NSPrintPanelAccessorizing)" = (
	"-keyPathsForValuesAffectingPreview",
	"-localizedSummaryItems"
    );
    "(NSRuleEditorDelegate)" = (
	"-ruleEditor:child:forCriterion:withRowType:",
	"-ruleEditor:displayValueForCriterion:inRow:",
	"-ruleEditor:numberOfChildrenForCriterion:withRowType:",
	"-ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:",
	"-ruleEditorRowsDidChange:"
    );
    "(NSSeguePerforming)" = (
	"-performSegueWithIdentifier:sender:",
	"-prepareForSegue:sender:",
	"-shouldPerformSegueWithIdentifier:sender:"
    );
    "(NSSharingServicePickerToolbarItemDelegate)" = (
	"-itemsForSharingServicePickerToolbarItem:"
    );
    "(NSSpeechRecognizerDelegate)" = (
	"-speechRecognizer:didRecognizeCommand:"
    );
    "(NSStackViewDelegate)" = (
	"-stackView:willDetachViews:",
	"-stackView:didReattachViews:"
    );
    "(NSTabViewDelegate)" = (
	"-tabView:shouldSelectTabViewItem:",
	"-tabView:willSelectTabViewItem:",
	"-tabView:didSelectTabViewItem:",
	"-tabViewDidChangeNumberOfTabViewItems:"
    );
    "(NSTextAttachmentCell)" = (
	"-drawWithFrame:inView:",
	"-drawWithFrame:inView:characterIndex:",
	"-drawWithFrame:inView:characterIndex:layoutManager:",
	"-highlight:withFrame:inView:",
	"-cellSize",
	"-cellBaselineOffset",
	"-cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:",
	"-wantsToTrackMouse",
	"-wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:",
	"-trackMouse:inRect:ofView:untilMouseUp:",
	"-trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:",
	"-setAttachment:",
	"-attachment"
    );
    "(NSTextCheckingClient)" = (
	"-addAnnotations:range:",
	"-annotatedSubstringForProposedRange:actualRange:",
	"-candidateListTouchBarItem",
	"-removeAnnotation:range:",
	"-replaceCharactersInRange:withAnnotatedString:",
	"-selectAndShowRange:",
	"-setAnnotations:range:",
	"-viewForRange:firstRect:actualRange:"
    );
    "(NSTextFinderBarContainer)" = (
	"-findBarView",
	"-setFindBarView:",
	"-isfindBarVisible",
	"-setFindBarVisible:",
	"-findBarViewDidChangeHeight",
	"-contentView"
    );
    "(NSTextFinderClient)" = (
	"-isSelectable",
	"-allowsMultipleSelection",
	"-isEditable",
	"-string",
	"-stringAtIndex:effectiveRange:endsWithSearchBoundary:",
	"-stringLength",
	"-firstSelectedRange",
	"-selectedRanges",
	"-setSelectedRanges:",
	"-scrollRangeToVisible:",
	"-shouldReplaceCharactersInRanges:withStrings:",
	"-replaceCharactersInRange:withString:",
	"-didReplaceCharacters",
	"-contentViewAtIndex:effectiveCharacterRange:",
	"-rectsForCharacterRange:",
	"-visibleCharacterRanges",
	"-drawCharactersInRange:forContentView:"
    );
    "(NSTextInput)" = (
	"-setMarkedText:selectedRange:",
	"-hasMarkedText",
	"-markedRange",
	"-selectedRange",
	"-unmarkText",
	"-validAttributesForMarkedText",
	"-attributedSubstringFromRange:",
	"-characterIndexForPoint:",
	"-conversationIdentifier",
	"-doCommandBySelector:",
	"-firstRectForCharacterRange:",
	"-insertText:"
    );
    "(NSTextInputClient)" = (
	"-hasMarkedText",
	"-markedRange",
	"-selectedRange",
	"-setMarkedText:selectedRange:replacementRange:",
	"-unmarkText",
	"-validAttributesForMarkedText",
	"-attributedSubstringForProposedRange:actualRange:",
	"-insertText:replacementRange:",
	"-characterIndexForPoint:",
	"-firstRectForCharacterRange:actualRange:",
	"-doCommandBySelector:",
	"-attributedString",
	"-fractionOfDistanceThroughGlyphForPoint:",
	"-baselineDeltaForCharacterAtIndex:",
	"-windowLevel",
	"-drawsVerticallyForCharacterAtIndex:"
    );
    "(NSTextInputTraits)" = (
	"-autocorrectionType",
	"-setAutocorrectionType:",
	"-spellCheckingType",
	"-setSpellCheckingType:",
	"-grammarCheckingType",
	"-setGrammarCheckingType:",
	"-smartQuotesType",
	"-setSmartQuotesType:",
	"-smartDashesType",
	"-setSmartDashesType:",
	"-smartInsertDeleteType",
	"-setSmartInsertDeleteType:",
	"-textReplacementType",
	"-setTextReplacementType:",
	"-dataDetectionType",
	"-setDataDetectionType:",
	"-linkDetectionType",
	"-setLinkDetectionType:",
	"-textCompletionType",
	"-setTextCompletionType:"
    );
    "(NSUserInterfaceCompression)" = (
	"-compressWithPrioritizedCompressionOptions:",
	"-minimumSizeWithPrioritizedCompressionOptions:",
	"-activeCompressionOptions"
    );
    "(NSUserInterfaceItemIdentification)" = (
	"-identifier",
	"-setIdentifier:",
	"-identifier",
	"-setIdentifier:"
    );
    "(NSUserInterfaceItemSearching)" = (
	"-searchForItemsWithSearchString:resultLimit:matchedItemHandler:",
	"-localizedTitlesForItem:",
	"-performActionForItem:",
	"-showAllHelpTopicsForSearchString:"
    );
    "(NSUserInterfaceValidations)" = (
	"-validateUserInterfaceItem:"
    );
    "(NSValidatedUserInterfaceItem)" = (
	"-action",
	"-tag"
    );
    "(NSWindowRestoration)" = (
	"+restoreWindowWithIdentifier:state:completionHandler:"
    );
    NSAccessibilityCustomAction = (
	"-initWithName:handler:",
	"-initWithName:target:selector:",
	"-name",
	"-setName:",
	"-handler",
	"-setHandler:",
	"-target",
	"-setTarget:",
	"-selector",
	"-setSelector:"
    );
    NSAccessibilityCustomRotor = (
	"-initWithLabel:itemSearchDelegate:",
	"-initWithRotorType:itemSearchDelegate:",
	"-type",
	"-setType:",
	"-label",
	"-setLabel:",
	"-itemSearchDelegate",
	"-setItemSearchDelegate:",
	"-itemLoadingDelegate",
	"-setItemLoadingDelegate:"
    );
    NSAccessibilityCustomRotorItemResult = (
	"-initWithTargetElement:",
	"-initWithItemLoadingToken:customLabel:",
	"-targetElement",
	"-itemLoadingToken",
	"-targetRange",
	"-customLabel"
    );
    "NSAffineTransform(GNUstep)" = (
	"-translateToPoint:",
	"-scaleTo::",
	"-makeIdentityMatrix",
	"-rotationAngle",
	"-setFrameOrigin:",
	"-setFrameRotation:",
	"-inverse",
	"-isRotated",
	"-boundingRectFor:result:",
	"-concatenateWith:",
	"-concatenateWithMatrix:",
	"-pointInMatrixSpace:",
	"-deltaPointInMatrixSpace:",
	"-sizeInMatrixSpace:",
	"-rectInMatrixSpace:",
	"-setMatrix:",
	"-getMatrix:",
	"-takeMatrixFromTransform:"
    );
    "NSAffineTransform(GUIAdditions)" = (
	"-concat",
	"-set",
	"-transformBezierPath:"
    );
    NSAlert = (
	"+alertWithError:",
	"+alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:,...",
	"-addButtonWithTitle:",
	"-alertStyle",
	"-beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:",
	"-buttons",
	"-delegate",
	"-helpAnchor",
	"-icon",
	"-informativeText",
	"-messageText",
	"-runModal",
	"-setAlertStyle:",
	"-setDelegate:",
	"-setHelpAnchor:",
	"-setIcon:",
	"-setInformativeText:",
	"-setMessageText:",
	"-setShowsHelp:",
	"-showsHelp",
	"-window",
	"-beginSheetModalForWindow:completionHandler:"
    );
    NSAnimation = (
	"-addProgressMark:",
	"-animationBlockingMode",
	"-animationCurve",
	"-clearStartAnimation",
	"-clearStopAnimation",
	"-currentProgress",
	"-currentValue",
	"-delegate",
	"-duration",
	"-frameRate",
	"-initWithDuration:animationCurve:",
	"-isAnimating",
	"-progressMarks",
	"-removeProgressMark:",
	"-runLoopModesForAnimating",
	"-setAnimationBlockingMode:",
	"-setAnimationCurve:",
	"-setCurrentProgress:",
	"-setDelegate:",
	"-setDuration:",
	"-setFrameRate:",
	"-setProgressMarks:",
	"-startAnimation",
	"-startWhenAnimation:reachesProgress:",
	"-stopAnimation",
	"-stopWhenAnimation:reachesProgress:"
    );
    "NSAnimation(GNUstep)" = (
	"-frameCount",
	"-resetCounters",
	"-actualFrameRate"
    );
    NSAnimationContext = (
	"+beginGrouping",
	"+endGrouping",
	"+currentContext",
	"+runAnimationGroup:completionHandler:",
	"-setDuration:",
	"-duration",
	"-completionHandler",
	"-setCompletionHandler:"
    );
    NSAppearance = (
	"+appearanceNamed:",
	"-initWithAppearanceNamed:bundle:",
	"-name",
	"-bestMatchFromAppearancesWithNames:",
	"+setCurrentAppearance:",
	"+currentAppearance",
	"-allowsVibrancy"
    );
    NSApplication = (
	"+detachDrawingThread:toTarget:withObject:",
	"+sharedApplication",
	"-finishLaunching",
	"-activateIgnoringOtherApps:",
	"-deactivate",
	"-isActive",
	"-hideOtherApplications:",
	"-unhideAllApplications:",
	"-abortModal",
	"-beginModalSessionForWindow:",
	"-endModalSession:",
	"-isRunning",
	"-run",
	"-runModalForWindow:",
	"-runModalSession:",
	"-modalWindow",
	"-sendEvent:",
	"-stop:",
	"-stopModal",
	"-stopModalWithCode:",
	"-runModalForWindow:relativeToWindow:",
	"-beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
	"-endSheet:",
	"-endSheet:returnCode:",
	"-currentEvent",
	"-discardEventsMatchingMask:beforeEvent:",
	"-nextEventMatchingMask:untilDate:inMode:dequeue:",
	"-postEvent:atStart:",
	"-sendAction:to:from:",
	"-targetForAction:",
	"-targetForAction:to:from:",
	"-tryToPerform:with:",
	"-setApplicationIconImage:",
	"-applicationIconImage",
	"-hide:",
	"-isHidden",
	"-unhide:",
	"-unhideWithoutActivation",
	"-keyWindow",
	"-mainWindow",
	"-makeWindowsPerform:inOrder:",
	"-miniaturizeAll:",
	"-preventWindowOrdering",
	"-setWindowsNeedUpdate:",
	"-updateWindows",
	"-windows",
	"-windowWithWindowNumber:",
	"-orderFrontStandardInfoPanel:",
	"-orderFrontStandardInfoPanelWithOptions:",
	"-orderFrontStandardAboutPanel:",
	"-orderFrontStandardAboutPanelWithOptions:",
	"-mainMenu",
	"-setMainMenu:",
	"-setAppleMenu:",
	"-addWindowsItem:title:filename:",
	"-arrangeInFront:",
	"-changeWindowsItem:title:filename:",
	"-removeWindowsItem:",
	"-setWindowsMenu:",
	"-updateWindowsItem:",
	"-windowsMenu",
	"-registerServicesMenuSendTypes:returnTypes:",
	"-servicesMenu",
	"-servicesProvider",
	"-setServicesMenu:",
	"-setServicesProvider:",
	"-validRequestorForSendType:returnType:",
	"-context",
	"-reportException:",
	"-replyToApplicationShouldTerminate:",
	"-replyToOpenOrPrint:",
	"-terminate:",
	"-delegate",
	"-setDelegate:",
	"-orderedDocuments",
	"-orderedWindows",
	"-cancelUserAttentionRequest:",
	"-requestUserAttention:",
	"-currentPresentationOptions",
	"-presentationOptions",
	"-setPresentationOptions:"
    );
    "NSApplication(CharacterPanel)" = (
	"-orderFrontCharacterPalette:"
    );
    "NSApplication(GSGUIInternal)" = (
	"-_windowWillDealloc:"
    );
    "NSApplication(NSColorPanel)" = (
	"-orderFrontColorPanel:"
    );
    "NSApplication(NSDataLinkPanel)" = (
	"-orderFrontDataLinkPanel:"
    );
    "NSApplication(NSHelpManager)" = (
	"-showHelp:",
	"-activateContextHelpMode:"
    );
    "NSApplication(NSHelpPanel)" = (
	"-orderFrontHelpPanel:"
    );
    "NSApplication(NSPageLayout)" = (
	"-runPageLayout:"
    );
    "NSApplication(NSUserInterfaceItemSearching)" = (
	"-registerUserInterfaceItemSearchHandler:",
	"-unregisterUserInterfaceItemSearchHandler:",
	"-searchString:inUserInterfaceItemString:searchRange:foundRange:"
    );
    NSArrayController = (
	"-addObject:",
	"-addObjects:",
	"-removeObject:",
	"-removeObjects:",
	"-canInsert",
	"-insert:",
	"-addSelectedObjects:",
	"-addSelectionIndexes:",
	"-setSelectedObjects:",
	"-setSelectionIndex:",
	"-setSelectionIndexes:",
	"-removeSelectedObjects:",
	"-removeSelectionIndexes:",
	"-canSelectNext",
	"-canSelectPrevious",
	"-selectNext:",
	"-selectPrevious:",
	"-selectedObjects",
	"-selectionIndex",
	"-selectionIndexes",
	"-avoidsEmptySelection",
	"-setAvoidsEmptySelection:",
	"-preservesSelection",
	"-setPreservesSelection:",
	"-selectsInsertedObjects",
	"-setSelectsInsertedObjects:",
	"-alwaysUsesMultipleValuesMarker",
	"-setAlwaysUsesMultipleValuesMarker:",
	"-clearsFilterPredicateOnInsertion",
	"-setClearsFilterPredicateOnInsertion:",
	"-automaticallyRearrangesObjects",
	"-setAutomaticallyRearrangesObjects:",
	"-arrangeObjects:",
	"-arrangedObjects",
	"-rearrangeObjects",
	"-setSortDescriptors:",
	"-sortDescriptors",
	"-setFilterPredicate:",
	"-filterPredicate",
	"-insertObject:atArrangedObjectIndex:",
	"-insertObjects:atArrangedObjectIndexes:",
	"-removeObjectAtArrangedObjectIndex:",
	"-removeObjectsAtArrangedObjectIndexes:"
    );
    "NSAttributedString(AppKit)" = (
	"-containsAttachments",
	"-fontAttributesInRange:",
	"-rulerAttributesInRange:",
	"-lineBreakBeforeIndex:withinRange:",
	"-doubleClickAtIndex:",
	"-nextWordFromIndex:forward:",
	"-initWithRTF:documentAttributes:",
	"-initWithRTFD:documentAttributes:",
	"-initWithPath:documentAttributes:",
	"-initWithURL:documentAttributes:",
	"-initWithRTFDFileWrapper:documentAttributes:",
	"-initWithHTML:documentAttributes:",
	"-initWithHTML:baseURL:documentAttributes:",
	"-RTFFromRange:documentAttributes:",
	"-RTFDFromRange:documentAttributes:",
	"-RTFDFileWrapperFromRange:documentAttributes:",
	"+textFileTypes",
	"+textPasteboardTypes",
	"+textUnfilteredFileTypes",
	"+textUnfilteredPasteboardTypes",
	"+textTypes",
	"+textUnfilteredTypes",
	"-docFormatFromRange:documentAttributes:",
	"-initWithDocFormat:documentAttributes:",
	"-initWithHTML:options:documentAttributes:",
	"-lineBreakByHyphenatingBeforeIndex:withinRange:",
	"-dataFromRange:documentAttributes:error:",
	"-fileWrapperFromRange:documentAttributes:error:",
	"-initWithData:options:documentAttributes:error:",
	"-initWithURL:options:documentAttributes:error:",
	"-itemNumberInTextList:atIndex:",
	"-rangeOfTextBlock:atIndex:",
	"-rangeOfTextList:atIndex:",
	"-rangeOfTextTable:atIndex:"
    );
    "NSAttributedString(NSStringDrawing)" = (
	"-size",
	"-drawAtPoint:",
	"-drawInRect:",
	"-boundingRectWithSize:options:",
	"-drawWithRect:options:"
    );
    "NSAttributedString(NSTextAttachment)" = (
	"+attributedStringWithAttachment:",
	"-containsAttachments"
    );
    NSBezierPath = (
	"+bezierPath",
	"+bezierPathWithRect:",
	"+bezierPathWithOvalInRect:",
	"+bezierPathWithRoundedRect:xRadius:yRadius:",
	"+fillRect:",
	"+strokeRect:",
	"+clipRect:",
	"+strokeLineFromPoint:toPoint:",
	"+drawPackedGlyphs:atPoint:",
	"+setDefaultMiterLimit:",
	"+defaultMiterLimit",
	"+setDefaultFlatness:",
	"+defaultFlatness",
	"+setDefaultWindingRule:",
	"+defaultWindingRule",
	"+setDefaultLineCapStyle:",
	"+defaultLineCapStyle",
	"+setDefaultLineJoinStyle:",
	"+defaultLineJoinStyle",
	"+setDefaultLineWidth:",
	"+defaultLineWidth",
	"-moveToPoint:",
	"-lineToPoint:",
	"-curveToPoint:controlPoint1:controlPoint2:",
	"-closePath",
	"-removeAllPoints",
	"-relativeMoveToPoint:",
	"-relativeLineToPoint:",
	"-relativeCurveToPoint:controlPoint1:controlPoint2:",
	"-lineWidth",
	"-setLineWidth:",
	"-lineCapStyle",
	"-setLineCapStyle:",
	"-lineJoinStyle",
	"-setLineJoinStyle:",
	"-windingRule",
	"-setWindingRule:",
	"-setFlatness:",
	"-flatness",
	"-setMiterLimit:",
	"-miterLimit",
	"-getLineDash:count:phase:",
	"-setLineDash:count:phase:",
	"-stroke",
	"-fill",
	"-addClip",
	"-setClip",
	"-bezierPathByFlatteningPath",
	"-bezierPathByReversingPath",
	"-transformUsingAffineTransform:",
	"-isEmpty",
	"-currentPoint",
	"-controlPointBounds",
	"-bounds",
	"-elementCount",
	"-elementAtIndex:associatedPoints:",
	"-elementAtIndex:",
	"-setAssociatedPoints:atIndex:",
	"-appendBezierPath:",
	"-appendBezierPathWithRect:",
	"-appendBezierPathWithPoints:count:",
	"-appendBezierPathWithOvalInRect:",
	"-appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:",
	"-appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:",
	"-appendBezierPathWithArcFromPoint:toPoint:radius:",
	"-appendBezierPathWithGlyph:inFont:",
	"-appendBezierPathWithGlyphs:count:inFont:",
	"-appendBezierPathWithPackedGlyphs:",
	"-appendBezierPathWithRoundedRect:xRadius:yRadius:",
	"-windingCountAtPoint:",
	"-containsPoint:",
	"-cachesBezierPath",
	"-setCachesBezierPath:"
    );
    NSBitmapImageRep = (
	"+imageRepWithData:",
	"+imageRepsWithData:",
	"-initWithData:",
	"-initWithFocusedViewRect:",
	"-initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:",
	"-colorizeByMappingGray:toColor:blackMapping:whiteMapping:",
	"-initWithBitmapHandle:",
	"-initWithIconHandle:",
	"-incrementalLoadFromData:complete:",
	"-initForIncrementalLoad",
	"-initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:",
	"-bitsPerPixel",
	"-samplesPerPixel",
	"-isPlanar",
	"-numberOfPlanes",
	"-bytesPerPlane",
	"-bytesPerRow",
	"-bitmapData",
	"-getBitmapDataPlanes:",
	"-bitmapFormat",
	"-getPixel:atX:y:",
	"-setPixel:atX:y:",
	"-colorAtX:y:",
	"-setColor:atX:y:",
	"+TIFFRepresentationOfImageRepsInArray:",
	"+TIFFRepresentationOfImageRepsInArray:usingCompression:factor:",
	"-TIFFRepresentation",
	"-TIFFRepresentationUsingCompression:factor:",
	"+representationOfImageRepsInArray:usingType:properties:",
	"-representationUsingType:properties:",
	"+getTIFFCompressionTypes:count:",
	"+localizedNameForTIFFCompressionType:",
	"-canBeCompressedUsing:",
	"-getCompression:factor:",
	"-setCompression:factor:",
	"-setProperty:withValue:",
	"-valueForProperty:"
    );
    "NSBitmapImageRep(GNUstepExtension)" = (
	"+imageRepsWithFile:"
    );
    NSBox = (
	"-borderRect",
	"-borderType",
	"-setBorderType:",
	"-setTitle:",
	"-setTitleFont:",
	"-setTitlePosition:",
	"-title",
	"-titleCell",
	"-titleFont",
	"-titlePosition",
	"-titleRect",
	"-setTitleWithMnemonic:",
	"-boxType",
	"-setBoxType:",
	"-contentView",
	"-contentViewMargins",
	"-setContentView:",
	"-setContentViewMargins:",
	"-setFrameFromContentFrame:",
	"-sizeToFit",
	"-minimumSize",
	"-fillColor",
	"-setFillColor:",
	"-borderColor",
	"-setBorderColor:",
	"-borderWidth",
	"-setBorderWidth:",
	"-cornerRadius",
	"-setCornerRadius:",
	"-isTransparent",
	"-setTransparent:"
    );
    NSBrowser = (
	"-delegate",
	"-setDelegate:",
	"-doubleAction",
	"-sendAction",
	"-setDoubleAction:",
	"+cellClass",
	"-cellPrototype",
	"-matrixClass",
	"-setCellClass:",
	"-setCellPrototype:",
	"-setMatrixClass:",
	"-reusesColumns",
	"-setReusesColumns:",
	"-setTakesTitleFromPreviousColumn:",
	"-takesTitleFromPreviousColumn",
	"-autohidesScroller",
	"-setAutohidesScroller:",
	"-backgroundColor",
	"-setBackgroundColor:",
	"-canDragRowsWithIndexes:inColumn:withEvent:",
	"-allowsBranchSelection",
	"-allowsEmptySelection",
	"-allowsMultipleSelection",
	"-setAllowsBranchSelection:",
	"-setAllowsEmptySelection:",
	"-setAllowsMultipleSelection:",
	"-acceptsArrowKeys",
	"-sendsActionOnArrowKeys",
	"-setAcceptsArrowKeys:",
	"-setSendsActionOnArrowKeys:",
	"-allowsTypeSelect",
	"-setAllowsTypeSelect:",
	"-setHasHorizontalScroller:",
	"-hasHorizontalScroller",
	"-maxVisibleColumns",
	"-minColumnWidth",
	"-separatesColumns",
	"-setMaxVisibleColumns:",
	"-setMinColumnWidth:",
	"-setSeparatesColumns:",
	"-columnWidthForColumnContentWidth:",
	"-columnContentWidthForColumnWidth:",
	"-addColumn",
	"-columnOfMatrix:",
	"-displayAllColumns",
	"-displayColumn:",
	"-firstVisibleColumn",
	"-isLoaded",
	"-lastColumn",
	"-lastVisibleColumn",
	"-loadColumnZero",
	"-numberOfVisibleColumns",
	"-reloadColumn:",
	"-selectAll:",
	"-selectRow:inColumn:",
	"-selectedColumn",
	"-selectedRowInColumn:",
	"-setLastColumn:",
	"-validateVisibleColumns",
	"-selectionIndexPath",
	"-selectionIndexPaths",
	"-setSelectionIndexPath:",
	"-setSelectionIndexPaths:",
	"-drawTitle:inRect:ofColumn:",
	"-drawTitleOfColumn:inRect:",
	"-isTitled",
	"-setTitled:",
	"-setTitle:ofColumn:",
	"-titleFrameOfColumn:",
	"-titleHeight",
	"-titleOfColumn:",
	"-scrollColumnsLeftBy:",
	"-scrollColumnsRightBy:",
	"-scrollColumnToVisible:",
	"-scrollViaScroller:",
	"-updateScroller",
	"-scrollRowToVisible:inColumn:",
	"-doClick:",
	"-doDoubleClick:",
	"-clickedColumn",
	"-clickedRow",
	"-loadedCellAtRow:column:",
	"-matrixInColumn:",
	"-selectedCell",
	"-selectedCellInColumn:",
	"-selectedCells",
	"-frameOfColumn:",
	"-frameOfInsideOfColumn:",
	"-path",
	"-pathSeparator",
	"-pathToColumn:",
	"-setPath:",
	"-setPathSeparator:",
	"-tile",
	"-columnResizingType",
	"-setColumnResizingType:",
	"-prefersAllColumnUserResizing",
	"-setPrefersAllColumnUserResizing:",
	"-widthOfColumn:",
	"-setWidth:ofColumn:",
	"+removeSavedColumnsWithAutosaveName:",
	"-columnsAutosaveName",
	"-setColumnsAutosaveName:"
    );
    "NSBrowser(GNUstepExtensions)" = (
	"-acceptsAlphaNumericalKeys",
	"-setAcceptsAlphaNumericalKeys:",
	"-sendsActionOnAlphaNumericalKeys",
	"-setSendsActionOnAlphaNumericalKeys:"
    );
    NSBrowserCell = (
	"+branchImage",
	"+highlightedBranchImage",
	"-alternateImage",
	"-setAlternateImage:",
	"-highlightColorInView:",
	"-isLeaf",
	"-setLeaf:",
	"-isLoaded",
	"-setLoaded:",
	"-reset",
	"-set"
    );
    "NSBundle(NSHelpManager)" = (
	"-pathForHelpResource:",
	"-contextHelpForKey:"
    );
    "NSBundle(NSImageAdditions)" = (
	"-pathForImageResource:"
    );
    "NSBundle(NSNibLoading)" = (
	"+loadNibFile:externalNameTable:withZone:",
	"+loadNibNamed:owner:",
	"-loadNibFile:externalNameTable:withZone:",
	"-loadNibNamed:owner:topLevelObjects:",
	"-pathForNibResource:"
    );
    "NSBundle(NSSoundAdditions)" = (
	"-pathForSoundResource:"
    );
    NSButton = (
	"-setButtonType:",
	"-setHighlightsBy:",
	"-setShowsStateBy:",
	"-setState:",
	"-state",
	"-allowsMixedState",
	"-setAllowsMixedState:",
	"-setNextState",
	"-getPeriodicDelay:interval:",
	"-setPeriodicDelay:interval:",
	"-alternateTitle",
	"-setAlternateTitle:",
	"-setTitle:",
	"-title",
	"-attributedAlternateTitle",
	"-attributedTitle",
	"-setAttributedAlternateTitle:",
	"-setAttributedTitle:",
	"-setTitleWithMnemonic:",
	"-alternateImage",
	"-image",
	"-imagePosition",
	"-setAlternateImage:",
	"-setImage:",
	"-setImagePosition:",
	"-isBordered",
	"-isTransparent",
	"-setBordered:",
	"-setTransparent:",
	"-bezelStyle",
	"-setBezelStyle:",
	"-setShowsBorderOnlyWhileMouseInside:",
	"-showsBorderOnlyWhileMouseInside",
	"-highlight:",
	"-keyEquivalent",
	"-keyEquivalentModifierMask",
	"-setKeyEquivalent:",
	"-setKeyEquivalentModifierMask:",
	"-performKeyEquivalent:",
	"-setSound:",
	"-sound"
    );
    NSButtonCell = (
	"-alternateTitle",
	"-setAlternateTitle:",
	"-setFont:",
	"-setTitle:",
	"-title",
	"-attributedAlternateTitle",
	"-attributedTitle",
	"-setAttributedAlternateTitle:",
	"-setAttributedTitle:",
	"-setTitleWithMnemonic:",
	"-alternateMnemonic",
	"-alternateMnemonicLocation",
	"-setAlternateMnemonicLocation:",
	"-setAlternateTitleWithMnemonic:",
	"-alternateImage",
	"-imagePosition",
	"-setAlternateImage:",
	"-setImagePosition:",
	"-imageScaling",
	"-setImageScaling:",
	"-getPeriodicDelay:interval:",
	"-setPeriodicDelay:interval:",
	"-keyEquivalent",
	"-keyEquivalentFont",
	"-keyEquivalentModifierMask",
	"-setKeyEquivalent:",
	"-setKeyEquivalentModifierMask:",
	"-setKeyEquivalentFont:",
	"-setKeyEquivalentFont:size:",
	"-isTransparent",
	"-setTransparent:",
	"-bezelStyle",
	"-setBezelStyle:",
	"-showsBorderOnlyWhileMouseInside",
	"-setShowsBorderOnlyWhileMouseInside:",
	"-gradientType",
	"-setGradientType:",
	"-imageDimsWhenDisabled",
	"-setImageDimsWhenDisabled:",
	"-backgroundColor",
	"-setBackgroundColor:",
	"-drawBezelWithFrame:inView:",
	"-drawImage:withFrame:inView:",
	"-drawTitle:withFrame:inView:",
	"-highlightsBy",
	"-setHighlightsBy:",
	"-setShowsStateBy:",
	"-setButtonType:",
	"-showsStateBy",
	"-setSound:",
	"-sound",
	"-mouseEntered:",
	"-mouseExited:"
    );
    NSCachedImageRep = (
	"-initWithSize:pixelsWide:pixelsHigh:depth:separate:alpha:",
	"-initWithSize:depth:separate:alpha:",
	"-initWithWindow:rect:",
	"-rect",
	"-window"
    );
    NSCell = (
	"+defaultFocusRingType",
	"+defaultMenu",
	"+prefersTrackingUntilMouseUp",
	"-initImageCell:",
	"-initTextCell:",
	"-objectValue",
	"-hasValidObjectValue",
	"-doubleValue",
	"-floatValue",
	"-intValue",
	"-stringValue",
	"-setObjectValue:",
	"-setDoubleValue:",
	"-setFloatValue:",
	"-setIntValue:",
	"-setStringValue:",
	"-integerValue",
	"-setIntegerValue:",
	"-takeIntegerValueFrom:",
	"-cellAttribute:",
	"-setCellAttribute:to:",
	"-setType:",
	"-type",
	"-isEnabled",
	"-setEnabled:",
	"-isBezeled",
	"-isBordered",
	"-isOpaque",
	"-setBezeled:",
	"-setBordered:",
	"-focusRingType",
	"-setFocusRingType:",
	"-userInterfaceLayoutDirection",
	"-setUserInterfaceLayoutDirection:",
	"-userInterfaceLayoutDirection",
	"-setUserInterfaceLayoutDirection:",
	"-setState:",
	"-state",
	"-allowsMixedState",
	"-setAllowsMixedState:",
	"-nextState",
	"-setNextState",
	"-alignment",
	"-font",
	"-isEditable",
	"-isSelectable",
	"-isScrollable",
	"-setAlignment:",
	"-setEditable:",
	"-setFont:",
	"-setSelectable:",
	"-setScrollable:",
	"-setWraps:",
	"-wraps",
	"-setUpFieldEditorAttributes:",
	"-setAttributedStringValue:",
	"-attributedStringValue",
	"-setAllowsEditingTextAttributes:",
	"-allowsEditingTextAttributes",
	"-setImportsGraphics:",
	"-importsGraphics",
	"-setTitle:",
	"-title",
	"-baseWritingDirection",
	"-setBaseWritingDirection:",
	"-lineBreakMode",
	"-setLineBreakMode:",
	"-setUsesSingleLineMode:",
	"-usesSingleLineMode",
	"-action",
	"-isContinuous",
	"-sendActionOn:",
	"-setAction:",
	"-setContinuous:",
	"-setTarget:",
	"-target",
	"-image",
	"-setImage:",
	"-setTag:",
	"-tag",
	"-setFormatter:",
	"-formatter",
	"-entryType",
	"-isEntryAcceptable:",
	"-setEntryType:",
	"-setFloatingPointFormat:left:right:",
	"-setMenu:",
	"-menu",
	"-menuForEvent:inRect:ofView:",
	"-compare:",
	"-acceptsFirstResponder",
	"-setShowsFirstResponder:",
	"-showsFirstResponder",
	"-setTitleWithMnemonic:",
	"-mnemonic",
	"-setMnemonicLocation:",
	"-mnemonicLocation",
	"-refusesFirstResponder",
	"-setRefusesFirstResponder:",
	"-performClick:",
	"-performClickWithFrame:inView:",
	"-takeObjectValueFrom:",
	"-takeDoubleValueFrom:",
	"-takeFloatValueFrom:",
	"-takeIntValueFrom:",
	"-takeStringValueFrom:",
	"-representedObject",
	"-setRepresentedObject:",
	"-continueTracking:at:inView:",
	"-mouseDownFlags",
	"-getPeriodicDelay:interval:",
	"-startTrackingAt:inView:",
	"-stopTracking:at:inView:mouseIsUp:",
	"-trackMouse:inRect:ofView:untilMouseUp:",
	"-backgroundStyle",
	"-setBackgroundStyle:",
	"-hitTestForEvent:inRect:ofView:",
	"-hitTestForEvent:inRect:ofView:",
	"-resetCursorRect:inView:",
	"-keyEquivalent",
	"-calcDrawInfo:",
	"-cellSize",
	"-cellSizeForBounds:",
	"-drawingRectForBounds:",
	"-imageRectForBounds:",
	"-titleRectForBounds:",
	"-setControlSize:",
	"-controlSize",
	"-controlView",
	"-drawInteriorWithFrame:inView:",
	"-drawWithFrame:inView:",
	"-highlight:withFrame:inView:",
	"-isHighlighted",
	"-setHighlighted:",
	"-highlightColorWithFrame:inView:",
	"-setControlTint:",
	"-controlTint",
	"-setControlView:",
	"-editWithFrame:inView:editor:delegate:event:",
	"-selectWithFrame:inView:editor:delegate:start:length:",
	"-endEditing:",
	"-sendsActionOnEndEditing",
	"-setSendsActionOnEndEditing:",
	"-allowsUndo",
	"-setAllowsUndo:"
    );
    "NSCell(PrivateMethods)" = (
	"-_nonAutoreleasedTypingAttributes",
	"-textColor",
	"-_sizeText:",
	"-_drawText:inFrame:",
	"-_drawAttributedText:inFrame:",
	"-_sendsActionOn:",
	"-_drawAttributedString",
	"-_drawBorderAndBackgroundWithFrame:inView:",
	"-_drawFocusRingWithFrame:inView:",
	"-_drawEditorWithFrame:inView:",
	"-_setInEditing:",
	"-_updateFieldEditor:"
    );
    NSClipView = (
	"-setDocumentView:",
	"-documentView",
	"-scrollToPoint:",
	"-autoscroll:",
	"-constrainScrollPoint:",
	"-setCopiesOnScroll:",
	"-copiesOnScroll",
	"-documentRect",
	"-documentVisibleRect",
	"-setDocumentCursor:",
	"-documentCursor",
	"-setBackgroundColor:",
	"-backgroundColor",
	"-setDrawsBackground:",
	"-drawsBackground"
    );
    "NSCoder(NSCoderAdditions)" = (
	"-decodeNXColor"
    );
    NSCollectionView = (
	"-allowsMultipleSelection",
	"-setAllowsMultipleSelection:",
	"-backgroundColors",
	"-setBackgroundColors:",
	"-content",
	"-setContent:",
	"-delegate",
	"-setDelegate:",
	"-itemPrototype",
	"-setItemPrototype:",
	"-maxItemSize",
	"-setMaxItemSize:",
	"-maxNumberOfColumns",
	"-setMaxNumberOfColumns:",
	"-maxNumberOfRows",
	"-setMaxNumberOfRows:",
	"-minItemSize",
	"-setMinItemSize:",
	"-isSelectable",
	"-setSelectable:",
	"-selectionIndexes",
	"-setSelectionIndexes:",
	"-selectionIndexPaths",
	"-setSelectionIndexPaths:",
	"-collectionViewLayout",
	"-setCollectionViewLayout:",
	"-frameForItemAtIndex:",
	"-itemAtIndex:",
	"-newItemForRepresentedObject:",
	"-tile",
	"-setDraggingSourceOperationMask:forLocal:",
	"-draggingImageForItemsAtIndexes:withEvent:offset:",
	"-visibleItems",
	"-indexPathsForVisibleItems",
	"-visibleSupplementaryViewsOfKind:",
	"-indexPathsForVisibleSupplementaryElementsOfKind:",
	"-indexPathForItem:",
	"-indexPathForItemAtPoint:",
	"-itemAtIndexPath:",
	"-supplementaryViewForElementKind:atIndexPath:",
	"-scrollToItemsAtIndexPaths:scrollPosition:",
	"-makeItemWithIdentifier:forIndexPath:",
	"-registerClass:forItemWithIdentifier:",
	"-registerNib:forItemWithIdentifier:",
	"-makeSupplementaryViewOfKind:withIdentifier:forIndexPath:",
	"-registerClass:forSupplementaryViewOfKind:withIdentifier:",
	"-registerNib:forSupplementaryViewOfKind:withIdentifier:",
	"-dataSource",
	"-setDataSource:",
	"-backgroundView",
	"-setBackgroundView:",
	"-backgroundViewScrollsWithContent",
	"-setBackgroundViewScrollsWithContent:",
	"-reloadData",
	"-reloadSections:",
	"-reloadItemsAtIndexPaths:",
	"-prefetchDataSource",
	"-setPrefetchDataSource:",
	"-numberOfSections",
	"-numberOfItemsInSection:",
	"-insertItemsAtIndexPaths:",
	"-moveItemAtIndexPath:toIndexPath:",
	"-deleteItemsAtIndexPaths:",
	"-insertSections:",
	"-moveSection:toSection:",
	"-deleteSections:",
	"-toggleSectionCollapse:",
	"-allowsEmptySelection",
	"-setAllowsEmptySelection:",
	"-selectionIndexPaths",
	"-selectAll:",
	"-deselectAll:",
	"-selectItemsAtIndexPaths:scrollPosition:",
	"-deselectItemsAtIndexPaths:",
	"-layoutAttributesForItemAtIndexPath:",
	"-layoutAttributesForSupplementaryElementOfKind:atIndexPath:",
	"-performBatchUpdates:completionHandler:"
    );
    NSCollectionViewFlowLayout = (
	"-minimumLineSpacing",
	"-setMinimumLineSpacing:",
	"-minimumInteritemSpacing",
	"-setMinimumInteritemSpacing:",
	"-itemSize",
	"-setItemSize:",
	"-estimatedItemSize",
	"-setEstimatedItemSize:",
	"-scrollDirection",
	"-setScrollDirection:",
	"-headerReferenceSize",
	"-setHeaderReferenceSize:",
	"-footerReferenceSize",
	"-setFooterReferenceSize:",
	"-sectionInset",
	"-setSectionInset:",
	"-sectionHeadersPinToVisibleBounds",
	"-setSectionHeadersPinToVisibleBounds:",
	"-sectionFootersPinToVisibleBounds",
	"-setSectionFootersPinToVisibleBounds:",
	"-sectionAtIndexIsCollapsed:",
	"-collapseSectionAtIndex:",
	"-expandSectionAtIndex:"
    );
    NSCollectionViewFlowLayoutInvalidationContext = (
	"-setInvalidateFlowLayoutDelegateMetrics:",
	"-invalidateFlowLayoutDelegateMetrics",
	"-setInvalidateFlowLayoutAttributes:",
	"-invalidateFlowLayoutAttributes"
    );
    NSCollectionViewGridLayout = (
	"-setMaximumNumberOfRows:",
	"-maximumNumberOfRows",
	"-setMaximumNumberOfColumns:",
	"-maximumNumberOfColumns",
	"-setMinimumItemSize:",
	"-minimumItemSize",
	"-setMaximumItemSize:",
	"-maximumItemSize",
	"-setMargins:",
	"-margins",
	"-setMinimumInteritemSpacing:",
	"-minimumInteritemSpacing"
    );
    NSCollectionViewItem = (
	"-collectionView",
	"-draggingImageComponents",
	"-setSelected:",
	"-isSelected",
	"-textField",
	"-setTextField:",
	"-imageView",
	"-setImageView:"
    );
    NSCollectionViewLayout = (
	"-invalidateLayout",
	"-invalidateLayoutWithContext:",
	"-registerClass:forDecorationViewOfKind:",
	"-registerNib:forDecorationViewOfKind:",
	"-collectionView",
	"-setCollectionView:"
    );
    "NSCollectionViewLayout(NSSubclassingHooks)" = (
	"-prepareLayout",
	"-layoutAttributesForElementsInRect:",
	"-layoutAttributesForItemAtIndexPath:",
	"-layoutAttributesForSupplementaryViewOfKind:atIndexPath:",
	"-layoutAttributesForDecorationViewOfKind:atIndexPath:",
	"-layoutAttributesForDropTargetAtPoint:",
	"-layoutAttributesForInterItemGapBeforeIndexPath:",
	"-shouldInvalidateLayoutForBoundsChange:",
	"-invalidationContextForBoundsChange:",
	"-shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:",
	"-invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:",
	"-targetContentOffsetForProposedContentOffset:withScrollingVelocity:",
	"-targetContentOffsetForProposedContentOffset:",
	"-collectionViewContentSize"
    );
    "NSCollectionViewLayout(NSUpdateSupportHooks)" = (
	"-prepareForCollectionViewUpdates:",
	"-finalizeCollectionViewUpdates",
	"-prepareForAnimatedBoundsChange:",
	"-finalizeAnimatedBoundsChange",
	"-prepareForTransitionToLayout:",
	"-prepareForTransitionFromLayout:",
	"-finalizeLayoutTransition",
	"-initialLayoutAttributesForAppearingItemAtIndexPath:",
	"-finalLayoutAttributesForDisappearingItemAtIndexPath:",
	"-initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:",
	"-finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:",
	"-initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:",
	"-finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:",
	"-indexPathsToDeleteForSupplementaryViewOfKind:",
	"-indexPathsToDeleteForDecorationViewOfKind:",
	"-indexPathsToInsertForSupplementaryViewOfKind:",
	"-indexPathsToInsertForDecorationViewOfKind:"
    );
    NSCollectionViewLayoutAttributes = (
	"+layoutAttributesForItemWithIndexPath:",
	"+layoutAttributesForInterItemGapBeforeIndexPath:",
	"+layoutAttributesForSupplementaryViewOfKind:withIndexPath:",
	"+layoutAttributesForDecorationViewOfKind:withIndexPath:",
	"-frame",
	"-setFrame:",
	"-size",
	"-setSize:",
	"-alpha",
	"-setAlpha:",
	"-isHidden",
	"-setHidden:",
	"-indexPath",
	"-setIndexPath:",
	"-representedElementCategory",
	"-representedElementKind",
	"-zIndex",
	"-setZIndex:"
    );
    NSCollectionViewLayoutInvalidationContext = (
	"-invalidateItemsAtIndexPaths:",
	"-invalidateSupplementaryElementsOfKind:atIndexPaths:",
	"-invalidateDecorationElementsOfKind:atIndexPaths:",
	"-invalidateEverything",
	"-invalidateDataSourceCounts",
	"-invalidatedItemIndexPaths",
	"-contentOffsetAdjustment",
	"-setContentOffsetAdjustment:",
	"-contentSizeAdjustment",
	"-setContentSizeAdjustment:",
	"-invalidatedSupplementaryIndexPaths",
	"-invalidatedDecorationIndexPaths"
    );
    NSCollectionViewTransitionLayout = (
	"-transitionProgress",
	"-setTransitionProgress:",
	"-currentLayout",
	"-nextLayout",
	"-initWithCurrentLayout:nextLayout:",
	"-updateValue:forAnimatedKey:",
	"-valueForAnimatedKey:"
    );
    NSCollectionViewUpdateItem = (
	"-indexPathBeforeUpdate",
	"-indexPathAfterUpdate",
	"-updateAction"
    );
    NSColor = (
	"+colorWithCalibratedHue:saturation:brightness:alpha:",
	"+colorWithCalibratedRed:green:blue:alpha:",
	"+colorWithCalibratedWhite:alpha:",
	"+colorWithCatalogName:colorName:",
	"+colorWithDeviceCyan:magenta:yellow:black:alpha:",
	"+colorWithDeviceHue:saturation:brightness:alpha:",
	"+colorWithDeviceRed:green:blue:alpha:",
	"+colorWithDeviceWhite:alpha:",
	"+blackColor",
	"+blueColor",
	"+brownColor",
	"+clearColor",
	"+cyanColor",
	"+darkGrayColor",
	"+grayColor",
	"+greenColor",
	"+lightGrayColor",
	"+magentaColor",
	"+orangeColor",
	"+purpleColor",
	"+redColor",
	"+whiteColor",
	"+yellowColor",
	"+ignoresAlpha",
	"+setIgnoresAlpha:",
	"-getCyan:magenta:yellow:black:alpha:",
	"-getHue:saturation:brightness:alpha:",
	"-getRed:green:blue:alpha:",
	"-getWhite:alpha:",
	"-alphaComponent",
	"-blackComponent",
	"-blueComponent",
	"-brightnessComponent",
	"-catalogNameComponent",
	"-colorNameComponent",
	"-cyanComponent",
	"-greenComponent",
	"-hueComponent",
	"-localizedCatalogNameComponent",
	"-localizedColorNameComponent",
	"-magentaComponent",
	"-redComponent",
	"-saturationComponent",
	"-whiteComponent",
	"-yellowComponent",
	"-colorSpaceName",
	"-colorUsingColorSpaceName:",
	"-colorUsingColorSpaceName:device:",
	"+colorWithColorSpace:components:count:",
	"-colorSpace",
	"-colorUsingColorSpace:",
	"-getComponents:",
	"-numberOfComponents",
	"-blendedColorWithFraction:ofColor:",
	"-colorWithAlphaComponent:",
	"+colorFromPasteboard:",
	"-writeToPasteboard:",
	"-drawSwatchInRect:",
	"-set",
	"-setFill",
	"-setStroke",
	"-highlightWithLevel:",
	"-shadowWithLevel:",
	"+colorWithPatternImage:",
	"+colorForControlTint:",
	"+currentControlTint",
	"+alternateSelectedControlColor",
	"+alternateSelectedControlTextColor",
	"+controlBackgroundColor",
	"+controlColor",
	"+controlHighlightColor",
	"+controlLightHighlightColor",
	"+controlShadowColor",
	"+controlDarkShadowColor",
	"+controlTextColor",
	"+disabledControlTextColor",
	"+gridColor",
	"+headerColor",
	"+headerTextColor",
	"+highlightColor",
	"+keyboardFocusIndicatorColor",
	"+knobColor",
	"+scrollBarColor",
	"+secondarySelectedControlColor",
	"+selectedControlColor",
	"+selectedControlTextColor",
	"+selectedKnobColor",
	"+selectedMenuItemColor",
	"+selectedMenuItemTextColor",
	"+selectedTextBackgroundColor",
	"+selectedTextColor",
	"+shadowColor",
	"+textBackgroundColor",
	"+textColor",
	"+windowBackgroundColor",
	"+windowFrameColor",
	"+windowFrameTextColor",
	"+labelColor",
	"+secondaryLabelColor",
	"+tertiaryLabelColor",
	"+quaternaryLabelColor",
	"+controlAlternatingRowBackgroundColors",
	"-patternImage",
	"+toolTipColor",
	"+toolTipTextColor",
	"+colorWithSRGBRed:green:blue:alpha:",
	"+colorWithGenericGamma22White:alpha:",
	"+colorWithRed:green:blue:alpha:",
	"+colorWithHue:saturation:brightness:alpha:",
	"+colorWithWhite:alpha:",
	"+systemBlueColor",
	"+systemBrownColor",
	"+systemGrayColor",
	"+systemGreenColor",
	"+systemOrangeColor",
	"+systemPinkColor",
	"+systemPurpleColor",
	"+systemRedColor",
	"+systemYellowColor",
	"+colorWithDisplayP3Red:green:blue:alpha:",
	"+colorWithColorSpace:hue:saturation:brightness:alpha:",
	"-colorUsingType:",
	"-type",
	"-colorWithSystemEffect:",
	"+systemIndigoColor",
	"+systemTealColor"
    );
    "NSColor(GSQuartz)" = (
	"-CGColor"
    );
    NSColorList = (
	"-initWithName:",
	"-initWithName:fromFile:",
	"+availableColorLists",
	"+colorListNamed:",
	"-allKeys",
	"-colorWithKey:",
	"-isEditable",
	"-insertColor:key:atIndex:",
	"-name",
	"-removeColorWithKey:",
	"-removeFile",
	"-setColor:forKey:",
	"-writeToFile:",
	"-encodeWithCoder:",
	"-initWithCoder:"
    );
    NSColorPanel = (
	"+sharedColorPanel",
	"+sharedColorPanelExists",
	"+setPickerMask:",
	"+setPickerMode:",
	"-accessoryView",
	"-isContinuous",
	"-mode",
	"-setAccessoryView:",
	"-setAction:",
	"-setContinuous:",
	"-setMode:",
	"-setShowsAlpha:",
	"-setTarget:",
	"-showsAlpha",
	"-attachColorList:",
	"-detachColorList:",
	"+dragColor:withEvent:fromView:",
	"-setColor:",
	"-alpha",
	"-color"
    );
    NSColorPicker = (
	"-initWithPickerMask:colorPanel:",
	"-colorPanel",
	"-insertNewButtonImage:in:",
	"-provideNewButtonImage",
	"-setMode:",
	"-attachColorList:",
	"-detachColorList:",
	"-alphaControlAddedOrRemoved:",
	"-viewSizeChanged:"
    );
    NSColorSampler = (
	"-showSamplerWithSelectionHandler:"
    );
    NSColorSpace = (
	"+deviceCMYKColorSpace",
	"+deviceGrayColorSpace",
	"+deviceRGBColorSpace",
	"+genericCMYKColorSpace",
	"+genericGrayColorSpace",
	"+genericRGBColorSpace",
	"-colorSpaceModel",
	"-colorSyncProfile",
	"-ICCProfileData",
	"-initWithColorSyncProfile:",
	"-initWithICCProfileData:",
	"-localizedName",
	"-numberOfColorComponents"
    );
    NSColorWell = (
	"-drawWellInside:",
	"-activate:",
	"-deactivate",
	"-isActive",
	"-color",
	"-setColor:",
	"-takeColorFrom:",
	"-isBordered",
	"-setBordered:",
	"-encodeWithCoder:",
	"-initWithCoder:"
    );
    NSComboBox = (
	"-hasVerticalScroller",
	"-setHasVerticalScroller:",
	"-intercellSpacing",
	"-setIntercellSpacing:",
	"-itemHeight",
	"-setItemHeight:",
	"-numberOfVisibleItems",
	"-setNumberOfVisibleItems:",
	"-reloadData",
	"-noteNumberOfItemsChanged",
	"-usesDataSource",
	"-setUsesDataSource:",
	"-scrollItemAtIndexToTop:",
	"-scrollItemAtIndexToVisible:",
	"-selectItemAtIndex:",
	"-deselectItemAtIndex:",
	"-indexOfSelectedItem",
	"-numberOfItems",
	"-dataSource",
	"-setDataSource:",
	"-addItemWithObjectValue:",
	"-addItemsWithObjectValues:",
	"-insertItemWithObjectValue:atIndex:",
	"-removeItemWithObjectValue:",
	"-removeItemAtIndex:",
	"-removeAllItems",
	"-selectItemWithObjectValue:",
	"-itemObjectValueAtIndex:",
	"-objectValueOfSelectedItem",
	"-indexOfItemWithObjectValue:",
	"-objectValues",
	"-setCompletes:",
	"-completes",
	"-isButtonBordered",
	"-setButtonBordered:"
    );
    NSComboBoxCell = (
	"-hasVerticalScroller",
	"-setHasVerticalScroller:",
	"-intercellSpacing",
	"-setIntercellSpacing:",
	"-itemHeight",
	"-setItemHeight:",
	"-numberOfVisibleItems",
	"-setNumberOfVisibleItems:",
	"-reloadData",
	"-noteNumberOfItemsChanged",
	"-usesDataSource",
	"-setUsesDataSource:",
	"-scrollItemAtIndexToTop:",
	"-scrollItemAtIndexToVisible:",
	"-selectItemAtIndex:",
	"-deselectItemAtIndex:",
	"-indexOfSelectedItem",
	"-numberOfItems",
	"-dataSource",
	"-setDataSource:",
	"-addItemWithObjectValue:",
	"-addItemsWithObjectValues:",
	"-insertItemWithObjectValue:atIndex:",
	"-removeItemWithObjectValue:",
	"-removeItemAtIndex:",
	"-removeAllItems",
	"-selectItemWithObjectValue:",
	"-itemObjectValueAtIndex:",
	"-objectValueOfSelectedItem",
	"-indexOfItemWithObjectValue:",
	"-objectValues",
	"-trackMouse:inRect:ofView:untilMouseUp:",
	"-completedString:",
	"-setCompletes:",
	"-completes",
	"-isButtonBordered",
	"-setButtonBordered:"
    );
    NSControl = (
	"+cellClass",
	"+setCellClass:",
	"-cell",
	"-setCell:",
	"-isEnabled",
	"-setEnabled:",
	"-selectedCell",
	"-selectedTag",
	"-setDoubleValue:",
	"-doubleValue",
	"-setFloatValue:",
	"-floatValue",
	"-setIntValue:",
	"-intValue",
	"-integerValue",
	"-setIntegerValue:",
	"-takeIntegerValueFrom:",
	"-sizeThatFits:",
	"-setStringValue:",
	"-stringValue",
	"-setObjectValue:",
	"-objectValue",
	"-setNeedsDisplay",
	"-takeDoubleValueFrom:",
	"-takeFloatValueFrom:",
	"-takeIntValueFrom:",
	"-takeStringValueFrom:",
	"-takeObjectValueFrom:",
	"-alignment",
	"-font",
	"-setAlignment:",
	"-setFont:",
	"-setFloatingPointFormat:left:right:",
	"-setFormatter:",
	"-formatter",
	"-baseWritingDirection",
	"-setBaseWritingDirection:",
	"-abortEditing",
	"-currentEditor",
	"-validateEditing",
	"-calcSize",
	"-sizeToFit",
	"-drawCell:",
	"-drawCellInside:",
	"-selectCell:",
	"-updateCell:",
	"-updateCellInside:",
	"-action",
	"-isContinuous",
	"-sendAction:to:",
	"-sendActionOn:",
	"-setAction:",
	"-setContinuous:",
	"-setTarget:",
	"-target",
	"-attributedStringValue",
	"-setAttributedStringValue:",
	"-setTag:",
	"-tag",
	"-performClick:",
	"-refusesFirstResponder",
	"-setRefusesFirstResponder:",
	"-mouseDown:",
	"-ignoresMultiClick",
	"-setIgnoresMultiClick:"
    );
    NSController = (
	"-commitEditing",
	"-discardEditing",
	"-isEditing",
	"-objectDidBeginEditing:",
	"-objectDidEndEditing:",
	"-commitEditingWithDelegate:didCommitSelector:contextInfo:"
    );
    NSCursor = (
	"+count",
	"-initWithImage:",
	"-initWithImage:hotSpot:",
	"-initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:",
	"-hotSpot",
	"-image",
	"-setHotSpot:",
	"-setImage:",
	"+hide",
	"+pop",
	"+setHiddenUntilMouseMoves:",
	"+isHiddenUntilMouseMoves",
	"+unhide",
	"-isSetOnMouseEntered",
	"-isSetOnMouseExited",
	"-mouseEntered:",
	"-mouseExited:",
	"-pop",
	"-push",
	"-set",
	"-setOnMouseEntered:",
	"-setOnMouseExited:",
	"+arrowCursor",
	"+currentCursor",
	"+IBeamCursor",
	"+greenArrowCursor",
	"+closedHandCursor",
	"+crosshairCursor",
	"+disappearingItemCursor",
	"+openHandCursor",
	"+pointingHandCursor",
	"+resizeDownCursor",
	"+resizeLeftCursor",
	"+resizeLeftRightCursor",
	"+resizeRightCursor",
	"+resizeUpCursor",
	"+resizeUpDownCursor",
	"+currentSystemCursor",
	"+contextualMenuCursor",
	"+dragCopyCursor",
	"+dragLinkCursor",
	"+operationNotAllowedCursor"
    );
    NSCustomImageRep = (
	"-initWithDrawSelector:delegate:",
	"-delegate",
	"-drawSelector"
    );
    NSDataAsset = (
	"-initWithName:",
	"-initWithName:bundle:",
	"-data",
	"-name",
	"-typeIdentifier"
    );
    NSDataLink = (
	"-initLinkedToFile:",
	"-initLinkedToSourceSelection:managedBy:supportingTypes:",
	"-initWithContentsOfFile:",
	"-initWithPasteboard:",
	"-saveLinkIn:",
	"-writeToFile:",
	"-writeToPasteboard:",
	"-disposition",
	"-linkNumber",
	"-manager",
	"-lastUpdateTime",
	"-openSource",
	"-sourceApplicationName",
	"-sourceFilename",
	"-sourceSelection",
	"-types",
	"-destinationApplicationName",
	"-destinationFilename",
	"-destinationSelection",
	"-break",
	"-noteSourceEdited",
	"-setUpdateMode:",
	"-updateDestination",
	"-updateMode"
    );
    NSDataLinkManager = (
	"-initWithDelegate:",
	"-initWithDelegate:fromFile:",
	"-addLink:at:",
	"-addLinkAsMarker:at:",
	"-addLinkPreviouslyAt:fromPasteboard:at:",
	"-breakAllLinks",
	"-writeLinksToPasteboard:",
	"-noteDocumentClosed",
	"-noteDocumentEdited",
	"-noteDocumentReverted",
	"-noteDocumentSaved",
	"-noteDocumentSavedAs:",
	"-noteDocumentSavedTo:",
	"-delegate",
	"-delegateVerifiesLinks",
	"-filename",
	"-interactsWithUser",
	"-isEdited",
	"-setDelegateVerifiesLinks:",
	"-setInteractsWithUser:",
	"-areLinkOutlinesVisible",
	"-destinationLinkEnumerator",
	"-destinationLinkWithSelection:",
	"-setLinkOutlinesVisible:",
	"-sourceLinkEnumerator"
    );
    NSDataLinkPanel = (
	"+sharedDataLinkPanel",
	"+getLink:manager:isMultiple:",
	"+setLink:manager:isMultiple:",
	"-getLink:manager:isMultiple:",
	"-setLink:manager:isMultiple:",
	"-accessoryView",
	"-setAccessoryView:",
	"-pickedBreakAllLinks:",
	"-pickedBreakLink:",
	"-pickedOpenSource:",
	"-pickedUpdateDestination:",
	"-pickedUpdateMode:"
    );
    NSDatePicker = (
	"-backgroundColor",
	"-calendar",
	"-datePickerElements",
	"-datePickerMode",
	"-datePickerStyle",
	"-dateValue",
	"-delegate",
	"-drawsBackground",
	"-isBezeled",
	"-isBordered",
	"-locale",
	"-maxDate",
	"-minDate",
	"-setBackgroundColor:",
	"-setBezeled:",
	"-setBordered:",
	"-setCalendar:",
	"-setDatePickerElements:",
	"-setDatePickerMode:",
	"-setDatePickerStyle:",
	"-setDateValue:",
	"-setDelegate:",
	"-setDrawsBackground:",
	"-setLocale:",
	"-setMaxDate:",
	"-setMinDate:",
	"-setTextColor:",
	"-setTimeInterval:",
	"-setTimeZone:",
	"-textColor",
	"-timeInterval",
	"-timeZone"
    );
    NSDatePickerCell = (
	"-backgroundColor",
	"-calendar",
	"-datePickerElements",
	"-datePickerMode",
	"-datePickerStyle",
	"-dateValue",
	"-delegate",
	"-drawsBackground",
	"-locale",
	"-maxDate",
	"-minDate",
	"-setBackgroundColor:",
	"-setCalendar:",
	"-setDatePickerElements:",
	"-setDatePickerMode:",
	"-setDatePickerStyle:",
	"-setDateValue:",
	"-setDelegate:",
	"-setDrawsBackground:",
	"-setLocale:",
	"-setMaxDate:",
	"-setMinDate:",
	"-setTextColor:",
	"-setTimeInterval:",
	"-setTimeZone:",
	"-textColor",
	"-timeInterval",
	"-timeZone"
    );
    NSDockTile = (
	"-contentView",
	"-setContentView:",
	"-size",
	"-owner",
	"-setOwner:",
	"-showsApplicationBadge",
	"-setShowsApplicationBadge:",
	"-badgeLabel",
	"-setBadgeLabel:",
	"-display"
    );
    NSDocument = (
	"+readableTypes",
	"+writableTypes",
	"+isNativeType:",
	"-init",
	"-initWithContentsOfFile:ofType:",
	"-initWithContentsOfURL:ofType:",
	"-initForURL:withContentsOfURL:ofType:error:",
	"-initWithContentsOfURL:ofType:error:",
	"-initWithType:error:",
	"-windowControllers",
	"-addWindowController:",
	"-shouldCloseWindowController:",
	"-shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:",
	"-showWindows",
	"-removeWindowController:",
	"-setWindow:",
	"-windowForSheet",
	"-makeWindowControllers",
	"-windowNibName",
	"-windowControllerWillLoadNib:",
	"-windowControllerDidLoadNib:",
	"-isDocumentEdited",
	"-updateChangeCount:",
	"-displayName",
	"-keepBackupFile",
	"-close",
	"-canCloseDocument",
	"-canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:",
	"-fileName",
	"-setFileName:",
	"-fileType",
	"-setFileType:",
	"-fileURL",
	"-setFileURL:",
	"-fileModificationDate",
	"-setFileModificationDate:",
	"-lastComponentOfFileName",
	"-setLastComponentOfFileName:",
	"-dataRepresentationOfType:",
	"-loadDataRepresentation:ofType:",
	"-fileWrapperRepresentationOfType:",
	"-loadFileWrapperRepresentation:ofType:",
	"-writeToFile:ofType:",
	"-readFromFile:ofType:",
	"-revertToSavedFromFile:ofType:",
	"-writeToURL:ofType:",
	"-readFromURL:ofType:",
	"-revertToSavedFromURL:ofType:",
	"-dataOfType:error:",
	"-fileWrapperOfType:error:",
	"-readFromData:ofType:error:",
	"-readFromFileWrapper:ofType:error:",
	"-readFromURL:ofType:error:",
	"-revertToContentsOfURL:ofType:error:",
	"-writeSafelyToURL:ofType:forSaveOperation:error:",
	"-writeToURL:ofType:error:",
	"-writeToURL:ofType:forSaveOperation:originalContentsURL:error:",
	"-shouldRunSavePanelWithAccessoryView",
	"-fileNameFromRunningSavePanelForSaveOperation:",
	"-runModalSavePanel:withAccessoryView:",
	"-fileTypeFromLastRunSavePanel",
	"-fileAttributesToWriteToFile:ofType:saveOperation:",
	"-writeToFile:ofType:originalFile:saveOperation:",
	"-writeWithBackupToFile:ofType:saveOperation:",
	"-writableTypesForSaveOperation:",
	"-fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:",
	"-fileNameExtensionWasHiddenInLastRunSavePanel",
	"-fileNameExtensionForType:saveOperation:",
	"-printInfo",
	"-setPrintInfo:",
	"-shouldChangePrintInfo:",
	"-runPageLayout:",
	"-runModalPageLayoutWithPrintInfo:",
	"-printDocument:",
	"-printShowingPrintPanel:",
	"-preparePageLayout:",
	"-runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:",
	"-printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:",
	"-printOperationWithSettings:error:",
	"-runModalPrintOperation:delegate:didRunSelector:contextInfo:",
	"-saveDocument:",
	"-saveDocumentAs:",
	"-saveDocumentTo:",
	"-revertDocumentToSaved:",
	"-validateMenuItem:",
	"-validateUserInterfaceItem:",
	"-undoManager",
	"-setUndoManager:",
	"-hasUndoManager",
	"-setHasUndoManager:",
	"-saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:",
	"-prepareSavePanel:",
	"-saveDocumentWithDelegate:didSaveSelector:contextInfo:",
	"-runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:",
	"-saveToURL:ofType:forSaveOperation:error:",
	"-saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:",
	"-autosavedContentsFileURL",
	"-setAutosavedContentsFileURL:",
	"-autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:",
	"-autosavingFileType",
	"-hasUnautosavedChanges",
	"-presentError:",
	"-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:",
	"-willPresentError:"
    );
    NSDocumentController = (
	"+sharedDocumentController",
	"-makeUntitledDocumentOfType:",
	"-makeDocumentWithContentsOfFile:ofType:",
	"-openUntitledDocumentOfType:display:",
	"-openDocumentWithContentsOfFile:display:",
	"-makeDocumentWithContentsOfURL:ofType:",
	"-openDocumentWithContentsOfURL:display:",
	"-makeDocumentForURL:withContentsOfURL:ofType:error:",
	"-makeDocumentWithContentsOfURL:ofType:error:",
	"-makeUntitledDocumentOfType:error:",
	"-openDocumentWithContentsOfURL:display:error:",
	"-openUntitledDocumentAndDisplay:error:",
	"-reopenDocumentForURL:withContentsOfURL:error:",
	"-presentError:",
	"-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:",
	"-willPresentError:",
	"-duplicateDocumentWithContentsOfURL:copying:displayName:error:",
	"-openDocumentWithContentsOfURL:display:completionHandler:",
	"-reopenDocumentForURL:withContentsOfURL:display:completionHandler:",
	"-beginOpenPanelWithCompletionHandler:",
	"-beginOpenPanel:forTypes:completionHandler:",
	"-shouldCreateUI",
	"-setShouldCreateUI:",
	"-saveAllDocuments:",
	"-openDocument:",
	"-newDocument:",
	"-clearRecentDocuments:",
	"-maximumRecentDocumentCount",
	"-noteNewRecentDocument:",
	"-noteNewRecentDocumentURL:",
	"-recentDocumentURLs",
	"-URLsFromRunningOpenPanel",
	"-fileNamesFromRunningOpenPanel",
	"-runModalOpenPanel:forTypes:",
	"-addDocument:",
	"-removeDocument:",
	"-closeAllDocuments",
	"-closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:",
	"-reviewUnsavedDocumentsWithAlertTitle:cancellable:",
	"-reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:",
	"-documents",
	"-hasEditedDocuments",
	"-currentDocument",
	"-currentDirectory",
	"-documentForWindow:",
	"-documentForFileName:",
	"-documentForURL:",
	"-validateMenuItem:",
	"-validateUserInterfaceItem:",
	"-displayNameForType:",
	"-typeFromFileExtension:",
	"-fileExtensionsFromType:",
	"-documentClassForType:",
	"-defaultType",
	"-documentClassNames",
	"-typeForContentsOfURL:error:",
	"-autosavingDelay",
	"-setAutosavingDelay:"
    );
    NSDrawer = (
	"-initWithContentSize:preferredEdge:",
	"-close",
	"-close:",
	"-open",
	"-open:",
	"-openOnEdge:",
	"-toggle:",
	"-contentSize",
	"-leadingOffset",
	"-maxContentSize",
	"-minContentSize",
	"-setContentSize:",
	"-setLeadingOffset:",
	"-setMaxContentSize:",
	"-setMinContentSize:",
	"-setTrailingOffset:",
	"-trailingOffset",
	"-edge",
	"-preferredEdge",
	"-setPreferredEdge:",
	"-contentView",
	"-parentWindow",
	"-setContentView:",
	"-setParentWindow:",
	"-delegate",
	"-setDelegate:",
	"-state"
    );
    NSDrawerDelegate = (
	"-drawerShouldClose:",
	"-drawerShouldOpen:",
	"-drawerWillResizeContents:toSize:",
	"-drawerDidClose:",
	"-drawerDidOpen:",
	"-drawerWillClose:",
	"-drawerWillOpen:"
    );
    NSEPSImageRep = (
	"+imageRepWithData:",
	"-initWithData:",
	"-boundingBox",
	"-EPSRepresentation",
	"-prepareGState"
    );
    NSEvent = (
	"+enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:",
	"+keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:",
	"+mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:",
	"+mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:buttonNumber:deltaX:deltaY:deltaZ:",
	"+mouseLocation",
	"+otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:",
	"+startPeriodicEventsAfterDelay:withPeriod:",
	"+stopPeriodicEvents",
	"-buttonNumber",
	"-characters",
	"-charactersIgnoringModifiers",
	"-clickCount",
	"-context",
	"-data1",
	"-data2",
	"-deltaX",
	"-deltaY",
	"-deltaZ",
	"-eventNumber",
	"-isARepeat",
	"-keyCode",
	"-locationInWindow",
	"-modifierFlags",
	"-pressure",
	"-subtype",
	"-timestamp",
	"-trackingNumber",
	"-type",
	"-userData",
	"-window",
	"-windowNumber",
	"-associatedEventsMask",
	"-absoluteX",
	"-absoluteY",
	"-absoluteZ",
	"-buttonMask",
	"-capabilityMask",
	"-deviceID",
	"-isEnteringProximity",
	"-pointingDeviceID",
	"-pointingDeviceSerialNumber",
	"-pointingDeviceType",
	"-rotation",
	"-systemTabletID",
	"-tabletID",
	"-tangentialPressure",
	"-tilt",
	"-uniqueID",
	"-vendorDefined",
	"-vendorID",
	"-vendorPointingDeviceType",
	"+eventWithEventRef:",
	"-eventRef",
	"+setMouseCoalescingEnabled:",
	"+isMouseCoalescingEnabled",
	"+modifierFlags",
	"+keyRepeatDelay",
	"+keyRepeatInterval",
	"+pressedMouseButtons",
	"+doubleClickInterval",
	"-phase",
	"-momentumPhase"
    );
    "NSFileWrapper(NSExtensions)" = (
	"-setIcon:",
	"-icon"
    );
    NSFont = (
	"+boldSystemFontOfSize:",
	"+fontWithName:matrix:",
	"+fontWithName:size:",
	"+systemFontOfSize:",
	"+userFixedPitchFontOfSize:",
	"+userFontOfSize:",
	"+titleBarFontOfSize:",
	"+menuFontOfSize:",
	"+messageFontOfSize:",
	"+paletteFontOfSize:",
	"+toolTipsFontOfSize:",
	"+controlContentFontOfSize:",
	"+labelFontOfSize:",
	"+menuBarFontOfSize:",
	"+fontWithDescriptor:size:",
	"+fontWithDescriptor:textTransform:",
	"+fontWithDescriptor:size:textTransform:",
	"+labelFontSize",
	"+smallSystemFontSize",
	"+systemFontSize",
	"+systemFontSizeForControlSize:",
	"+preferredFontNames",
	"+setPreferredFontNames:",
	"+setUserFixedPitchFont:",
	"+setUserFont:",
	"+useFont:",
	"-set",
	"-setInContext:",
	"-textTransform",
	"-afmDictionary",
	"-afmFileContents",
	"-boundingRectForFont",
	"-displayName",
	"-familyName",
	"-fontName",
	"-encodingScheme",
	"-isFixedPitch",
	"-isBaseFont",
	"-matrix",
	"-pointSize",
	"-printerFont",
	"-screenFont",
	"-ascender",
	"-descender",
	"-capHeight",
	"-italicAngle",
	"-maximumAdvancement",
	"-minimumAdvancement",
	"-underlinePosition",
	"-underlineThickness",
	"-xHeight",
	"-widthOfString:",
	"-defaultLineHeightForFont",
	"-leading",
	"-numberOfGlyphs",
	"-coveredCharacterSet",
	"-fontDescriptor",
	"-renderingMode",
	"-screenFontWithRenderingMode:",
	"-advancementForGlyph:",
	"-boundingRectForGlyph:",
	"-glyphIsEncoded:",
	"-glyphPacking",
	"-glyphWithName:",
	"-positionOfGlyph:precededByGlyph:isNominal:",
	"-positionOfGlyph:forCharacter:struckOverRect:",
	"-positionOfGlyph:struckOverGlyph:metricsExist:",
	"-positionOfGlyph:struckOverRect:metricsExist:",
	"-positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:",
	"-positionsForCompositeSequence:numberOfGlyphs:pointArray:",
	"-getAdvancements:forGlyphs:count:",
	"-getAdvancements:forPackedGlyphs:count:",
	"-getBoundingRects:forGlyphs:count:",
	"-mostCompatibleStringEncoding"
    );
    "NSFont(GNUstep)" = (
	"-fontInfo",
	"-fontRef"
    );
    NSFontAssetRequest = (
	"-initWithFontDescriptors:options:",
	"-downloadedFontDescriptors",
	"-progress",
	"-downloadFontAssetsWithCompletionHandler:"
    );
    NSFontCollection = (
	"+fontCollectionWithDescriptors:",
	"+fontCollectionWithAllAvailableDescriptors",
	"+fontCollectionWithLocale:",
	"+showFontCollection:withName:visibility:error:",
	"+hideFontCollectionWithName:visibility:error:",
	"+renameFontCollectionWithName:visibility:toName:error:",
	"+allFontCollectionNames",
	"+fontCollectionWithName:",
	"+fontCollectionWithName:visibility:",
	"-queryDescriptors",
	"-exclusionDescriptors",
	"-matchingDescriptors",
	"-matchingDescriptorsWithOptions:",
	"-matchingDescriptorsForFamily:",
	"-matchingDescriptorsForFamily:options:"
    );
    NSFontDescriptor = (
	"+fontDescriptorWithFontAttributes:",
	"+fontDescriptorWithName:size:",
	"+fontDescriptorWithName:matrix:",
	"-fontAttributes",
	"-initWithFontAttributes:",
	"-fontDescriptorByAddingAttributes:",
	"-fontDescriptorWithFace:",
	"-fontDescriptorWithFamily:",
	"-fontDescriptorWithMatrix:",
	"-fontDescriptorWithSize:",
	"-fontDescriptorWithSymbolicTraits:",
	"-matchingFontDescriptorsWithMandatoryKeys:",
	"-objectForKey:",
	"-matrix",
	"-pointSize",
	"-postscriptName",
	"-symbolicTraits",
	"-matchingFontDescriptorWithMandatoryKeys:"
    );
    NSFontManager = (
	"+setFontManagerFactory:",
	"+setFontPanelFactory:",
	"+sharedFontManager",
	"-availableFonts",
	"-availableFontFamilies",
	"-availableFontNamesWithTraits:",
	"-availableMembersOfFontFamily:",
	"-localizedNameForFamily:face:",
	"-setSelectedFont:isMultiple:",
	"-selectedFont",
	"-isMultiple",
	"-sendAction",
	"-addFontTrait:",
	"-removeFontTrait:",
	"-modifyFont:",
	"-modifyFontViaPanel:",
	"-convertFont:",
	"-convertFont:toFamily:",
	"-convertFont:toFace:",
	"-convertFont:toHaveTrait:",
	"-convertFont:toNotHaveTrait:",
	"-convertFont:toSize:",
	"-convertWeight:ofFont:",
	"-fontWithFamily:traits:weight:size:",
	"-traitsOfFont:",
	"-weightOfFont:",
	"-fontNamed:hasTraits:",
	"-isEnabled",
	"-setEnabled:",
	"-fontMenu:",
	"-setFontMenu:",
	"-fontPanel:",
	"-orderFrontFontPanel:",
	"-delegate",
	"-setDelegate:",
	"-action",
	"-setAction:",
	"-addCollection:options:",
	"-removeCollection:",
	"-collectionNames",
	"-addFontDescriptors:toCollection:",
	"-removeFontDescriptor:fromCollection:",
	"-fontDescriptorsInCollection:",
	"-availableFontNamesMatchingFontDescriptor:",
	"-convertAttributes:",
	"-setSelectedAttributes:isMultiple:"
    );
    NSFontPanel = (
	"+sharedFontPanel",
	"+sharedFontPanelExists",
	"-isEnabled",
	"-setEnabled:",
	"-reloadDefaultFontFamilies",
	"-setPanelFont:isMultiple:",
	"-panelConvertFont:",
	"-worksWhenModal",
	"-accessoryView",
	"-setAccessoryView:"
    );
    NSForm = (
	"-addEntry:",
	"-insertEntry:atIndex:",
	"-removeEntryAtIndex:",
	"-setInterlineSpacing:",
	"-indexOfCellWithTag:",
	"-indexOfSelectedItem",
	"-setBezeled:",
	"-setBordered:",
	"-setTextAlignment:",
	"-setTextFont:",
	"-setTitleAlignment:",
	"-setTitleFont:",
	"-setTitleBaseWritingDirection:",
	"-setTextBaseWritingDirection:",
	"-cellAtIndex:",
	"-drawCellAtIndex:",
	"-selectTextAtIndex:",
	"-setEntryWidth:",
	"-_setTitleWidthNeedsUpdate:"
    );
    NSFormCell = (
	"-setTitle:",
	"-setTitleAlignment:",
	"-setTitleFont:",
	"-setTitleWidth:",
	"-title",
	"-titleAlignment",
	"-titleFont",
	"-titleWidth",
	"-titleWidth:",
	"-attributedTitle",
	"-setAttributedTitle:",
	"-setTitleWithMnemonic:",
	"-placeholderAttributedString",
	"-placeholderString",
	"-setPlaceholderAttributedString:",
	"-setPlaceholderString:",
	"-titleBaseWritingDirection",
	"-setTitleBaseWritingDirection:"
    );
    NSGestureRecognizer = (
	"-locationInView:"
    );
    NSGlyphGenerator = (
	"+sharedGlyphGenerator",
	"-generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:"
    );
    NSGlyphInfo = (
	"+glyphInfoWithCGGlyph:forFont:baseString:",
	"-baseString",
	"-glyphID",
	"+glyphInfoWithCharacterIdentifier:collection:baseString:",
	"+glyphInfoWithGlyph:forFont:baseString:",
	"+glyphInfoWithGlyphName:forFont:baseString:",
	"-characterIdentifier",
	"-characterCollection",
	"-glyphName"
    );
    NSGradient = (
	"-colorSpace",
	"-drawFromCenter:radius:toCenter:radius:options:",
	"-drawFromPoint:toPoint:options:",
	"-drawInBezierPath:angle:",
	"-drawInBezierPath:relativeCenterPosition:",
	"-drawInRect:angle:",
	"-drawInRect:relativeCenterPosition:",
	"-getColor:location:atIndex:",
	"-initWithColors:",
	"-initWithColors:atLocations:colorSpace:",
	"-initWithColorsAndLocations:,...",
	"-initWithStartingColor:endingColor:",
	"-interpolatedColorAtLocation:",
	"-numberOfColorStops"
    );
    NSGraphicsContext = (
	"+currentContextDrawingToScreen",
	"+graphicsContextWithAttributes:",
	"+graphicsContextWithWindow:",
	"+restoreGraphicsState",
	"+saveGraphicsState",
	"+setGraphicsState:",
	"+setCurrentContext:",
	"+currentContext",
	"+graphicsContextWithBitmapImageRep:",
	"+graphicsContextWithGraphicsPort:flipped:",
	"-CGContext",
	"+graphicsContextWithCGContext:flipped:",
	"-methods",
	"-attributes",
	"-graphicsPort",
	"-isDrawingToScreen",
	"-flushGraphics",
	"-restoreGraphicsState",
	"-saveGraphicsState",
	"-focusStack",
	"-setFocusStack:",
	"-setImageInterpolation:",
	"-imageInterpolation",
	"-setShouldAntialias:",
	"-shouldAntialias",
	"-patternPhase",
	"-setPatternPhase:",
	"-compositingOperation",
	"-setCompositingOperation:",
	"-isFlipped"
    );
    "NSGraphicsContext(GNUstep)" = (
	"+setDefaultContextClass:",
	"-initWithContextInfo:",
	"-initWithGraphicsPort:flipped:",
	"-focusView",
	"-lockFocusView:inRect:",
	"-unlockFocusView:needsFlush:",
	"-useFont:",
	"-resetUsedFonts",
	"-usedFonts",
	"+handleExposeRect:forDriver:",
	"-setShadow:",
	"-shadow"
    );
    "NSGraphicsContext(NSGradient)" = (
	"-drawGradient:fromCenter:radius:toCenter:radius:options:",
	"-drawGradient:fromPoint:toPoint:options:"
    );
    "NSGraphicsContext(NSGraphics)" = (
	"-GSReadRect:",
	"-NSDrawBitmap:::::::::::",
	"-NSBeep",
	"-GSWSetViewIsFlipped:",
	"-GSWViewIsFlipped"
    );
    "NSGraphicsContext(Ops)" = (
	"-DPScurrentalpha:",
	"-DPScurrentcmykcolor::::",
	"-DPScurrentgray:",
	"-DPScurrenthsbcolor:::",
	"-DPScurrentrgbcolor:::",
	"-DPSsetalpha:",
	"-DPSsetcmykcolor::::",
	"-DPSsetgray:",
	"-DPSsethsbcolor:::",
	"-DPSsetrgbcolor:::",
	"-GSSetPatterColor:",
	"-GSSetFillColorspace:",
	"-GSSetStrokeColorspace:",
	"-GSSetFillColor:",
	"-GSSetStrokeColor:",
	"-DPSashow:::",
	"-DPSawidthshow::::::",
	"-DPScharpath::",
	"-appendBezierPathWithPackedGlyphs:path:",
	"-DPSshow:",
	"-DPSwidthshow::::",
	"-DPSxshow:::",
	"-DPSxyshow:::",
	"-DPSyshow:::",
	"-GSSetCharacterSpacing:",
	"-GSSetFont:",
	"-GSSetFontSize:",
	"-GSGetTextCTM",
	"-GSGetTextPosition",
	"-GSSetTextCTM:",
	"-GSSetTextDrawingMode:",
	"-GSSetTextPosition:",
	"-GSShowText::",
	"-GSShowGlyphs::",
	"-GSShowGlyphsWithAdvances:::",
	"-DPSgrestore",
	"-DPSgsave",
	"-DPSinitgraphics",
	"-DPSsetgstate:",
	"-GSDefineGState",
	"-GSUndefineGState:",
	"-GSReplaceGState:",
	"-DPScurrentflat:",
	"-DPScurrentlinecap:",
	"-DPScurrentlinejoin:",
	"-DPScurrentlinewidth:",
	"-DPScurrentmiterlimit:",
	"-DPScurrentpoint::",
	"-DPScurrentstrokeadjust:",
	"-DPSsetdash:::",
	"-DPSsetflat:",
	"-DPSsethalftonephase::",
	"-DPSsetlinecap:",
	"-DPSsetlinejoin:",
	"-DPSsetlinewidth:",
	"-DPSsetmiterlimit:",
	"-DPSsetstrokeadjust:",
	"-DPSconcat:",
	"-DPSinitmatrix",
	"-DPSrotate:",
	"-DPSscale::",
	"-DPStranslate::",
	"-GSCurrentCTM",
	"-GSSetCTM:",
	"-GSConcatCTM:",
	"-DPSarc:::::",
	"-DPSarcn:::::",
	"-DPSarct:::::",
	"-DPSclip",
	"-DPSclosepath",
	"-DPScurveto::::::",
	"-DPSeoclip",
	"-DPSeofill",
	"-DPSfill",
	"-DPSflattenpath",
	"-DPSinitclip",
	"-DPSlineto::",
	"-DPSmoveto::",
	"-DPSnewpath",
	"-DPSpathbbox::::",
	"-DPSrcurveto::::::",
	"-DPSrectclip::::",
	"-DPSrectfill::::",
	"-DPSrectstroke::::",
	"-DPSreversepath",
	"-DPSrlineto::",
	"-DPSrmoveto::",
	"-DPSstroke",
	"-DPSshfill:",
	"-GSSendBezierPath:",
	"-GSRectClipList::",
	"-GSRectFillList::",
	"-GSCurrentDevice:::",
	"-GSSetDevice:::",
	"-DPScurrentoffset::",
	"-DPSsetoffset::",
	"-DPScomposite::::::::",
	"-DPScompositerect:::::",
	"-DPSdissolve::::::::",
	"-GScomposite:toPoint:fromRect:operation:fraction:",
	"-supportsDrawGState",
	"-GSdraw:toPoint:fromRect:operation:fraction:",
	"-GSDrawImage::",
	"-DPSPrintf::",
	"-DPSWriteData::"
    );
    "NSGraphicsContext(Printing)" = (
	"-beginPage:label:bBox:fonts:",
	"-beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:",
	"-beginSetup",
	"-beginTrailer",
	"-endDocumentPages:documentFonts:",
	"-endHeaderComments",
	"-endPageSetup",
	"-endPrologue",
	"-endSetup",
	"-endSheet",
	"-endTrailer",
	"-printerProlog",
	"-showPage"
    );
    NSGridCell = (
	"-contentView",
	"-setContentView:",
	"+emptyContentView",
	"-row",
	"-column",
	"-xPlacement",
	"-setXPlacement:",
	"-yPlacement",
	"-setYPlacement:",
	"-rowAlignment",
	"-setRowAlignment:",
	"-customPlacementConstraints",
	"-setCustomPlacementConstraints:"
    );
    NSGridColumn = (
	"-gridView",
	"-setGridView:",
	"-numberOfCells",
	"-cellAtIndex:",
	"-xPlacement",
	"-setXPlacement:",
	"-width",
	"-setWidth:",
	"-leadingPadding",
	"-setLeadingPadding:",
	"-trailingPadding",
	"-setTrailingPadding:",
	"-isHidden",
	"-mergeCellsInRange:"
    );
    NSGridRow = (
	"-gridView",
	"-setGridView:",
	"-numberOfCells",
	"-cellAtIndex:",
	"-yPlacement",
	"-setYPlacement:",
	"-height",
	"-setHeight:",
	"-topPadding",
	"-setTopPadding:",
	"-bottomPadding",
	"-setBottomPadding:",
	"-isHidden",
	"-mergeCellsInRange:"
    );
    NSGridView = (
	"+gridViewWithNumberOfColumns:rows:",
	"+gridViewWithViews:",
	"-numberOfRows",
	"-numberOfColumns",
	"-rowAtIndex:",
	"-indexOfRow:",
	"-columnAtIndex:",
	"-indexOfColumn:",
	"-cellAtColumnIndex:rowIndex:",
	"-cellForView:",
	"-addRowWithViews:",
	"-insertRowAtIndex:withViews:",
	"-moveRowAtIndex:toIndex:",
	"-removeRowAtIndex:",
	"-addColumnWithViews:",
	"-insertColumnAtIndex:withViews:",
	"-moveColumnAtIndex:toIndex:",
	"-removeColumnAtIndex:",
	"-xPlacement",
	"-setXPlacement:",
	"-yPlacement",
	"-setYPlacement:",
	"-rowAlignment",
	"-setRowAlignment:",
	"-rowSpacing",
	"-setRowSpacing:",
	"-columnSpacing",
	"-setColumnSpacing:",
	"-mergeCellsInHorizontalRange:verticalRange:"
    );
    NSHelpManager = (
	"+sharedHelpManager",
	"+isContextHelpModeActive",
	"+setContextHelpModeActive:",
	"-contextHelpForObject:",
	"-removeContextHelpForObject:",
	"-setContextHelp:forObject:",
	"-setContextHelp:withObject:",
	"-showContextHelpForObject:locationHint:"
    );
    NSHelpPanel = (
	"+sharedHelpPanel",
	"+sharedHelpPanelWithDirectory:",
	"+setHelpDirectory:",
	"-addSupplement:inPath:",
	"-helpDirectory",
	"-helpFile",
	"+attachHelpFile:markerName:to:",
	"+detachHelpFrom:",
	"-showFile:atMarker:",
	"-showHelpAttachedTo:",
	"-print:"
    );
    NSImage = (
	"-initByReferencingFile:",
	"-initWithContentsOfFile:",
	"-initWithData:",
	"-initWithPasteboard:",
	"-initWithSize:",
	"-initWithBitmapHandle:",
	"-initWithContentsOfURL:",
	"-initWithIconHandle:",
	"-setSize:",
	"-size",
	"+imageNamed:",
	"+_standardImageWithName:",
	"-setName:",
	"-name",
	"-addRepresentation:",
	"-addRepresentations:",
	"-lockFocus",
	"-lockFocusOnRepresentation:",
	"-unlockFocus",
	"-compositeToPoint:operation:",
	"-compositeToPoint:fromRect:operation:",
	"-dissolveToPoint:fraction:",
	"-dissolveToPoint:fromRect:fraction:",
	"-compositeToPoint:fromRect:operation:fraction:",
	"-compositeToPoint:operation:fraction:",
	"-setPrefersColorMatch:",
	"-prefersColorMatch",
	"-setUsesEPSOnResolutionMismatch:",
	"-usesEPSOnResolutionMismatch",
	"-setMatchesOnMultipleResolution:",
	"-matchesOnMultipleResolution",
	"-bestRepresentationForDevice:",
	"-bestRepresentationForRect:context:hints:",
	"-representations",
	"-removeRepresentation:",
	"-setCachedSeparately:",
	"-isCachedSeparately",
	"-setDataRetained:",
	"-isDataRetained",
	"-setCacheDepthMatchesImageDepth:",
	"-cacheDepthMatchesImageDepth",
	"-setCacheMode:",
	"-cacheMode",
	"-drawRepresentation:inRect:",
	"-drawAtPoint:fromRect:operation:fraction:",
	"-drawInRect:fromRect:operation:fraction:",
	"-drawInRect:fromRect:operation:fraction:respectFlipped:hints:",
	"-drawInRect:",
	"-isValid",
	"-setScalesWhenResized:",
	"-scalesWhenResized",
	"-setBackgroundColor:",
	"-backgroundColor",
	"-recache",
	"-setFlipped:",
	"-isFlipped",
	"-setDelegate:",
	"-delegate",
	"-TIFFRepresentation",
	"-TIFFRepresentationUsingCompression:factor:",
	"+imageUnfilteredFileTypes",
	"+imageUnfilteredPasteboardTypes",
	"+canInitWithPasteboard:",
	"+imageFileTypes",
	"+imagePasteboardTypes"
    );
    "NSImage(GSQuartz)" = (
	"-CGImageForProposedRect:context:hints:"
    );
    NSImageCell = (
	"-imageAlignment",
	"-setImageAlignment:",
	"-imageScaling",
	"-setImageScaling:",
	"-imageFrameStyle",
	"-setImageFrameStyle:"
    );
    NSImageRep = (
	"+imageRepWithContentsOfFile:",
	"+imageRepsWithContentsOfFile:",
	"+imageRepWithPasteboard:",
	"+imageRepsWithPasteboard:",
	"+imageRepWithContentsOfURL:",
	"+imageRepsWithContentsOfURL:",
	"+canInitWithData:",
	"+canInitWithPasteboard:",
	"+imageFileTypes",
	"+imagePasteboardTypes",
	"+imageUnfilteredFileTypes",
	"+imageUnfilteredPasteboardTypes",
	"-setSize:",
	"-size",
	"-bitsPerSample",
	"-colorSpaceName",
	"-hasAlpha",
	"-isOpaque",
	"-pixelsHigh",
	"-pixelsWide",
	"-setAlpha:",
	"-setBitsPerSample:",
	"-setColorSpaceName:",
	"-setOpaque:",
	"-setPixelsHigh:",
	"-setPixelsWide:",
	"-draw",
	"-drawAtPoint:",
	"-drawInRect:",
	"-drawInRect:fromRect:operation:fraction:respectFlipped:hints:",
	"+imageRepClassForData:",
	"+imageRepClassForFileType:",
	"+imageRepClassForPasteboardType:",
	"+registerImageRepClass:",
	"+registeredImageRepClasses",
	"+unregisterImageRepClass:"
    );
    "NSImageRep(GSQuartz)" = (
	"-CGImageForProposedRect:context:hints:"
    );
    NSImageView = (
	"-image",
	"-setImage:",
	"-imageAlignment",
	"-setImageAlignment:",
	"-imageScaling",
	"-setImageScaling:",
	"-imageFrameStyle",
	"-setImageFrameStyle:",
	"-setEditable:",
	"-isEditable",
	"-animates",
	"-setAnimates:",
	"-allowsCutCopyPaste",
	"-setAllowsCutCopyPaste:",
	"+imageViewWithImage:"
    );
    "NSImageView(GNUstep)" = (
	"-initiatesDrag",
	"-setInitiatesDrag:"
    );
    NSInputManager = (
	"+currentInputManager",
	"-initWithName:host:",
	"-handleMouseEvent:",
	"-handleKeyboardEvents:client:",
	"-language",
	"-localizedInputManagerName",
	"-markedTextAbandoned:",
	"-markedTextSelectionChanged:client:",
	"-wantsToDelayTextChangeNotifications",
	"-wantsToHandleMouseEvents",
	"-wantsToInterpretAllKeystrokes",
	"-loadBindingsFromFile:",
	"+parseKey:intoCharacter:andModifiers:",
	"+describeKeyStroke:withModifiers:",
	"-resetInternalState",
	"-quoteNextKeyStroke"
    );
    NSInputServer = (
	"-initWithDelegate:name:"
    );
    NSLayoutAnchor = (
	"-constraintEqualToAnchor:",
	"-constraintGreaterThanOrEqualToAnchor:",
	"-constraintLessThanOrEqualToAnchor:",
	"-constraintEqualToAnchor:constant:",
	"-constraintGreaterThanOrEqualToAnchor:constant:",
	"-constraintLessThanOrEqualToAnchor:constant:",
	"-name",
	"-item",
	"-hasAmbiguousLayout",
	"-constraintsAffectingLayout"
    );
    NSLayoutConstraint = (
	"+constraintsWithVisualFormat:options:metrics:views:",
	"+constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:",
	"-isActive",
	"-setActive:",
	"+activateConstraints:",
	"+deactivateConstraints:",
	"-firstItem",
	"-firstAttribute",
	"-relation",
	"-secondItem",
	"-secondAttribute",
	"-multiplier",
	"-constant",
	"-firstAnchor",
	"-secondAnchor",
	"-priority",
	"-setPriority:",
	"-priority",
	"-setPriority:"
    );
    NSLayoutDimension = (
	"-constraintEqualToConstant:",
	"-constraintGreaterThanOrEqualToConstant:",
	"-constraintLessThanOrEqualToConstant:",
	"-constraintEqualToAnchor:multiplier:",
	"-constraintGreaterThanOrEqualToAnchor:multiplier:",
	"-constraintLessThanOrEqualToAnchor:multiplier:",
	"-constraintEqualToAnchor:multiplier:constant:",
	"-constraintGreaterThanOrEqualToAnchor:multiplier:constant:",
	"-constraintLessThanOrEqualToAnchor:multiplier:constant:"
    );
    NSLayoutGuide = (
	"-frame",
	"-owningView",
	"-setOwningView:",
	"-identifier",
	"-setIdentifier:",
	"-leadingAnchor",
	"-trailingAnchor",
	"-leftAnchor",
	"-rightAnchor",
	"-topAnchor",
	"-bottomAnchor",
	"-widthAnchor",
	"-heightAnchor",
	"-centerXAnchor",
	"-centerYAnchor",
	"-hasAmbiguousLayout",
	"-constraintsAffectingLayoutForOrientation:"
    );
    NSLayoutManager = (
	"-invalidateDisplayForGlyphRange:",
	"-invalidateDisplayForCharacterRange:",
	"-firstTextView",
	"-textViewForBeginningOfSelection",
	"-layoutManagerOwnsFirstResponderInWindow:",
	"-rulerMarkersForTextView:paragraphStyle:ruler:",
	"-rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:",
	"-hyphenationFactor",
	"-setHyphenationFactor:"
    );
    "NSLayoutManager(drawing)" = (
	"-drawBackgroundForGlyphRange:atPoint:",
	"-drawGlyphsForGlyphRange:atPoint:",
	"-underlineGylphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:",
	"-drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:",
	"-attachmentSizeForGlyphAtIndex:",
	"-showAttachmentCell:inRect:characterIndex:"
    );
    "NSLayoutManager(layout)" = (
	"-textContainerChangedTextView:",
	"-locationForGlyphAtIndex:",
	"-rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:",
	"-rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:",
	"-boundingRectForGlyphRange:inTextContainer:",
	"-glyphRangeForBoundingRect:inTextContainer:",
	"-glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:",
	"-glyphIndexForPoint:inTextContainer:",
	"-glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:",
	"-insertionPointRectForCharacterIndex:inTextContainer:",
	"-characterIndexMoving:fromCharacterIndex:originalCharacterIndex:distance:",
	"-ensureGlyphsForGlyphRange:",
	"-ensureGlyphsForCharacterRange:",
	"-ensureLayoutForGlyphRange:",
	"-ensureLayoutForCharacterRange:",
	"-ensureLayoutForTextContainer:",
	"-ensureLayoutForBoundingRect:inTextContainer:",
	"-invalidateLayoutForCharacterRange:actualCharacterRange:",
	"-invalidateGlyphsOnLayoutInvalidationForGlyphRange:",
	"-allowsNonContiguousLayout",
	"-setAllowsNonContiguousLayout:",
	"-hasNonContiguousLayout"
    );
    "NSLayoutManager(temporaryattributes)" = (
	"-addTemporaryAttributes:forCharacterRange:",
	"-removeTemporaryAttribute:forCharacterRange:",
	"-setTemporaryAttributes:forCharacterRange:",
	"-temporaryAttributesAtCharacterIndex:effectiveRange:",
	"-addTemporaryAttribute:value:forCharacterRange:",
	"-temporaryAttribute:atCharacterIndex:effectiveRange:",
	"-temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:",
	"-temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:"
    );
    NSLayoutXAxisAnchor = (
	"-anchorWithOffsetToAnchor:"
    );
    NSLayoutYAxisAnchor = (
	"-anchorWithOffsetToAnchor:"
    );
    NSLevelIndicator = (
	"-maxValue",
	"-setMaxValue:",
	"-minValue",
	"-setMinValue:",
	"-warningValue",
	"-setWarningValue:",
	"-criticalValue",
	"-setCriticalValue:",
	"-numberOfMajorTickMarks",
	"-numberOfTickMarks",
	"-rectOfTickMarkAtIndex:",
	"-setNumberOfMajorTickMarks:",
	"-setNumberOfTickMarks:",
	"-setTickMarkPosition:",
	"-tickMarkPosition",
	"-tickMarkValueAtIndex:"
    );
    NSLevelIndicatorCell = (
	"-initWithLevelIndicatorStyle:",
	"-criticalValue",
	"-setCriticalValue:",
	"-maxValue",
	"-setMaxValue:",
	"-minValue",
	"-setMinValue:",
	"-setWarningValue:",
	"-warningValue",
	"-style",
	"-setLevelIndicatorStyle:",
	"-numberOfMajorTickMarks",
	"-setNumberOfMajorTickMarks:",
	"-numberOfTickMarks",
	"-setNumberOfTickMarks:",
	"-tickMarkPosition",
	"-setTickMarkPosition:",
	"-tickMarkValueAtIndex:",
	"-rectOfTickMarkAtIndex:"
    );
    NSMatrix = (
	"+cellClass",
	"+setCellClass:",
	"-initWithFrame:",
	"-initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:",
	"-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:",
	"-mode",
	"-setMode:",
	"-allowsEmptySelection",
	"-isSelectionByRect",
	"-setAllowsEmptySelection:",
	"-setSelectionByRect:",
	"-cellClass",
	"-prototype",
	"-setCellClass:",
	"-setPrototype:",
	"-addColumn",
	"-addColumnWithCells:",
	"-addRow",
	"-addRowWithCells:",
	"-cellFrameAtRow:column:",
	"-cellSize",
	"-getNumberOfRows:columns:",
	"-insertColumn:",
	"-insertColumn:withCells:",
	"-insertRow:",
	"-insertRow:withCells:",
	"-intercellSpacing",
	"-makeCellAtRow:column:",
	"-putCell:atRow:column:",
	"-removeColumn:",
	"-removeRow:",
	"-renewRows:columns:",
	"-setCellSize:",
	"-setIntercellSpacing:",
	"-sortUsingFunction:context:",
	"-sortUsingSelector:",
	"-numberOfColumns",
	"-numberOfRows",
	"-getRow:column:forPoint:",
	"-getRow:column:ofCell:",
	"-setState:atRow:column:",
	"-deselectAllCells",
	"-deselectSelectedCell",
	"-selectAll:",
	"-selectCellAtRow:column:",
	"-selectCellWithTag:",
	"-selectedCell",
	"-selectedCells",
	"-selectedColumn",
	"-selectedRow",
	"-setSelectionFrom:to:anchor:highlight:",
	"-cellAtRow:column:",
	"-cellWithTag:",
	"-cells",
	"-backgroundColor",
	"-cellBackgroundColor",
	"-drawsBackground",
	"-drawsCellBackground",
	"-setBackgroundColor:",
	"-setCellBackgroundColor:",
	"-setDrawsBackground:",
	"-setDrawsCellBackground:",
	"-selectText:",
	"-selectTextAtRow:column:",
	"-textDidBeginEditing:",
	"-textDidChange:",
	"-textDidEndEditing:",
	"-textShouldBeginEditing:",
	"-textShouldEndEditing:",
	"-keyCell",
	"-setKeyCell:",
	"-nextText",
	"-previousText",
	"-setNextText:",
	"-setPreviousText:",
	"-tabKeyTraversesCells",
	"-setTabKeyTraversesCells:",
	"-setDelegate:",
	"-delegate",
	"-autosizesCells",
	"-setAutosizesCells:",
	"-setValidateSize:",
	"-sizeToCells",
	"-isAutoscroll",
	"-scrollCellToVisibleAtRow:column:",
	"-setAutoscroll:",
	"-setScrollable:",
	"-drawCellAtRow:column:",
	"-highlightCell:atRow:column:",
	"-setAction:",
	"-action",
	"-setDoubleAction:",
	"-doubleAction",
	"-setErrorAction:",
	"-errorAction",
	"-sendAction",
	"-sendAction:to:forAllCells:",
	"-sendDoubleAction",
	"-acceptsFirstMouse:",
	"-mouseDown:",
	"-mouseDownFlags",
	"-performKeyEquivalent:",
	"-resetCursorRects",
	"-toolTipForCell:",
	"-setToolTip:forCell:"
    );
    NSMediaLibraryBrowserController = (
	"+sharedMediaLibraryBrowserController",
	"-frame",
	"-togglePanel:",
	"-isVisible",
	"-setVisible:"
    );
    NSMenu = (
	"+menuZone",
	"+setMenuZone:",
	"+popUpContextMenu:withEvent:forView:",
	"+popUpContextMenu:withEvent:forView:withFont:",
	"-popUpMenuPositionItem:atLocation:inView:",
	"-popUpMenuPositioningItem:atLocation:inView:",
	"+menuBarVisible",
	"+setMenuBarVisible:",
	"-addItem:",
	"-addItemWithTitle:action:keyEquivalent:",
	"-attachedMenu",
	"-autoenablesItems",
	"-contextMenuRepresentation",
	"-delegate",
	"-helpRequested:",
	"-indexOfItem:",
	"-indexOfItemWithTag:",
	"-indexOfItemWithTarget:andAction:",
	"-indexOfItemWithRepresentedObject:",
	"-indexOfItemWithSubmenu:",
	"-indexOfItemWithTitle:",
	"-initWithTitle:",
	"-insertItem:atIndex:",
	"-insertItemWithTitle:action:keyEquivalent:atIndex:",
	"-isAttached",
	"-isTornOff",
	"-itemArray",
	"-itemAtIndex:",
	"-itemChanged:",
	"-itemWithTag:",
	"-itemWithTitle:",
	"-locationForSubmenu:",
	"-menuBarHeight",
	"-menuChangedMessagesEnabled",
	"-menuRepresentation",
	"-numberOfItems",
	"-performActionForItemAtIndex:",
	"-performKeyEquivalent:",
	"-removeItem:",
	"-removeItemAtIndex:",
	"-removeAllItems",
	"-setAutoenablesItems:",
	"-setContextMenuRepresentation:",
	"-setDelegate:",
	"-setMenuChangedMessagesEnabled:",
	"-setMenuRepresentation:",
	"-setSubmenu:forItem:",
	"-setSupermenu:",
	"-setTearOffMenuRepresentation:",
	"-setTitle:",
	"-sizeToFit",
	"-submenuAction:",
	"-supermenu",
	"-tearOffMenuRepresentation",
	"-title",
	"-update"
    );
    "NSMenu(GNUstepExtra)" = (
	"-close",
	"-closeTransient",
	"-display",
	"-displayTransient",
	"-isPartlyOffScreen",
	"-isTransient",
	"-nestedSetFrameOrigin:",
	"-setMain:",
	"-setTornOff:",
	"-shiftOnScreen",
	"-window",
	"-_ownedByPopUp",
	"-_owningPopUp",
	"-_setOwnedByPopUp:"
    );
    "NSMenuItem(GNUstepExtra)" = (
	"-setChangesState:",
	"-changesState"
    );
    NSMenuItemCell = (
	"-setHighlighted:",
	"-isHighlighted",
	"-setMenuItem:",
	"-menuItem",
	"-setMenuView:",
	"-menuView",
	"-calcSize",
	"-setNeedsSizing:",
	"-needsSizing",
	"-setNeedsDisplay:",
	"-needsDisplay",
	"-imageWidth",
	"-titleWidth",
	"-keyEquivalentWidth",
	"-stateImageWidth",
	"-imageRectForBounds:",
	"-keyEquivalentRectForBounds:",
	"-stateImageRectForBounds:",
	"-titleRectForBounds:",
	"-drawBorderAndBackgroundWithFrame:inView:",
	"-drawImageWithFrame:inView:",
	"-drawKeyEquivalentWithFrame:inView:",
	"-drawSeparatorItemWithFrame:inView:",
	"-drawStateImageWithFrame:inView:",
	"-drawTitleWithFrame:inView:"
    );
    NSMenuView = (
	"-initAsTearOff",
	"+menuBarHeight",
	"-setMenu:",
	"-menu",
	"-setHorizontal:",
	"-isHorizontal",
	"-setFont:",
	"-font",
	"-setHighlightedItemIndex:",
	"-highlightedItemIndex",
	"-setMenuItemCell:forItemAtIndex:",
	"-menuItemCellForItemAtIndex:",
	"-attachedMenuView",
	"-attachedMenu",
	"-isAttached",
	"-isTornOff",
	"-horizontalEdgePadding",
	"-setHorizontalEdgePadding:",
	"-itemChanged:",
	"-itemAdded:",
	"-itemRemoved:",
	"-detachSubmenu",
	"-attachSubmenuForItemAtIndex:",
	"-update",
	"-setNeedsSizing:",
	"-needsSizing",
	"-sizeToFit",
	"-stateImageOffset",
	"-stateImageWidth",
	"-imageAndTitleOffset",
	"-imageAndTitleWidth",
	"-keyEquivalentOffset",
	"-keyEquivalentWidth",
	"-innerRect",
	"-rectOfItemAtIndex:",
	"-indexOfItemAtPoint:",
	"-setNeedsDisplayForItemAtIndex:",
	"-locationForSubmenu:",
	"-setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:",
	"-performActionWithHighlightingForItemAtIndex:",
	"-trackWithEvent:"
    );
    NSMovie = (
	"+movieUnfilteredFileTypes",
	"+movieUnfilteredPasteboardTypes",
	"+canInitWithPasteboard:",
	"-initWithMovie:",
	"-initWithURL:byReference:",
	"-initWithPasteboard:",
	"-QTMovie",
	"-URL"
    );
    NSMovieView = (
	"-setMovie:",
	"-movie",
	"-start:",
	"-stop:",
	"-isPlaying",
	"-gotoPosterFrame:",
	"-gotoBeginning:",
	"-gotoEnd:",
	"-stepForward:",
	"-stepBack:",
	"-setRate:",
	"-rate",
	"-setVolume:",
	"-volume",
	"-setMuted:",
	"-isMuted",
	"-setLoopMode:",
	"-loopMode",
	"-setPlaysSelectionOnly:",
	"-playsSelectionOnly",
	"-setPlaysEveryFrame:",
	"-playsEveryFrame",
	"-showController:adjustingSize:",
	"-movieController",
	"-isControllerVisible",
	"-movieRect",
	"-resizeWithMagnification:",
	"-sizeForMagnification:",
	"-setEditable:",
	"-isEditable",
	"-cut:",
	"-copy:",
	"-paste:",
	"-clear:",
	"-undo:",
	"-selectAll:"
    );
    "NSMutableAttributedString(AppKit)" = (
	"-superscriptRange:",
	"-subscriptRange:",
	"-unscriptRange:",
	"-applyFontTraits:range:",
	"-setAlignment:range:",
	"-fixAttributesInRange:",
	"-fixFontAttributeInRange:",
	"-fixParagraphStyleAttributeInRange:",
	"-fixAttachmentAttributeInRange:",
	"-updateAttachmentsFromPath:",
	"-readFromURL:options:documentAttributes:",
	"-readFromData:options:documentAttributes:",
	"-readFromData:options:documentAttributes:error:",
	"-readFromURL:options:documentAttributes:error:",
	"-setBaseWritingDirection:range:"
    );
    "NSMutableAttributedString(NSTextAttachment)" = (
	"-updateAttachmentsFromPath:"
    );
    NSMutableFontCollection = (
	"+fontCollectionWithDescriptors:",
	"+fontCollectionWithAllAvailableDescriptors",
	"+fontCollectionWithLocale:",
	"+fontCollectionWithName:",
	"+fontCollectionWithName:visibility:",
	"-queryDescriptors",
	"-setQueryDescriptors:",
	"-exclusionDescriptors",
	"-setExclusionDescriptors:",
	"-addQueryForDescriptors:",
	"-removeQueryForDescriptors:"
    );
    NSMutableParagraphStyle = (
	"-setLineSpacing:",
	"-setParagraphSpacing:",
	"-setAlignment:",
	"-setFirstLineHeadIndent:",
	"-setHeadIndent:",
	"-setTailIndent:",
	"-setLineBreakMode:",
	"-setMinimumLineHeight:",
	"-setMaximumLineHeight:",
	"-addTabStop:",
	"-removeTabStop:",
	"-setTabStops:",
	"-setParagraphStyle:",
	"-setBaseWritingDirection:",
	"-setDefaultTabInterval:",
	"-setLineHeightMultiple:",
	"-setParagraphSpacingBefore:",
	"-setHeaderLevel:",
	"-setHyphenationFactor:",
	"-setTextBlocks:",
	"-setTextLists:",
	"-setTighteningFactorForTruncation:"
    );
    NSNib = (
	"-initWithContentsOfURL:",
	"-initWithNibNamed:bundle:",
	"-initWithNibData:bundle:",
	"-instantiateNibWithExternalNameTable:",
	"-instantiateNibWithOwner:topLevelObjects:",
	"-instantiateNibWithExternalNameTable:withZone:",
	"-instantiateWithOwner:topLevelObjects:"
    );
    NSNibConnector = (
	"-destination",
	"-establishConnection",
	"-label",
	"-replaceObject:withObject:",
	"-source",
	"-setDestination:",
	"-setLabel:",
	"-setSource:"
    );
    NSNibControlConnector = (
	"-establishConnection"
    );
    NSNibOutletConnector = (
	"-establishConnection"
    );
    "NSObject(NSAlertDelegate)" = (
	"-alertShowHelp:"
    );
    "NSObject(NSAnimation)" = (
	"-animation:didReachProgressMark:",
	"-animation:valueForProgress:",
	"-animationDidEnd:",
	"-animationDidStop:",
	"-animationShouldStart:"
    );
    "NSObject(NSApplicationDelegate)" = (
	"-application:openFileWithoutUI:",
	"-application:openFile:",
	"-application:openFiles:",
	"-application:openTempFile:",
	"-application:printFile:",
	"-application:printFiles:withSettings:showPrintPanels:",
	"-application:printFiles:",
	"-application:willPresentError:",
	"-applicationOpenUntitledFile:",
	"-applicationShouldOpenUntitledFile:",
	"-applicationShouldTerminate:",
	"-applicationShouldTerminate:",
	"-applicationShouldTerminateAfterLastWindowClosed:",
	"-applicationDidBecomeActive:",
	"-applicationDidFinishLaunching:",
	"-applicationDidHide:",
	"-applicationDidResignActive:",
	"-applicationDidUnhide:",
	"-applicationDidUpdate:",
	"-applicationWillBecomeActive:",
	"-applicationWillFinishLaunching:",
	"-applicationWillHide:",
	"-applicationWillResignActive:",
	"-applicationWillTerminate:",
	"-applicationWillUnhide:",
	"-applicationWillUpdate:",
	"-application:delegateHandlesKey:",
	"-applicationDockMenu:",
	"-applicationShouldHandleReopen:hasVisibleWindows:",
	"-applicationDidChangeScreenParameters:"
    );
    "NSObject(NSBrowserDelegate)" = (
	"-browser:createRowsForColumn:inMatrix:",
	"-browser:isColumnValid:",
	"-browser:numberOfRowsInColumn:",
	"-browser:selectCellWithString:inColumn:",
	"-browser:selectRow:inColumn:",
	"-browser:titleOfColumn:",
	"-browser:willDisplayCell:atRow:column:",
	"-browserDidScroll:",
	"-browserWillScroll:",
	"-browser:shouldSizeColumn:forUserResize:toWidth:",
	"-browser:sizeToFitWidthOfColumn:",
	"-browserColumnConfigurationDidChange:",
	"-browser:canDragRowsWithIndexes:inColumn:withEvent:",
	"-browser:numberOfChildrenOfItem:",
	"-browser:child:ofItem:",
	"-browser:isLeafItem:",
	"-browser:shouldEditItem:",
	"-browser:objectValueForItem:",
	"-browser:setObjectValue:forItem:",
	"-rootItemForBrowser:",
	"-browser:previewViewControllerForLeafItem:",
	"-browser:headerViewControllerForItem:",
	"-browser:didChangeLastColumn:toColumn:"
    );
    "NSObject(NSComboBoxCellDataSource)" = (
	"-numberOfItemsInComboBoxCell:",
	"-comboBoxCell:objectValueForItemAtIndex:",
	"-comboBoxCell:indexOfItemWithStringValue:",
	"-comboBoxCell:completedString:"
    );
    "NSObject(NSControlDelegate)" = (
	"-controlTextDidBeginEditing:",
	"-controlTextDidEndEditing:",
	"-controlTextDidChange:"
    );
    "NSObject(NSControlTextEditingDelegate)" = (
	"-control:isValidObject:",
	"-control:textShouldBeginEditing:",
	"-control:textShouldEndEditing:",
	"-control:didFailToFormatString:errorDescription:",
	"-control:didFailToValidatePartialString:errorDescription:",
	"-control:textView:doCommandBySelector:",
	"-control:textView:completions:forPartialWordRange:indexOfSelectedItem:"
    );
    "NSObject(NSDataLinkManagerDelegate)" = (
	"-dataLinkManager:didBreakLink:",
	"-dataLinkManager:isUpdateNeededForLink:",
	"-dataLinkManager:startTrackingLink:",
	"-dataLinkManager:stopTrackingLink:",
	"-dataLinkManagerCloseDocument:",
	"-dataLinkManagerDidEditLinks:",
	"-dataLinkManagerRedrawLinkOutlines:",
	"-dataLinkManagerTracksLinksIndividually:",
	"-copyToPasteboard:at:cheapCopyAllowed:",
	"-importFile:at:",
	"-pasteFromPasteboard:at:",
	"-showSelection:",
	"-windowForSelection:"
    );
    "NSObject(NSDataPickerCellDelegate)" = (
	"-datePickerCell:validateProposedDateValue:timeInterval:"
    );
    "NSObject(NSDraggingDestination)" = (
	"-draggingEntered:",
	"-draggingUpdated:",
	"-draggingExited:",
	"-prepareForDragOperation:",
	"-performDragOperation:",
	"-concludeDragOperation:",
	"-draggingEnded:",
	"-wantsPeriodicDraggingUpdates"
    );
    "NSObject(NSDraggingSource)" = (
	"-draggingSourceOperationMaskForLocal:",
	"-ignoreModifierKeysWhileDragging",
	"-draggedImage:beganAt:",
	"-draggedImage:endedAt:deposited:",
	"-draggedImage:endedAt:operation:",
	"-draggedImage:movedTo:",
	"-namesOfPromisedFilesDroppedAtDestination:"
    );
    "NSObject(NSDraggingSource107)" = (
	"-draggingSession:willBeginAtPoint:",
	"-draggingSession:movedToPoint:",
	"-draggingSession:endedAtPoint:operation:",
	"-ignoreModifierKeysForDraggingSession:"
    );
    "NSObject(NSEditor)" = (
	"-commitEditing",
	"-discardEditing",
	"-commitEditingWithDelegate:didCommitSelector:contextInfo:"
    );
    "NSObject(NSEditorRegistration)" = (
	"-objectDidBeginEditing:",
	"-objectDidEndEditing:"
    );
    "NSObject(NSFontManagerDelegate)" = (
	"-fontManager:willIncludeFont:"
    );
    "NSObject(NSFontPanelValidation)" = (
	"-validModesForFontPanel:"
    );
    "NSObject(NSGestureRecognizerDelegate)" = (
	"-gestureRecognizer:shouldAttemptToRecognizeWithEvent:",
	"-gestureRecognizerShouldBegin:",
	"-gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:",
	"-gestureRecognizer:shouldRequireFailureOfGestureRecognizer:",
	"-gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:"
    );
    "NSObject(NSKeyValueBindingCreation)" = (
	"+exposeBinding:",
	"-exposedBindings",
	"-valueClassForBinding:",
	"-bind:toObject:withKeyPath:options:",
	"-unbind:",
	"-infoForBinding:"
    );
    "NSObject(NSMenuActionResponder)" = (
	"-validateMenuItem:"
    );
    "NSObject(NSMenuDelegate)" = (
	"-menuNeedsUpdate:",
	"-numberOfItemsInMenu:",
	"-menu:updateItem:atIndex:shouldCancel:",
	"-menuHasKeyEquivalent:forEvent:target:action:"
    );
    "NSObject(NSNibAwaking)" = (
	"-awakeFromNib",
	"-prepareForInterfaceBuilder"
    );
    "NSObject(NSOpenSavePanelDelegate)" = (
	"-panel:shouldEnableURL:",
	"-panel:validateURL:error:",
	"-panel:didChangeToDirectoryURL:",
	"-panel:userEnteredFilename:confirmed:",
	"-panel:willExpand:",
	"-panelSelectionDidChange:",
	"-panel:isValidFilename:",
	"-panel:directoryDidChange:",
	"-panel:compareFilename:with:caseSensitive:",
	"-panel:shouldShowFilename:"
    );
    "NSObject(NSPasteboardItemDataProvider)" = (
	"-pasteboardFinishedWithDataProvider:"
    );
    "NSObject(NSPasteboardOwner)" = (
	"-pasteboard:provideDataForType:",
	"-pasteboard:provideDataForType:andVersion:",
	"-pasteboardChangedOwner:"
    );
    "NSObject(NSPasteboardReading)" = (
	"+readingOptionsForType:pasteboard:",
	"-initWithPasteboardPropertyList:ofType:"
    );
    "NSObject(NSPasteboardWriting)" = (
	"-writingOptionsForType:pasteboard:"
    );
    "NSObject(NSPlaceholder)" = (
	"+defaultPlaceholderForMarker:withBinding:",
	"+setDefaultPlaceholder:forMarker:withBinding:"
    );
    "NSObject(NSPopoverDelegate)" = (
	"-detachableWindowForPopover:",
	"-popoverDidClose:",
	"-popoverDidShow:",
	"-popoverShouldClose:",
	"-popoverWillClose:",
	"-popoverWillShow:"
    );
    "NSObject(NSRulerViewClientView)" = (
	"-rulerView:didAddMarker:",
	"-rulerView:didMoveMarker:",
	"-rulerView:didRemoveMarker:",
	"-rulerView:handleMouseDown:",
	"-rulerView:shouldAddMarker:",
	"-rulerView:shouldMoveMarker:",
	"-rulerView:shouldRemoveMarker:",
	"-rulerView:willAddMarker:atLocation:",
	"-rulerView:willMoveMarker:toLocation:",
	"-rulerView:willSetClientView:"
    );
    "NSObject(NSSavePanelDelegate)" = (
	"-panel:isValidFilename:",
	"-panel:compareFilename:with:caseSensitive:",
	"-panel:shouldShowFilename:",
	"-panel:userEnteredFilename:confirmed:",
	"-panel:willExpand:",
	"-panelSelectionDidChange:",
	"-panel:directoryDidChange:"
    );
    "NSObject(NSServicesRequests)" = (
	"-readSelectionFromPasteboard:",
	"-writeSelectionToPasteboard:types:",
	"-iconWindow"
    );
    "NSObject(NSSoundDelegate)" = (
	"-sound:didFinishPlaying:"
    );
    "NSObject(NSSpeechSynthesizerDelegate)" = (
	"-speechSynthesizer:didEncounterErrorAtIndex:ofString:message:",
	"-speechSynthesizer:didEncounterSyncMessage:",
	"-speechSynthesizer:didFinishSpeaking:",
	"-speechSynthesizer:willSpeakPhoneme:",
	"-speechSynthesizer:willSpeakWord:ofString:"
    );
    "NSObject(NSSplitViewDelegate)" = (
	"-splitView:resizeSubviewsWithOldSize:",
	"-splitView:constrainMinCoordinate:maxCoordinate:ofSubviewAt:",
	"-splitView:constrainSplitPosition:ofSubviewAt:",
	"-splitViewWillResizeSubviews:",
	"-splitViewDidResizeSubviews:",
	"-splitView:canCollapseSubview:",
	"-splitView:constrainMaxCoordinate:ofSubviewAt:",
	"-splitView:constrainMinCoordinate:ofSubviewAt:",
	"-splitView:additionalEffectiveRectOfDividerAtIndex:",
	"-splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:",
	"-splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:",
	"-splitView:shouldHideDividerAtIndex:",
	"-splitView:shouldAdjustSizeOfSubview:"
    );
    "NSObject(NSTableDataSource)" = (
	"-numberOfRowsInTableView:",
	"-tableView:objectValueForTableColumn:row:",
	"-tableView:setObjectValue:forTableColumn:row:",
	"-tableView:acceptDrop:row:dropOperation:",
	"-tableView:validateDrop:proposedRow:proposedDropOperation:",
	"-tableView:writeRows:toPasteboard:",
	"-tableView:sortDescriptorsDidChange:",
	"-tableView:writeRowsWithIndexes:toPasteboard:",
	"-tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:"
    );
    "NSObject(NSTableViewDelegate)" = (
	"-selectionShouldChangeInTableView:",
	"-tableView:didClickTableColumn:",
	"-tableView:didDragTableColumn:",
	"-tableView:mouseDownInHeaderOfTableColumn:",
	"-tableView:shouldEditTableColumn:row:",
	"-tableView:shouldSelectRow:",
	"-tableView:shouldSelectTableColumn:",
	"-tableView:willDisplayCell:forTableColumn:row:",
	"-tableView:dataCellForTableColumn:row:",
	"-tableViewColumnDidMove:",
	"-tableViewColumnDidResize:",
	"-tableViewSelectionDidChange:",
	"-tableViewSelectionIsChanging:",
	"-tableView:heightOfRow:",
	"-tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:",
	"-tableView:viewForTableColumn:row:",
	"-tableView:rowViewForRow:",
	"-tableView:didAddRowView:forRow:",
	"-tableView:didRemoveRowView:forRow:"
    );
    "NSObject(NSTextDelegate)" = (
	"-textShouldBeginEditing:",
	"-textShouldEndEditing:",
	"-textDidBeginEditing:",
	"-textDidEndEditing:",
	"-textDidChange:"
    );
    "NSObject(NSTextStorageDelegate)" = (
	"-textStorageWillProcessEditing:",
	"-textStorageDidProcessEditing:"
    );
    "NSObject(NSTextViewDelegate)" = (
	"-textView:clickedOnCell:inRect:",
	"-textView:clickedOnCell:inRect:atIndex:",
	"-textView:clickedOnLink:",
	"-textView:clickedOnLink:atIndex:",
	"-textView:doubleClickedOnCell:inRect:",
	"-textView:doubleClickedOnCell:inRect:atIndex:",
	"-textView:draggedCell:inRect:event:",
	"-textView:draggedCell:inRect:event:atIndex:",
	"-textView:willChangeSelectionFromCharacterRange:toCharacterRange:",
	"-textViewDidChangeSelection:",
	"-textView:shouldChangeTextInRange:replacementString:",
	"-textView:doCommandBySelector:",
	"-undoManagerForTextView:",
	"-textView:completions:forPartialWordRange:indexOfSelectedItem:",
	"-textView:willDisplayToolTip:forCharacterAtIndex:",
	"-textViewDidChangeTypingAttributes:",
	"-textView:shouldChangeTextInRanges:replacementStrings:",
	"-textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:",
	"-textView:shouldChangeTypingAttributes:toAttributes:"
    );
    "NSObject(NSToolbarDelegate)" = (
	"-toolbarDidRemoveItem:",
	"-toolbarWillAddItem:",
	"-toolbarSelectableItemIdentifiers:",
	"-toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:",
	"-toolbarAllowedItemIdentifiers:",
	"-toolbarDefaultItemIdentifiers:"
    );
    "NSObject(NSToolbarItemValidation)" = (
	"-validateToolbarItem:"
    );
    "NSObject(NSWindowDelegate)" = (
	"-windowShouldClose:",
	"-windowWillBeginSheet:",
	"-windowDidEndSheet:",
	"-windowShouldZoom:toFrame:",
	"-windowWillReturnUndoManager:",
	"-windowWillUseStandardFrame:defaultFrame:",
	"-window:willPositionSheet:usingRect:",
	"-windowWillResize:toSize:",
	"-windowWillReturnFieldEditor:toObject:",
	"-windowDidBecomeKey:",
	"-windowDidBecomeMain:",
	"-windowDidChangeScreen:",
	"-windowDidChangeScreenProfile:",
	"-windowDidDeminiaturize:",
	"-windowDidExpose:",
	"-windowDidMiniaturize:",
	"-windowDidMove:",
	"-windowDidResignKey:",
	"-windowDidResignMain:",
	"-windowDidResize:",
	"-windowDidUpdate:",
	"-windowWillClose:",
	"-windowWillMiniaturize:",
	"-windowWillMove:"
    );
    "NSObject(NSWindowDelegateAdditions)" = (
	"-attachedSheet"
    );
    NSObjectController = (
	"-initWithContent:",
	"-content",
	"-setContent:",
	"-objectClass",
	"-setObjectClass:",
	"-newObject",
	"-prepareContent",
	"-automaticallyPreparesContent",
	"-setAutomaticallyPreparesContent:",
	"-add:",
	"-addObject:",
	"-remove:",
	"-removeObject:",
	"-canAdd",
	"-canRemove",
	"-isEditable",
	"-setEditable:",
	"-selectedObjects",
	"-selection",
	"-validateMenuItem:",
	"-entityNameKey",
	"-setEntityName:",
	"-fetchPredicate",
	"-setFetchPredicate:",
	"-fetch:",
	"-fetchWithRequest:merge:error:",
	"-managedObjectContext",
	"-setManagedObjectContext:"
    );
    NSOpenGLContext = (
	"+clearCurrentContext",
	"+currentContext",
	"-CGLContextObj",
	"-clearDrawable",
	"-copyAttributesFromContext:withMask:",
	"-createTexture:fromView:internalFormat:",
	"-currentVirtualScreen",
	"-flushBuffer",
	"-getValues:forParameter:",
	"-initWithCGLContextObj:",
	"-initWithFormat:shareContext:",
	"-makeCurrentContext",
	"-setCurrentVirtualScreen:",
	"-setFullScreen",
	"-setOffScreen:width:height:rowbytes:",
	"-setValues:forParameter:",
	"-setView:",
	"-update",
	"-view"
    );
    NSOpenGLPixelFormat = (
	"-getValues:forAttribute:forVirtualScreen:",
	"-initWithAttributes:",
	"-numberOfVirtualScreens"
    );
    NSOpenGLView = (
	"+defaultPixelFormat",
	"-clearGLContext",
	"-setOpenGLContext:",
	"-openGLContext",
	"-initWithFrame:pixelFormat:",
	"-pixelFormat",
	"-setPixelFormat:",
	"-reshape",
	"-update",
	"-prepareOpenGL"
    );
    NSOpenPanel = (
	"+openPanel",
	"-runModalForTypes:",
	"-runModalForDirectory:file:types:",
	"-runModalForDirectory:file:types:relativeToWindow:",
	"-beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
	"-beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:",
	"-filenames",
	"-URLs",
	"-canChooseDirectories",
	"-canChooseFiles",
	"-setCanChooseDirectories:",
	"-setCanChooseFiles:",
	"-setResolvesAliases:",
	"-resolvesAliases",
	"-allowsMultipleSelection",
	"-setAllowsMultipleSelection:"
    );
    NSOutlineView = (
	"-autoResizesOutlineColumn",
	"-autosaveExpandedItems",
	"-collapseItem:",
	"-collapseItem:collapseChildren:",
	"-expandItem:",
	"-expandItem:expandChildren:",
	"-frameOfOutlineCellAtRow:",
	"-indentationMarkerFollowsCell",
	"-indentationPerLevel",
	"-isExpandable:",
	"-isItemExpanded:",
	"-itemAtRow:",
	"-levelForItem:",
	"-levelForRow:",
	"-outlineTableColumn",
	"-parentForItem:",
	"-reloadItem:",
	"-reloadItem:reloadChildren:",
	"-rowForItem:",
	"-setAutoresizesOutlineColumn:",
	"-setAutosaveExpandedItems:",
	"-setDropItem:dropChildIndex:",
	"-setIndentationMarkerFollowsCell:",
	"-setIndentationPerLevel:",
	"-setOutlineTableColumn:",
	"-shouldCollapseAutoExpandedItemsForDeposited:"
    );
    NSPDFImageRep = (
	"+imageRepWithData:",
	"-initWithData:",
	"-bounds",
	"-currentPage",
	"-setCurrentPage:",
	"-pageCount",
	"-PDFRepresentation"
    );
    NSPDFInfo = (
	"-URL",
	"-isFileExtensionHidden",
	"-setFileExtensionHidden:",
	"-tagNames",
	"-orientation",
	"-setOrientation:",
	"-paperSize",
	"-setPaperSize:",
	"-attributes"
    );
    NSPDFPanel = (
	"+panel",
	"-accessoryController",
	"-setAccessoryController:",
	"-options",
	"-setOptions:",
	"-defaultFileName",
	"-setDefaultFileName:",
	"-beginSheetWithPDFInfo:modalForWindow:completionHandler:"
    );
    NSPICTImageRep = (
	"+imageRepWithData:",
	"-initWithData:",
	"-boundingBox",
	"-PICTRepresentation"
    );
    NSPageController = (
	"-transitionStyle",
	"-setTransitionStyle:",
	"-delegate",
	"-setDelegate:",
	"-arrangedObjects",
	"-setArrangedObjects:",
	"-selectedIndex",
	"-setSelectedIndex:",
	"-selectedViewController",
	"-navigateForwardToObject:",
	"-completeTransition",
	"-navigateBack:",
	"-navigateForward:",
	"-takeSelectedIndexFrom:"
    );
    NSPageLayout = (
	"+pageLayout",
	"-runModal",
	"-runModalWithPrintInfo:",
	"-beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:",
	"-accessoryView",
	"-setAccessoryView:",
	"-convertOldFactor:newFactor:",
	"-pickedButton:",
	"-pickedOrientation:",
	"-pickedPaperSize:",
	"-pickedUnits:",
	"-printInfo",
	"-readPrintInfo",
	"-writePrintInfo"
    );
    NSPanel = (
	"-becomesKeyOnlyIfNeeded",
	"-isFloatingPanel",
	"-setBecomesKeyOnlyIfNeeded:",
	"-setFloatingPanel:",
	"-setWorksWhenModal:",
	"-worksWhenModal"
    );
    NSParagraphStyle = (
	"+defaultParagraphStyle",
	"-lineSpacing",
	"-paragraphSpacing",
	"-alignment",
	"-headIndent",
	"-tailIndent",
	"-firstLineHeadIndent",
	"-tabStops",
	"-minimumLineHeight",
	"-maximumLineHeight",
	"-lineBreakMode",
	"+defaultWritingDirectionForLanguage:",
	"-baseWritingDirection",
	"-defaultTabInterval",
	"-lineHeightMultiple",
	"-paragraphSpacingBefore",
	"-headerLevel",
	"-hyphenationFactor",
	"-textBlocks",
	"-textLists",
	"-tighteningFactorForTruncation"
    );
    NSPasteboard = (
	"+generalPasteboard",
	"+pasteboardWithName:",
	"+pasteboardWithUniqueName",
	"-releaseGlobally",
	"+pasteboardByFilteringData:ofType:",
	"+pasteboardByFilteringFile:",
	"+pasteboardByFilteringTypesInPasteboard:",
	"+typesFilterableTo:",
	"-name",
	"-addTypes:owner:",
	"-declareTypes:owner:",
	"-setData:forType:",
	"-setPropertyList:forType:",
	"-setString:forType:",
	"-writeFileContents:",
	"-writeFileWrapper:",
	"-availableTypeFromArray:",
	"-types",
	"-changeCount",
	"-dataForType:",
	"-propertyListForType:",
	"-readFileContentsType:toFile:",
	"-readFileWrapper",
	"-stringForType:"
    );
    "NSPasteboard(GNUstepExtensions)" = (
	"+mimeTypeForPasteboardType:",
	"+pasteboardTypeForMimeType:",
	"-setChangeCount:",
	"-setHistory:"
    );
    NSPasteboardItem = (
	"-types",
	"-types",
	"-availableTypeFromArray:",
	"-setDataProvider:forTypes:",
	"-setData:forType:",
	"-setString:forType:",
	"-setPropertyList:forType:",
	"-dataForType:",
	"-stringForType:",
	"-propertyListForType:"
    );
    NSPathCell = (
	"-mouseEntered:withFrame:inView:",
	"-mouseExited:withFrame:inView:",
	"-setAllowedTypes:",
	"-allowedTypes",
	"-pathStyle",
	"-setPathStyle:",
	"-placeholderAttributedString",
	"-setPlaceholderAttributedString:",
	"-placeholderString",
	"-setPlaceholderString:",
	"-backgroundColor",
	"-setBackgroundColor:",
	"+pathComponentCellClass",
	"+setPathComponentCellClass:",
	"-rectOfPathComponentCell:withFrame:inView:",
	"-pathComponentCellAtPoint:withFrame:inView:",
	"-clickedPathComponentCell",
	"-pathComponentCells",
	"-setPathComponentCells:",
	"-doubleAction",
	"-setDoubleAction:",
	"-URL",
	"-setURL:",
	"-delegate",
	"-setDelegate:"
    );
    NSPathComponentCell = (
	"-image",
	"-setImage:",
	"-URL",
	"-setURL:"
    );
    NSPathControl = (
	"-setPathStyle:",
	"-pathStyle",
	"-backgroundColor",
	"-setBackgroundColor:",
	"-clickedPathComponentCell",
	"-pathComponentCells",
	"-setPathComponentCells:",
	"-doubleAction",
	"-setDoubleAction:",
	"-URL",
	"-setURL:",
	"-delegate",
	"-setDelegate:",
	"-setDraggingSourceOperationMask:forLocal:",
	"-allowedTypes",
	"-setAllowedTypes:",
	"-clickedPathItem",
	"-pathItems",
	"-setPathItems:",
	"-placeholderAttributedString",
	"-setPlaceholderAttributedString:",
	"-placeholderString",
	"-setPlaceholderString:"
    );
    NSPathControlItem = (
	"-URL",
	"-setURL:",
	"-attributedTitle",
	"-setAttributedTitle:",
	"-image",
	"-setImage:",
	"-title",
	"-setTitle:"
    );
    NSPersistentDocument = (
	"-managedObjectContext",
	"-managedObjectModel",
	"-configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:",
	"-persistentStoreTypeForFileType:",
	"-hasUndoManager",
	"-setHasUndoManager:",
	"-setUndoManager:",
	"-isDocumentEdited",
	"-readFromURL:ofType:error:",
	"-revertToContentsOfURL:ofType:error:",
	"-writeToURL:ofType:forSaveOperation:originalContentsURL:error:",
	"-canAsynchronouslyWriteToURL:ofType:forSaveOperation:",
	"-configurePersistentStoreCoordinatorForURL:ofType:error:"
    );
    NSPopUpButton = (
	"-initWithFrame:pullsDown:",
	"-setPullsDown:",
	"-pullsDown",
	"-setAutoenablesItems:",
	"-autoenablesItems",
	"-addItemWithTitle:",
	"-addItemsWithTitles:",
	"-insertItemWithTitle:atIndex:",
	"-removeAllItems",
	"-removeItemWithTitle:",
	"-removeItemAtIndex:",
	"-selectedItem",
	"-titleOfSelectedItem",
	"-indexOfSelectedItem",
	"-selectItem:",
	"-selectItemAtIndex:",
	"-selectItemWithTitle:",
	"-selectItemWithTag:",
	"-numberOfItems",
	"-itemArray",
	"-itemAtIndex:",
	"-itemTitleAtIndex:",
	"-itemTitles",
	"-itemWithTitle:",
	"-lastItem",
	"-indexOfItem:",
	"-indexOfItemWithTag:",
	"-indexOfItemWithTitle:",
	"-indexOfItemWithRepresentedObject:",
	"-indexOfItemWithTarget:andAction:",
	"-setPreferredEdge:",
	"-preferredEdge",
	"-setTitle:",
	"-synchronizeTitleAndSelectedItem"
    );
    NSPopUpButtonCell = (
	"-initTextCell:pullsDown:",
	"-selectedItem",
	"-indexOfSelectedItem",
	"-synchronizeTitleAndSelectedItem",
	"-selectItem:",
	"-selectItemAtIndex:",
	"-selectItemWithTitle:",
	"-setTitle:",
	"-setMenu:",
	"-menu",
	"-setPullsDown:",
	"-pullsDown",
	"-setAutoenablesItems:",
	"-autoenablesItems",
	"-setPreferredEdge:",
	"-preferredEdge",
	"-setUsesItemFromMenu:",
	"-usesItemFromMenu",
	"-setAltersStateOfSelectedItem:",
	"-altersStateOfSelectedItem",
	"-arrowPosition",
	"-setArrowPosition:",
	"-addItemWithTitle:",
	"-addItemsWithTitles:",
	"-insertItemWithTitle:atIndex:",
	"-removeItemWithTitle:",
	"-removeItemAtIndex:",
	"-removeAllItems",
	"-itemArray",
	"-numberOfItems",
	"-indexOfItem:",
	"-indexOfItemWithTitle:",
	"-indexOfItemWithTag:",
	"-indexOfItemWithRepresentedObject:",
	"-indexOfItemWithTarget:andAction:",
	"-itemAtIndex:",
	"-itemWithTitle:",
	"-lastItem",
	"-itemTitleAtIndex:",
	"-itemTitles",
	"-titleOfSelectedItem",
	"-attachPopUpWithFrame:inView:",
	"-dismissPopUp",
	"-performClickWithFrame:inView:"
    );
    NSPopover = (
	"-setAnimates:",
	"-animates",
	"-setAppearance:",
	"-appearance",
	"-setBehavior:",
	"-behavior",
	"-setContentSize:",
	"-contentSize",
	"-setContentViewController:",
	"-contentViewController",
	"-setDelegate:",
	"-delegate",
	"-setPositioningRect:",
	"-positioningRect",
	"-isShown",
	"-close",
	"-performClose:",
	"-showRelativeToRect:ofView:preferredEdge:"
    );
    NSPredicateEditor = (
	"-rowTemplates",
	"-setRowTemplates:"
    );
    NSPredicateEditorRowTemplate = (
	"+templatesWithAttributeKeyPaths:inEntityDescription:",
	"-compoundTypes",
	"-displayableSubpredicatesOfPredicate:",
	"-initWithCompoundTypes:",
	"-initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:",
	"-initWithLeftExpressions:rightExpressions:modifier:operators:options:",
	"-leftExpressions",
	"-matchForPredicate:",
	"-modifier",
	"-operators",
	"-options",
	"-predicateWithSubpredicates:",
	"-rightExpressionAttributeType",
	"-rightExpressions",
	"-setPredicate:",
	"-templateViews"
    );
    NSPrintInfo = (
	"-initWithDictionary:",
	"+setSharedPrintInfo:",
	"+sharedPrintInfo",
	"+sizeForPaperName:",
	"-bottomMargin",
	"-leftMargin",
	"-orientation",
	"-paperName",
	"-paperSize",
	"-rightMargin",
	"-setBottomMargin:",
	"-setLeftMargin:",
	"-setOrientation:",
	"-setPaperName:",
	"-setPaperSize:",
	"-setRightMargin:",
	"-setTopMargin:",
	"-topMargin",
	"-imageablePageBounds",
	"-localizedPaperName",
	"-horizontalPagination",
	"-setHorizontalPagination:",
	"-setVerticalPagination:",
	"-verticalPagination",
	"-isHorizontallyCentered",
	"-isVerticallyCentered",
	"-setHorizontallyCentered:",
	"-setVerticallyCentered:",
	"+defaultPrinter",
	"+setDefaultPrinter:",
	"-printer",
	"-setPrinter:",
	"-jobDisposition",
	"-setJobDisposition:",
	"-setUpPrintOperationDefaultValues",
	"-dictionary"
    );
    NSPrintOperation = (
	"+EPSOperationWithView:insideRect:toData:",
	"+EPSOperationWithView:insideRect:toData:printInfo:",
	"+EPSOperationWithView:insideRect:toPath:printInfo:",
	"+printOperationWithView:",
	"+printOperationWithView:printInfo:",
	"+PDFOperationWithView:insideRect:toData:",
	"+PDFOperationWithView:insideRect:toData:printInfo:",
	"+PDFOperationWithView:insideRect:toPath:printInfo:",
	"-initEPSOperationWithView:insideRect:toData:printInfo:",
	"-initWithView:printInfo:",
	"+currentOperation",
	"+setCurrentOperation:",
	"-isEPSOperation",
	"-isCopyingOperation",
	"-printPanel",
	"-showPanels",
	"-setPrintPanel:",
	"-setShowPanels:",
	"-showsPrintPanel",
	"-setShowsPrintPanel:",
	"-showsProgressPanel",
	"-setShowsProgressPanel:",
	"-accessoryView",
	"-setAccessoryView:",
	"-createContext",
	"-context",
	"-destroyContext",
	"-currentPage",
	"-pageOrder",
	"-setPageOrder:",
	"-cleanUpOperation",
	"-deliverResult",
	"-runOperation",
	"-runOperationModalForWindow:delegate:didRunSelector:contextInfo:",
	"-canSpawnSeparateThread",
	"-setCanSpawnSeparateThread:",
	"-jobStyleHint",
	"-setJobStyleHint:",
	"-printInfo",
	"-setPrintInfo:",
	"-view"
    );
    "NSPrintOperation(Private)" = (
	"-initWithView:insideRect:toData:printInfo:"
    );
    NSPrintPanel = (
	"+printPanel",
	"-setAccessoryView:",
	"-accessoryView",
	"-accessoryControllers",
	"-addAccessoryController:",
	"-removeAccessoryController:",
	"-defaultButtonTitle",
	"-setDefaultButtonTitle:",
	"-options",
	"-setOptions:",
	"-helpAnchor",
	"-setHelpAnchor:",
	"-printInfo",
	"-runModalWithPrintInfo:",
	"-runModal",
	"-beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:",
	"-jobStyleHint",
	"-setJobStyleHint:",
	"-pickedButton:",
	"-pickedAllPages:",
	"-pickedLayoutList:",
	"-updateFromPrintInfo",
	"-finalWritePrintInfo"
    );
    "NSPrintPanel(Private)" = (
	"-_setStatusStringValue:",
	"-_getSavePath"
    );
    NSPrinter = (
	"+printerWithName:",
	"+printerWithType:",
	"+printerNames",
	"+printerTypes",
	"-host",
	"-name",
	"-note",
	"-type",
	"-acceptsBinary",
	"-imageRectForPaper:",
	"-pageSizeForPaper:",
	"-isColor",
	"-isFontAvailable:",
	"-languageLevel",
	"-isOutputStackInReverseOrder",
	"-booleanForKey:inTable:",
	"-deviceDescription",
	"-floatForKey:inTable:",
	"-intForKey:inTable:",
	"-rectForKey:inTable:",
	"-sizeForKey:inTable:",
	"-stringForKey:inTable:",
	"-stringListForKey:inTable:",
	"-statusForTable:",
	"-isKey:inTable:",
	"-encodeWithCoder:",
	"-initWithCoder:"
    );
    "NSPrinter(PPDParsing)" = (
	"-parsePPDAtPath:"
    );
    "NSPrinter(Private)" = (
	"-initWithName:withType:withHost:withNote:"
    );
    NSProgressIndicator = (
	"-animate:",
	"-animationDelay",
	"-setAnimationDelay:",
	"-startAnimation:",
	"-stopAnimation:",
	"-usesThreadedAnimation",
	"-setUsesThreadedAnimation:",
	"-incrementBy:",
	"-doubleValue",
	"-setDoubleValue:",
	"-minValue",
	"-setMinValue:",
	"-maxValue",
	"-setMaxValue:",
	"-isBezeled",
	"-setBezeled:",
	"-isIndeterminate",
	"-setIndeterminate:",
	"-controlSize",
	"-setControlSize:",
	"-controlTint",
	"-setControlTint:",
	"-isDisplayedWhenStopped",
	"-setDisplayedWhenStopped:",
	"-setStyle:",
	"-style",
	"-sizeToFit"
    );
    "NSProgressIndicator(GNUstepExtensions)" = (
	"-isVertical",
	"-setVertical:"
    );
    NSResponder = (
	"-nextResponder",
	"-setNextResponder:",
	"-acceptsFirstResponder",
	"-becomeFirstResponder",
	"-resignFirstResponder",
	"-performKeyEquivalent:",
	"-tryToPerform:with:",
	"-flagsChanged:",
	"-helpRequested:",
	"-keyDown:",
	"-keyUp:",
	"-mouseDown:",
	"-mouseDragged:",
	"-mouseEntered:",
	"-mouseExited:",
	"-mouseMoved:",
	"-mouseUp:",
	"-noResponderFor:",
	"-otherMouseDown:",
	"-otherMouseDragged:",
	"-otherMouseUp:",
	"-rightMouseDown:",
	"-rightMouseDragged:",
	"-rightMouseUp:",
	"-scrollWheel:",
	"-validRequestorForSendType:returnType:",
	"-encodeWithCoder:",
	"-initWithCoder:",
	"-interpretKeyEvents:",
	"-performMnemonic:",
	"-flushBufferedKeyEvents",
	"-doCommandBySelector:",
	"-insertText:",
	"-undoManager",
	"-menu",
	"-setMenu:",
	"-interfaceStyle",
	"-setInterfaceStyle:",
	"-shouldBeTreatedAsInkEvent:",
	"-presentError:",
	"-presentError:modalForWindow:delegate:didPresentSelector:contextInfo:",
	"-willPresentError:"
    );
    "NSResponder(OptionalActionMethods)" = (
	"-capitalizeWord:",
	"-centerSelectionInVisibleArea:",
	"-changeCaseOfLetter:",
	"-complete:",
	"-deleteBackward:",
	"-deleteForward:",
	"-deleteToBeginningOfLine:",
	"-deleteToBeginningOfParagraph:",
	"-deleteToEndOfLine:",
	"-deleteToEndOfParagraph:",
	"-deleteToMark:",
	"-deleteWordBackward:",
	"-deleteWordForward:",
	"-indent:",
	"-insertBacktab:",
	"-insertNewline:",
	"-insertNewlineIgnoringFieldEditor:",
	"-insertParagraphSeparator:",
	"-insertTab:",
	"-insertTabIgnoringFieldEditor:",
	"-lowercaseWord:",
	"-moveBackward:",
	"-moveBackwardAndModifySelection:",
	"-moveDown:",
	"-moveDownAndModifySelection:",
	"-moveForward:",
	"-moveForwardAndModifySelection:",
	"-moveLeft:",
	"-moveRight:",
	"-moveToBeginningOfDocument:",
	"-moveToBeginningOfLine:",
	"-moveToBeginningOfParagraph:",
	"-moveToEndOfDocument:",
	"-moveToEndOfLine:",
	"-moveToEndOfParagraph:",
	"-moveUp:",
	"-moveUpAndModifySelection:",
	"-moveWordBackward:",
	"-moveWordBackwardAndModifySelection:",
	"-moveWordForward:",
	"-moveWordForwardAndModifySelection:",
	"-pageDown:",
	"-pageUp:",
	"-scrollLineDown:",
	"-scrollLineUp:",
	"-scrollPageDown:",
	"-scrollPageUp:",
	"-scrollToBeginningOfDocument:",
	"-scrollToEndOfDocument:",
	"-selectAll:",
	"-selectLine:",
	"-selectParagraph:",
	"-selectToMark:",
	"-selectWord:",
	"-setMark:",
	"-showContextHelp:",
	"-swapWithMark:",
	"-transpose:",
	"-transposeWords:",
	"-uppercaseWord:",
	"-yank:",
	"-cancelOperation:",
	"-deleteBackwardByDecomposingPreviousCharacter:",
	"-moveLeftAndModifySelection:",
	"-moveRightAndModifySelection:",
	"-moveWordLeft:",
	"-moveWordLeftAndModifySelection:",
	"-moveWordRight:",
	"-moveWordRightAndModifySelection:",
	"-insertContainerBreak:",
	"-insertLineBreak:",
	"-tabletPoint:",
	"-tabletProximity:"
    );
    NSRuleEditor = (
	"-addRow:",
	"-canRemoveAllRows",
	"-criteriaForRow:",
	"-criteriaKeyPath",
	"-delegate",
	"-displayValuesForRow:",
	"-displayValuesKeyPath",
	"-formattingDictionary",
	"-formattingStringsFilename",
	"-insertRowAtIndex:withType:asSubrowOfRow:animate:",
	"-isEditable",
	"-nestingMode",
	"-numberOfRows",
	"-parentRowForRow:",
	"-predicate",
	"-predicateForRow:",
	"-reloadCriteria",
	"-reloadPredicate",
	"-removeRowAtIndex:",
	"-removeRowsAtIndexes:includeSubrows:",
	"-rowClass",
	"-rowForDisplayValue:",
	"-rowHeight",
	"-rowTypeForRow:",
	"-rowTypeKeyPath",
	"-selectedRowIndexes",
	"-selectRowIndexes:byExtendingSelection:",
	"-setCanRemoveAllRows:",
	"-setCriteria:andDisplayValues:forRowAtIndex:",
	"-setCriteriaKeyPath:",
	"-setDelegate:",
	"-setDisplayValuesKeyPath:",
	"-setEditable:",
	"-setFormattingDictionary:",
	"-setFormattingStringsFilename:",
	"-setNestingMode:",
	"-setRowClass:",
	"-setRowHeight:",
	"-setRowTypeKeyPath:",
	"-setSubrowsKeyPath:",
	"-subrowIndexesForRow:",
	"-subrowsKeyPath"
    );
    NSRulerMarker = (
	"-initWithRulerView:markerLocation:image:imageOrigin:",
	"-ruler",
	"-setImage:",
	"-image",
	"-setImageOrigin:",
	"-imageOrigin",
	"-imageRectInRuler",
	"-thicknessRequiredInRuler",
	"-setMovable:",
	"-isMovable",
	"-setRemovable:",
	"-isRemovable",
	"-setMarkerLocation:",
	"-markerLocation",
	"-setRepresentedObject:",
	"-representedObject",
	"-drawRect:",
	"-isDragging",
	"-trackMouse:adding:"
    );
    NSRulerView = (
	"-initWithScrollView:orientation:",
	"+registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:",
	"-setMeasurementUnits:",
	"-measurementUnits",
	"-setClientView:",
	"-clientView",
	"-setAccessoryView:",
	"-accessoryView",
	"-setOriginOffset:",
	"-originOffset",
	"-setMarkers:",
	"-markers",
	"-addMarker:",
	"-removeMarker:",
	"-trackMarker:withMouseEvent:",
	"-moveRulerlineFromLocation:toLocation:",
	"-drawHashMarksAndLabelsInRect:",
	"-drawMarkersInRect:",
	"-invalidateHashMarks",
	"-setScrollView:",
	"-scrollView",
	"-setOrientation:",
	"-orientation",
	"-setReservedThicknessForAccessoryView:",
	"-reservedThicknessForAccessoryView",
	"-setReservedThicknessForMarkers:",
	"-reservedThicknessForMarkers",
	"-setRuleThickness:",
	"-ruleThickness",
	"-requiredThickness",
	"-baselineLocation",
	"-isFlipped"
    );
    NSRunningApplication = (
	"-isTerminated",
	"-isFinishedLaunching",
	"-isHidden",
	"-isActive",
	"-activationPolicy",
	"-localizedName",
	"-bundleIdentifier",
	"-bundleURL",
	"-executableURL",
	"-processIdentifier",
	"-executableArchitecture",
	"-launchDate",
	"-icon",
	"-ownsMenuBar",
	"-isTerminated",
	"-isFinishedLaunching",
	"-isHidden",
	"-isActive",
	"-activationPolicy",
	"-localizedName",
	"-bundleIdentifier",
	"-bundleURL",
	"-executableURL",
	"-processIdentifier",
	"-executableArchitecture",
	"-launchDate",
	"-icon",
	"-ownsMenuBar",
	"-hide",
	"-unhide",
	"-activateWithOptions:",
	"-terminate",
	"-forceTerminate",
	"+runningApplicationsWithBundleIdentifier:",
	"+runningApplicationWithProcessIdentifier:",
	"+currentApplication",
	"+terminateAutomaticallyTerminableApplications"
    );
    NSSavePanel = (
	"+savePanel",
	"-setAccessoryView:",
	"-accessoryView",
	"-setTitle:",
	"-title",
	"-setPrompt:",
	"-prompt",
	"-setNameFieldStringValue:",
	"-nameFieldStringValue",
	"-setNameFieldLabel:",
	"-nameFieldLabel",
	"-setMessage:",
	"-message",
	"-setCanSelectHiddenExtension:",
	"-canSelectHiddenExtension",
	"-isExtensionHidden",
	"-setExtensionHidden:",
	"-showsHiddenFiles",
	"-setShowsHiddenFiles:",
	"-setDirectory:",
	"-setDirectoryURL:",
	"-requiredFileType",
	"-setRequiredFileType:",
	"-setAllowedFileTypes:",
	"-setAllowsOtherFileTypes:",
	"-allowedFileTypes",
	"-allowsOtherFileTypes",
	"-setTreatsFilePackagesAsDirectories:",
	"-treatsFilePackagesAsDirectories",
	"-validateVisibleColumns",
	"-setCanCreateDirectories:",
	"-canCreateDirectories",
	"-runModal",
	"-runModalForDirectory:file:",
	"-runModalForDirectory:file:relativeToWindow:",
	"-beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
	"-beginSheetModalForWindow:completionHandler:",
	"-beginWithCompletionHandler:",
	"-directory",
	"-filename",
	"-URL",
	"-isExpanded",
	"-directoryURL",
	"-ok:",
	"-cancel:",
	"-selectText:"
    );
    NSScreen = (
	"+mainScreen",
	"+deepestScreen",
	"+screens",
	"+resetScreens",
	"-depth",
	"-frame",
	"-deviceDescription",
	"-supportedWindowDepths",
	"-visibleFrame",
	"-screenNumber",
	"-userSpaceScaleFactor",
	"-backingScaleFactor"
    );
    NSScrollView = (
	"+contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:",
	"+frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:",
	"-contentSize",
	"-documentVisibleRect",
	"-setBackgroundColor:",
	"-backgroundColor",
	"-setBorderType:",
	"-borderType",
	"-setContentView:",
	"-contentView",
	"-setDocumentView:",
	"-documentView",
	"-setDocumentCursor:",
	"-documentCursor",
	"-setHorizontalScroller:",
	"-horizontalScroller",
	"-setHasHorizontalScroller:",
	"-hasHorizontalScroller",
	"-setVerticalScroller:",
	"-verticalScroller",
	"-setHasVerticalScroller:",
	"-hasVerticalScroller",
	"+setRulerViewClass:",
	"+rulerViewClass",
	"-setHasHorizontalRuler:",
	"-hasHorizontalRuler",
	"-setHorizontalRulerView:",
	"-horizontalRulerView",
	"-setHasVerticalRuler:",
	"-hasVerticalRuler",
	"-setVerticalRulerView:",
	"-verticalRulerView",
	"-setRulersVisible:",
	"-rulersVisible",
	"-setLineScroll:",
	"-lineScroll",
	"-setPageScroll:",
	"-pageScroll",
	"-setScrollsDynamically:",
	"-scrollsDynamically",
	"-horizontalLineScroll",
	"-horizontalPageScroll",
	"-verticalLineScroll",
	"-verticalPageScroll",
	"-setHorizontalLineScroll:",
	"-setHorizontalPageScroll:",
	"-setVerticalLineScroll:",
	"-setVerticalPageScroll:",
	"-setDrawsBackground:",
	"-drawsBackground",
	"-autohidesScrollers",
	"-setAutohidesScrollers:",
	"-horizontalScrollElasticity",
	"-setHorizontalScrollElasticity:",
	"-verticalScrollElasticity",
	"-setVerticalScrollElasticity:",
	"-allowsMagnification",
	"-setAllowsMagnification:",
	"-automaticallyAdjustsContentInsets",
	"-setAutomaticallyAdjustsContentInsets:",
	"-contentInsets",
	"-setContentInsets:",
	"-scrollerInsets",
	"-setScrollerInsets:",
	"-automaticallyAdjustsContentInsets",
	"-setAutomaticallyAdjustsContentInsets:",
	"-contentInsets",
	"-setContentInsets:",
	"-scrollerInsets",
	"-setScrollerInsets:",
	"-reflectScrolledClipView:",
	"-tile",
	"-scrollerStyle",
	"-setScrollerStyle:",
	"-scrollerKnobStyle",
	"-setScrollerKnobStyle:",
	"-flashScrollers"
    );
    NSScroller = (
	"+preferredScrollerStyle",
	"-scrollerStyle",
	"-setScrollerStyle:",
	"-knobStyle",
	"-setKnobStyle:",
	"-flashScroller",
	"+scrollerWidth",
	"-arrowsPosition",
	"-checkSpaceForParts",
	"-rectForPart:",
	"-setArrowsPosition:",
	"-usableParts",
	"-knobProportion",
	"-setFloatValue:knobProportion:",
	"-drawArrow:highlight:",
	"-drawKnobSlot",
	"-drawKnob",
	"-drawParts",
	"-highlight:",
	"-hitPart",
	"-testPart:",
	"-trackKnob:",
	"-trackScrollButtons:",
	"+scrollerWidthForControlSize:",
	"-setControlSize:",
	"-controlSize",
	"-setControlTint:",
	"-controlTint",
	"-setKnobProportion:",
	"-drawKnobSlotInRect:highlight:"
    );
    NSScrubberLayout = (
	"-layoutAttributesClass",
	"-scrubber",
	"-visibleRect",
	"-invalidateLayout",
	"-prepareLayout",
	"-scrubberContentSize",
	"-layoutAttributesForItemAtIndex:",
	"-layoutAttributesForItemsInRect:",
	"-shouldInvalidateLayoutForHighlightChange",
	"-shouldInvalidateLayoutForSelectionChange",
	"-shouldInvalidateLayoutForChangeFromVisibleRect:toVisibleRect:",
	"-automaticallyMirrorsInRightToLeftLayout"
    );
    NSScrubberLayoutAttributes = (
	"+layoutAttributesForItemAtIndex:",
	"-alpha",
	"-frame",
	"-itemIndex"
    );
    NSSearchField = (
	"-recentSearches",
	"-recentsAutosaveName",
	"-setRecentSearches:",
	"-setRecentsAutosaveName:"
    );
    NSSearchFieldCell = (
	"-cancelButtonCell",
	"-setCancelButtonCell:",
	"-resetCancelButtonCell",
	"-searchButtonCell",
	"-setSearchButtonCell:",
	"-resetSearchButtonCell",
	"-cancelButtonRectForBounds:",
	"-searchButtonRectForBounds:",
	"-searchTextRectForBounds:",
	"-searchMenuTemplate",
	"-setSearchMenuTemplate:",
	"-sendsWholeSearchString",
	"-setSendsWholeSearchString:",
	"-sendsSearchStringImmediately",
	"-setSendsSearchStringImmediately:",
	"-maximumRecents",
	"-setMaximumRecents:",
	"-recentSearches",
	"-recentsAutosaveName",
	"-setRecentSearches:",
	"-setRecentsAutosaveName:"
    );
    NSSecureTextField = (
	"-setEchosBullets:",
	"-echosBullets"
    );
    NSSecureTextFieldCell = (
	"-setEchosBullets:",
	"-echosBullets"
    );
    NSSegmentedCell = (
	"-setSegmentCount:",
	"-segmentCount",
	"-setSelectedSegment:",
	"-setSelected:forSegment:",
	"-selectedSegment",
	"-selectSegmentWithTag:",
	"-makeNextSegmentKey",
	"-makePreviousSegmentKey",
	"-setTrackingMode:",
	"-trackingMode",
	"-setWidth:forSegment:",
	"-widthForSegment:",
	"-setImage:forSegment:",
	"-imageForSegment:",
	"-setLabel:forSegment:",
	"-labelForSegment:",
	"-isSelectedForSegment:",
	"-setEnabled:forSegment:",
	"-isEnabledForSegment:",
	"-setMenu:forSegment:",
	"-menuForSegment:",
	"-setToolTip:forSegment:",
	"-toolTipForSegment:",
	"-setTag:forSegment:",
	"-tagForSegment:",
	"-drawSegment:inFrame:withView:",
	"-setSegmentStyle:",
	"-segmentStyle"
    );
    NSSegmentedControl = (
	"-setSegmentCount:",
	"-segmentCount",
	"-setSelectedSegment:",
	"-selectedSegment",
	"-selectSegmentWithTag:",
	"-setWidth:forSegment:",
	"-widthForSegment:",
	"-setImage:forSegment:",
	"-imageForSegment:",
	"-setLabel:forSegment:",
	"-labelForSegment:",
	"-setMenu:forSegment:",
	"-menuForSegment:",
	"-setSelected:forSegment:",
	"-isSelectedForSegment:",
	"-setEnabled:forSegment:",
	"-isEnabledForSegment:",
	"-setSegmentStyle:",
	"-segmentStyle"
    );
    NSSelection = (
	"+allSelection",
	"+currentSelection",
	"+emptySelection",
	"+selectionWithDescriptionData:",
	"-initWithDescriptionData:",
	"-initWithPasteboard:",
	"-descriptionData",
	"-isWellKnownSelection",
	"-writeToPasteboard:"
    );
    NSShadow = (
	"-shadowOffset",
	"-setShadowOffset:",
	"-shadowBlurRadius",
	"-setShadowBlurRadius:",
	"-shadowColor",
	"-setShadowColor:",
	"-set"
    );
    NSSharingServicePickerToolbarItem = (
	"-activityItemsConfiguration",
	"-setActivityItemsConfiguration:",
	"-delegate",
	"-setDelegate:"
    );
    NSSlider = (
	"-altIncrementValue",
	"-image",
	"-isVertical",
	"-knobThickness",
	"-setAltIncrementValue:",
	"-setImage:",
	"-setKnobThickness:",
	"-title",
	"-titleCell",
	"-titleColor",
	"-titleFont",
	"-setTitle:",
	"-setTitleCell:",
	"-setTitleColor:",
	"-setTitleFont:",
	"-maxValue",
	"-minValue",
	"-setMaxValue:",
	"-setMinValue:",
	"-acceptsFirstMouse:",
	"-allowsTickMarkValuesOnly",
	"-closestTickMarkValueToValue:",
	"-indexOfTickMarkAtPoint:",
	"-numberOfTickMarks",
	"-rectOfTickMarkAtIndex:",
	"-setAllowsTickMarkValuesOnly:",
	"-setNumberOfTickMarks:",
	"-setTickMarkPosition:",
	"-tickMarkPosition",
	"-tickMarkValueAtIndex:"
    );
    NSSliderAccessory = (
	"+accessoryWithImage:",
	"-behavior",
	"-setBehavior:",
	"-isEnabled",
	"-setEnabled:"
    );
    NSSliderAccessoryBehavior = (
	"+behaviorWithHandler:",
	"+behaviorWithTarget:action:",
	"+automaticBehavior",
	"+valueResetBehavior",
	"+valueStepBehavior",
	"-handleAction:"
    );
    NSSliderCell = (
	"-altIncrementValue",
	"+prefersTrackingUntilMouseUp",
	"-trackRect",
	"-setAltIncrementValue:",
	"-knobRectFlipped:",
	"-drawBarInside:flipped:",
	"-drawKnob",
	"-drawKnob:",
	"-knobThickness",
	"-isVertical",
	"-title",
	"-titleCell",
	"-titleColor",
	"-titleFont",
	"-sliderType",
	"-setKnobThickness:",
	"-setTitle:",
	"-setTitleCell:",
	"-setTitleColor:",
	"-setTitleFont:",
	"-setSliderType:",
	"-minValue",
	"-maxValue",
	"-setMinValue:",
	"-setMaxValue:",
	"-allowsTickMarkValuesOnly",
	"-closestTickMarkValueToValue:",
	"-indexOfTickMarkAtPoint:",
	"-numberOfTickMarks",
	"-rectOfTickMarkAtIndex:",
	"-setAllowsTickMarkValuesOnly:",
	"-setNumberOfTickMarks:",
	"-setTickMarkPosition:",
	"-tickMarkPosition",
	"-tickMarkValueAtIndex:"
    );
    NSSound = (
	"-initWithContentsOfFile:byReference:",
	"-initWithContentsOfURL:byReference:",
	"-initWithData:",
	"-initWithPasteboard:",
	"-pause",
	"-play",
	"-resume",
	"-stop",
	"-isPlaying",
	"+canInitWithPasteboard:",
	"+soundUnfilteredPasteboardTypes",
	"-writeToPasteboard:",
	"-delegate",
	"-setDelegate:",
	"+soundNamed:",
	"+soundUnfilteredFileTypes",
	"-name",
	"-setName:",
	"+soundUnfilteredTypes",
	"-duration",
	"-volume",
	"-setVolume:",
	"-currentTime",
	"-setCurrentTime:",
	"-loops",
	"-setLoops:",
	"-playbackDeviceIdentifier",
	"-setPlaybackDeviceIdentifier:",
	"-channelMapping",
	"-setChannelMapping:"
    );
    NSSpeechRecognizer = (
	"-init",
	"-delegate",
	"-setDelegate:",
	"-commands",
	"-setCommands:",
	"-displayCommandsTitle",
	"-setDisplayCommandsTitle:",
	"-listensInForegroundOnly",
	"-setListensInForegroundOnly:",
	"-blocksOtherRecognizers",
	"-setBlocksOtherRecognizers:",
	"-startListening",
	"-stopListening"
    );
    NSSpeechSynthesizer = (
	"-initWithVoice:",
	"-usesFeebackWindow",
	"-setUsesFeebackWindow:",
	"-voice",
	"-setVoice:",
	"-rate",
	"-setRate:",
	"-volume",
	"-setVolume:",
	"-addSpeechDictionary:",
	"-objectForProperty:error:",
	"-setObject:forProperty:error:",
	"-delegate",
	"-setDelegate:",
	"+availableVoices",
	"+attributesForVoice:",
	"+defaultVoice",
	"+isAnyApplicationSpeaking",
	"-isSpeaking",
	"-startSpeakingString:",
	"-startSpeakingString:toURL:",
	"-stopSpeaking",
	"-stopSpeakingAtBoundary:",
	"-pauseSpeakingAtBoundary:",
	"-continueSpeaking",
	"-phonemesFromText:"
    );
    NSSpellChecker = (
	"+isAutomaticTextReplacementEnabled",
	"+isAutomaticDashSubstitutionEnabled",
	"+isAutomaticQuoteSubstitutionEnabled",
	"+sharedSpellChecker",
	"+sharedSpellCheckerExists",
	"-accessoryView",
	"-setAccessoryView:",
	"-spellingPanel",
	"-countWordsInString:language:",
	"-checkSpellingOfString:startingAt:",
	"-checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:",
	"-checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:",
	"-guessesForWord:",
	"-language",
	"-setLanguage:",
	"+uniqueSpellDocumentTag",
	"-closeSpellDocumentWithTag:",
	"-ignoreWord:inSpellDocumentWithTag:",
	"-ignoredWordsInSpellDocumentWithTag:",
	"-setIgnoredWords:inSpellDocumentWithTag:",
	"-setWordFieldStringValue:",
	"-updateSpellingPanelWithMisspelledWord:"
    );
    NSSplitView = (
	"-setDelegate:",
	"-delegate",
	"-adjustSubviews",
	"-drawDividerInRect:",
	"-dividerThickness",
	"-setVertical:",
	"-isVertical",
	"-isSubviewCollapsed:",
	"-isPaneSplitter",
	"-setIsPaneSplitter:",
	"-setAutosaveName:",
	"-autosaveName",
	"-maxPossiblePositionOfDividerAtIndex:",
	"-minPossiblePositionOfDividerAtIndex:",
	"-setPosition:ofDividerAtIndex:",
	"-dividerColor",
	"-dividerStyle",
	"-setDividerStyle:"
    );
    "NSSplitView(GNUstepExtra)" = (
	"-draggedBarWidth",
	"-setDraggedBarWidth:",
	"-setDimpleImage:resetDividerThickness:",
	"-dimpleImage",
	"-backgroundColor",
	"-setBackgroundColor:",
	"-setDividerColor:"
    );
    NSSplitViewController = (
	"-splitView",
	"-setSplitView:",
	"-splitViewItemForViewController:",
	"-minimumThicknessForInlineSidebars",
	"-setMinimumThicknessForInlineSidebars:",
	"-splitViewItems",
	"-setSplitViewItems:",
	"-addSplitViewItem:",
	"-insertSplitViewItem:atIndex:",
	"-removeSplitViewItem:",
	"-splitView:additionalEffectiveRectOfDividerAtIndex:",
	"-splitView:canCollapseSubview:",
	"-splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:",
	"-splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:",
	"-splitView:shouldHideDividerAtIndex:",
	"-toggleSidebar:"
    );
    NSSplitViewItem = (
	"+contentListWithViewController:",
	"+sidebarWithViewController:",
	"+splitViewItemWithViewController:",
	"-automaticMaximumThickness",
	"-setAutomaticMaximumThickness:",
	"-preferredThicknessFraction",
	"-setPreferredThicknessFraction:",
	"-minimumThickness",
	"-setMinimumThickness:",
	"-maximumThickness",
	"-setMaximumThickness:",
	"-holdingPriority",
	"-canCollapse",
	"-collapseBehavior",
	"-isSpringLoaded",
	"-setSpringLoaded:",
	"-allowsFullHeightLayout",
	"-setAllowsFullHeightLayout:",
	"-titlebarSeparatorStyle",
	"-setTitlebarSeparatorStyle:",
	"-viewController",
	"-setViewController:"
    );
    NSStackView = (
	"-setDelegate:",
	"-delegate",
	"-setOrientation:",
	"-orientation",
	"-setAlignment:",
	"-alignment",
	"-setEdgeInsets:",
	"-edgeInsets",
	"-setDistribution:",
	"-distribution",
	"-setSpacing:",
	"-spacing",
	"-setDetachesHiddenViews:",
	"-detachesHiddenViews",
	"-setArrangedSubviews:",
	"-arrangedSubviews",
	"-setDetachedViews:",
	"-detachedViews",
	"+stackViewWithViews:",
	"-setCustomSpacing:afterView:",
	"-customSpacingAfterView:",
	"-addArrangedSubview:",
	"-insertArrangedSubview:atIndex:",
	"-removeArrangedSubview:",
	"-setVisibilityPriority:forView:",
	"-visibilityPriorityForView:",
	"-clippingResistancePriorityForOrientation:",
	"-setClippingResistancePriority:forOrientation:",
	"-huggingPriorityForOrientation:",
	"-setHuggingPriority:forOrientation:",
	"-setHasEqualSpacing:",
	"-hasEqualSpacing",
	"-addView:inGravity:",
	"-insertView:atIndex:inGravity:",
	"-removeView:",
	"-viewsInGravity:",
	"-setViews:inGravity:"
    );
    NSStatusBar = (
	"+systemStatusBar",
	"-isVertical",
	"-removeStatusItem:",
	"-statusItemWithLength:",
	"-thickness"
    );
    NSStatusBarButton = (
	"-appearsDisabled",
	"-setAppearsDisabled:"
    );
    NSStatusItem = (
	"-action",
	"-attributedTitle",
	"-doubleAction",
	"-drawStatusBarBackgroundInRect:withHighlight:",
	"-highlightMode",
	"-image",
	"-isEnabled",
	"-length",
	"-menu",
	"-popUpStatusItemMenu:",
	"-sendActionOn:",
	"-setAction:",
	"-setAttributedTitle:",
	"-setDoubleAction:",
	"-setEnabled:",
	"-setHighlightMode:",
	"-setImage:",
	"-setLength:",
	"-setMenu:",
	"-setTarget:",
	"-setTitle:",
	"-setToolTip:",
	"-setView:",
	"-statusBar",
	"-target",
	"-title",
	"-toolTip",
	"-view",
	"-alternateImage",
	"-setAlternateImage:"
    );
    NSStepper = (
	"-maxValue",
	"-setMaxValue:",
	"-minValue",
	"-setMinValue:",
	"-increment",
	"-setIncrement:",
	"-autorepeat",
	"-setAutorepeat:",
	"-valueWraps",
	"-setValueWraps:"
    );
    NSStepperCell = (
	"-maxValue",
	"-setMaxValue:",
	"-minValue",
	"-setMinValue:",
	"-increment",
	"-setIncrement:",
	"-autorepeat",
	"-setAutorepeat:",
	"-valueWraps",
	"-setValueWraps:"
    );
    NSStoryboard = (
	"+mainStoryboard",
	"+storyboardWithName:bundle:",
	"-instantiateInitialController",
	"-instantiateInitialControllerWithCreator:",
	"-instantiateControllerWithIdentifier:",
	"-instantiateControllerWithIdentifier:creator:"
    );
    NSStoryboardSegue = (
	"-sourceController",
	"-destinationController",
	"-identifier",
	"+segueWithIdentifier:source:destination:performHandler:",
	"-initWithIdentifier:source:destination:",
	"-perform"
    );
    "NSString(NSStringDrawing)" = (
	"-drawAtPoint:withAttributes:",
	"-drawInRect:withAttributes:",
	"-sizeWithAttributes:",
	"-boundingRectWithSize:options:attributes:",
	"-drawWithRect:options:attributes:"
    );
    NSSwitch = (
	"-setState:",
	"-state"
    );
    NSTabView = (
	"-addTabViewItem:",
	"-insertTabViewItem:atIndex:",
	"-removeTabViewItem:",
	"-indexOfTabViewItem:",
	"-indexOfTabViewItemWithIdentifier:",
	"-numberOfTabViewItems",
	"-tabViewItemAtIndex:",
	"-tabViewItems",
	"-selectFirstTabViewItem:",
	"-selectLastTabViewItem:",
	"-selectNextTabViewItem:",
	"-selectPreviousTabViewItem:",
	"-selectTabViewItem:",
	"-selectTabViewItemAtIndex:",
	"-selectTabViewItemWithIdentifier:",
	"-takeSelectedTabViewItemFromSender:",
	"-selectedTabViewItem",
	"-setFont:",
	"-font",
	"-setTabViewType:",
	"-tabViewType",
	"-setDrawsBackground:",
	"-drawsBackground",
	"-setAllowsTruncatedLabels:",
	"-allowsTruncatedLabels",
	"-setDelegate:",
	"-delegate",
	"-minimumSize",
	"-contentRect",
	"-tabViewItemAtPoint:",
	"-controlSize",
	"-controlTint",
	"-setControlSize:",
	"-setControlTint:"
    );
    NSTabViewController = (
	"-tabStyle",
	"-setTabStyle:",
	"-tabView",
	"-setTabView:",
	"-transitionOptions",
	"-setTransitionOptions:",
	"-canPropagateSelectedChildViewControllerTitle",
	"-setCanPropagateSelectedChildViewControllerTitle:",
	"-tabViewItems",
	"-setTabViewItems:",
	"-tabViewItemForViewController:",
	"-addTabViewItem:",
	"-insertTabViewItem:atIndex:",
	"-removeTabViewItem:",
	"-selectedTabViewItemIndex",
	"-setSelectedTabViewItemIndex:",
	"-tabView:shouldSelectTabViewItem:",
	"-tabView:willSelectTabViewItem:",
	"-tabView:didSelectTabViewItem:",
	"-toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:",
	"-toolbarAllowedItemIdentifiers:",
	"-toolbarSelectableItemIdentifiers:"
    );
    NSTabViewItem = (
	"-initWithIdentifier:",
	"-setIdentifier:",
	"-identifier",
	"-setLabel:",
	"-label",
	"-sizeOfLabel:",
	"-setView:",
	"-view",
	"-setColor:",
	"-color",
	"-tabState",
	"-tabView",
	"-setInitialFirstResponder:",
	"-initialFirstResponder",
	"-drawLabel:inRect:",
	"-viewController",
	"-setViewController:",
	"+tabViewItemWithViewController:",
	"-toolTip",
	"-setToolTip:"
    );
    "NSTabViewItem(GNUstep)" = (
	"-_setTabState:",
	"-_setTabView:",
	"-_tabRect",
	"-_truncatedLabel"
    );
    NSTableColumn = (
	"-initWithIdentifier:",
	"-setIdentifier:",
	"-identifier",
	"-setTableView:",
	"-tableView",
	"-setWidth:",
	"-width",
	"-setMinWidth:",
	"-minWidth",
	"-setMaxWidth:",
	"-maxWidth",
	"-setResizable:",
	"-isResizable",
	"-setResizingMask:",
	"-resizingMask",
	"-sizeToFit",
	"-setHidden:",
	"-isHidden",
	"-setEditable:",
	"-isEditable",
	"-setHeaderCell:",
	"-headerCell",
	"-setHeaderToolTip:",
	"-headerToolTip",
	"-setDataCell:",
	"-dataCell",
	"-dataCellForRow:",
	"-setSortDescriptorPrototype:",
	"-sortDescriptorPrototype",
	"-setTitle:",
	"-title"
    );
    NSTableHeaderCell = (
	"-drawSortIndicatorWithFrame:inView:ascending:priority:",
	"-sortIndicatorRectForBounds:"
    );
    NSTableHeaderView = (
	"-setTableView:",
	"-tableView",
	"-draggedColumn",
	"-draggedDistance",
	"-resizedColumn",
	"-columnAtPoint:",
	"-headerRectOfColumn:"
    );
    NSTableView = (
	"-setDataSource:",
	"-dataSource",
	"-reloadData",
	"-setDoubleAction:",
	"-doubleAction",
	"-clickedColumn",
	"-clickedRow",
	"-setAllowsColumnReordering:",
	"-allowsColumnReordering",
	"-setAllowsColumnResizing:",
	"-allowsColumnResizing",
	"-setAllowsMultipleSelection:",
	"-allowsMultipleSelection",
	"-setAllowsEmptySelection:",
	"-allowsEmptySelection",
	"-setAllowsColumnSelection:",
	"-allowsColumnSelection",
	"-setIntercellSpacing:",
	"-intercellSpacing",
	"-setRowHeight:",
	"-rowHeight",
	"-setBackgroundColor:",
	"-backgroundColor",
	"-setUsesAlternatingRowBackgroundColors:",
	"-usesAlternatingRowBackgroundColors",
	"-setSelectionHighlightStyle:",
	"-selectionHighlightStyle",
	"-addTableColumn:",
	"-removeTableColumn:",
	"-moveColumn:toColumn:",
	"-tableColumns",
	"-columnWithIdentifier:",
	"-tableColumnWithIdentifier:",
	"-selectColumn:byExtendingSelection:",
	"-selectRow:byExtendingSelection:",
	"-selectColumnIndexes:byExtendingSelection:",
	"-selectRowIndexes:byExtendingSelection:",
	"-selectedColumnIndexes",
	"-selectedRowIndexes",
	"-deselectColumn:",
	"-deselectRow:",
	"-numberOfSelectedColumns",
	"-numberOfSelectedRows",
	"-selectedColumn",
	"-selectedRow",
	"-isColumnSelected:",
	"-isRowSelected:",
	"-selectedColumnEnumerator",
	"-selectedRowEnumerator",
	"-selectAll:",
	"-deselectAll:",
	"-numberOfColumns",
	"-numberOfRows",
	"-setDrawsGrid:",
	"-drawsGrid",
	"-setGridColor:",
	"-gridColor",
	"-setGridStyleMask:",
	"-gridStyleMask",
	"-preparedCellAtColumn:row:",
	"-editColumn:row:withEvent:select:",
	"-editedRow",
	"-editedColumn",
	"-setHeaderView:",
	"-headerView",
	"-setCornerView:",
	"-cornerView",
	"-rectOfColumn:",
	"-rectOfRow:",
	"-columnIndexesInRect:",
	"-columnsInRect:",
	"-rowsInRect:",
	"-columnAtPoint:",
	"-rowAtPoint:",
	"-frameOfCellAtColumn:row:",
	"-setAutoresizesAllColumnsToFit:",
	"-autoresizesAllColumnsToFit",
	"-sizeLastColumnToFit",
	"-noteNumberOfRowsChanged",
	"-tile",
	"-columnAutoresizingStyle",
	"-setColumnAutoresizingStyle:",
	"-noteHeightOfRowsWithIndexesChanged:",
	"-drawRow:clipRect:",
	"-drawGridInClipRect:",
	"-highlightSelectionInClipRect:",
	"-drawBackgroundInClipRect:",
	"-scrollRowToVisible:",
	"-scrollColumnToVisible:",
	"-textShouldBeginEditing:",
	"-textDidBeginEditing:",
	"-textDidChange:",
	"-textShouldEndEditing:",
	"-textDidEndEditing:",
	"-autosaveName",
	"-autosaveTableColumns",
	"-setAutosaveName:",
	"-setAutosaveTableColumns:",
	"-setDelegate:",
	"-delegate",
	"-indicatorImageInTableColumn:",
	"-setIndicatorImage:inTableColumn:",
	"-highlightedTableColumn",
	"-setHighlightedTableColumn:",
	"-dragImageForRows:event:dragImageOffset:",
	"-setDropRow:dropOperation:",
	"-setVerticalMotionCanBeginDrag:",
	"-verticalMotionCanBeginDrag",
	"-canDragRowsWithIndexes:atPoint:",
	"-dragImageForRowsWithIndexes:tableColumns:event:offset:",
	"-setDraggingSourceOperationMask:forLocal:",
	"-setSortDescriptors:",
	"-sortDescriptors",
	"-reloadDataForRowIndexes:columnIndexes:",
	"-beginUpdates",
	"-endUpdates",
	"-columnForView:",
	"-insertRowsAtIndexes:withAnimation:",
	"-removeRowsAtIndexes:withAnimation:",
	"-rowForView:",
	"-makeViewWithIdentifier:owner:",
	"-rowViewAtRow:makeIfNecessary:",
	"-viewAtColumn:row:makeIfNecessary:",
	"-registerNib:forIdentifier:",
	"-registeredNibsByIdentifier"
    );
    "NSTableView(GNUPrivate)" = (
	"-_sendDoubleActionForColumn:",
	"-_selectColumn:modifiers:"
    );
    NSText = (
	"-replaceCharactersInRange:withRTF:",
	"-replaceCharactersInRange:withRTFD:",
	"-replaceCharactersInRange:withString:",
	"-replaceCharactersInRange:withAttributedString:",
	"-setString:",
	"-string",
	"-replaceRange:withString:",
	"-replaceRange:withRTF:",
	"-replaceRange:withRTFD:",
	"-setText:",
	"-setText:range:",
	"-text",
	"-backgroundColor",
	"-drawsBackground",
	"-setBackgroundColor:",
	"-setDrawsBackground:",
	"-importsGraphics",
	"-isEditable",
	"-isFieldEditor",
	"-isRichText",
	"-isSelectable",
	"-setEditable:",
	"-setFieldEditor:",
	"-setImportsGraphics:",
	"-setRichText:",
	"-setSelectable:",
	"-setUsesFontPanel:",
	"-usesFontPanel",
	"-isRulerVisible",
	"-toggleRuler:",
	"-selectedRange",
	"-setSelectedRange:",
	"-copy:",
	"-copyFont:",
	"-copyRuler:",
	"-cut:",
	"-delete:",
	"-paste:",
	"-pasteFont:",
	"-pasteRuler:",
	"-selectAll:",
	"-changeFont:",
	"-font",
	"-setFont:",
	"-setFont:range:",
	"-setFont:ofRange:",
	"-alignment",
	"-setAlignment:",
	"-alignCenter:",
	"-alignLeft:",
	"-alignRight:",
	"-setTextColor:range:",
	"-setColor:ofRange:",
	"-setTextColor:",
	"-textColor",
	"-subscript:",
	"-superscript:",
	"-underline:",
	"-unscript:",
	"-readRTFDFromFile:",
	"-writeRTFDToFile:atomically:",
	"-RTFDFromRange:",
	"-RTFFromRange:",
	"-isHorizontallyResizable",
	"-isVerticallyResizable",
	"-maxSize",
	"-minSize",
	"-setHorizontallyResizable:",
	"-setMaxSize:",
	"-setMinSize:",
	"-setVerticallyResizable:",
	"-sizeToFit",
	"-checkSpelling:",
	"-showGuessPanel:",
	"-scrollRangeToVisible:",
	"-delegate",
	"-setDelegate:",
	"-changeSpelling:",
	"-ignoreSpelling:"
    );
    "NSText(GNUstepExtensions)" = (
	"-textLength"
    );
    NSTextAlternatives = (
	"-initWithPrimaryString:alternativeStrings:",
	"-primaryString",
	"-alternativeStrings",
	"-primaryString",
	"-alternativeStrings",
	"-noteSelectedAlternativeString:"
    );
    NSTextAttachment = (
	"-initWithFileWrapper:",
	"-setFileWrapper:",
	"-fileWrapper",
	"-attachmentCell",
	"-setAttachmentCell:"
    );
    NSTextBlock = (
	"-backgroundColor",
	"-borderColorForEdge:",
	"-boundsRectForContentRect:inRect:textContainer:characterRange:",
	"-contentWidth",
	"-contentWidthValueType",
	"-drawBackgroundWithFrame:inView:characterRange:layoutManager:",
	"-init",
	"-rectForLayoutAtPoint:inRect:textContainer:characterRange:",
	"-setBackgroundColor:",
	"-setBorderColor:",
	"-setBorderColor:forEdge:",
	"-setContentWidth:type:",
	"-setValue:type:forDimension:",
	"-setVerticalAlignment:",
	"-setWidth:type:forLayer:",
	"-setWidth:type:forLayer:edge:",
	"-valueForDimension:",
	"-valueTypeForDimension:",
	"-verticalAlignment",
	"-widthForLayer:edge:",
	"-widthValueTypeForLayer:edge:"
    );
    NSTextCheckingController = (
	"-initWithClient:",
	"-client",
	"-spellCheckerDocumentTag",
	"-setSpellCheckerDocumentTag:",
	"-changeSpelling:",
	"-checkSpelling:",
	"-checkTextInRange:types:options:",
	"-checkTextInSelection:",
	"-checkTextInDocument:",
	"-didChangeTextInRange:",
	"-considerTextCheckingForRange:",
	"-didChangeSelectedRange",
	"-ignoreSpelling:",
	"-insertedTextInRange:",
	"-invalidate",
	"-menuAtIndex:clickedOnSelection:effectiveRange:",
	"-orderFrontSubstitutionsPanel:",
	"-showGuessPanel:",
	"-updateCandidates",
	"-validAnnotations"
    );
    NSTextContainer = (
	"-initWithContainerSize:",
	"-isSimpleRectangularTextContainer",
	"-lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:",
	"-containsPoint:",
	"-replaceLayoutManager:",
	"-layoutManager",
	"-setLayoutManager:",
	"-setTextView:",
	"-textView",
	"-setContainerSize:",
	"-containerSize",
	"-setWidthTracksTextView:",
	"-widthTracksTextView",
	"-setHeightTracksTextView:",
	"-heightTracksTextView",
	"-setLineFragmentPadding:",
	"-lineFragmentPadding"
    );
    NSTextField = (
	"-isEditable",
	"-isSelectable",
	"-setEditable:",
	"-setSelectable:",
	"-selectText:",
	"-nextText",
	"-previousText",
	"-setNextText:",
	"-setPreviousText:",
	"-setDelegate:",
	"-delegate",
	"-backgroundColor",
	"-drawsBackground",
	"-isBezeled",
	"-isBordered",
	"-setBackgroundColor:",
	"-setBezeled:",
	"-setBordered:",
	"-setDrawsBackground:",
	"-setTextColor:",
	"-textColor",
	"-setPlaceholderString:",
	"-placeholderString",
	"-setPlaceholderAttributedString:",
	"-placeholderAttributedString",
	"-errorAction",
	"-setErrorAction:",
	"-acceptsFirstResponder",
	"-textDidBeginEditing:",
	"-textDidChange:",
	"-textDidEndEditing:",
	"-textShouldBeginEditing:",
	"-textShouldEndEditing:",
	"-setAllowsEditingTextAttributes:",
	"-allowsEditingTextAttributes",
	"-setImportsGraphics:",
	"-importsGraphics",
	"-setTitleWithMnemonic:",
	"-setBezelStyle:",
	"-bezelStyle"
    );
    NSTextFieldCell = (
	"-setTextColor:",
	"-textColor",
	"-setDrawsBackground:",
	"-drawsBackground",
	"-setBackgroundColor:",
	"-backgroundColor",
	"-setBezelStyle:",
	"-bezelStyle",
	"-setPlaceholderString:",
	"-placeholderString",
	"-setPlaceholderAttributedString:",
	"-placeholderAttributedString"
    );
    "NSTextFieldCell(PrivateMethods)" = (
	"-_drawBackgroundWithFrame:inView:"
    );
    NSTextFinder = (
	"-performAction:",
	"-validateAction:",
	"-cancelFindIndicator",
	"-client",
	"-setClient:",
	"-findBarContainer",
	"-setFindBarContainer:",
	"-findIndicatorNeedsUpdate",
	"-setFindIndicatorNeedsUpdate:",
	"-isIncrementalSearchingEnabled",
	"-setIncrementalSearchingEnabled:",
	"-incrementalSearchingShouldDimContentView",
	"-setIncrementalSearchingShouldDimContentView:",
	"-incrementalMatchRanges",
	"+drawIncrementalMatchHighlightInRect:",
	"-noteClientStringWillChange"
    );
    NSTextInputContext = (
	"+currentInputContext",
	"-initWithClient:",
	"-client",
	"-acceptsGlyphInfo",
	"-setAcceptsGlyphInfo:",
	"-allowedInputSourceLocales",
	"-setAllowedInputSourceLocales:",
	"-activate",
	"-deactivate",
	"-handleEvent:",
	"-discardMarkedText",
	"-invalidateCharacterCoordinates",
	"-keyboardInputSources",
	"-selectedKeyboardInputSource",
	"+localizedNameForInputSource:"
    );
    NSTextList = (
	"-initWithMarkerFormat:options:",
	"-listOptions",
	"-markerForItemNumber:",
	"-markerFormat",
	"-startingItemNumber",
	"-setStartingItemNumber:",
	"-startingItemNumber",
	"-setStartingItemNumber:"
    );
    NSTextStorage = (
	"-addLayoutManager:",
	"-removeLayoutManager:",
	"-layoutManagers",
	"-edited:range:changeInLength:",
	"-processEditing",
	"-beginEditing",
	"-endEditing",
	"-editedMask",
	"-editedRange",
	"-changeInLength",
	"-setDelegate:",
	"-delegate",
	"-ensureAttributesAreFixedInRange:",
	"-fixesAttributesLazily",
	"-invalidateAttributesInRange:",
	"-string"
    );
    "NSTextStorage(Scripting)" = (
	"-font",
	"-setFont:",
	"-attributeRuns",
	"-paragraphs",
	"-words",
	"-characters",
	"-foregroundColor"
    );
    NSTextTab = (
	"-initWithType:location:",
	"-location",
	"-tabStopType",
	"-initWithTextAlignment:location:options:",
	"-alignment",
	"-options"
    );
    NSTextTable = (
	"-boundsRectForBlock:contentRect:inRect:textContainer:characterRange:",
	"-collapsesBorders",
	"-drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:",
	"-hidesEmptyCells",
	"-layoutAlgorithm",
	"-numberOfColumns",
	"-rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:",
	"-setCollapsesBorders:",
	"-setHidesEmptyCells:",
	"-setLayoutAlgorithm:",
	"-setNumberOfColumns:"
    );
    NSTextTableBlock = (
	"-initWithTable:startingRow:rowSpan:startingColumn:columnSpan:",
	"-columnSpan",
	"-rowSpan",
	"-startingColumn",
	"-startingRow",
	"-table"
    );
    NSTextView = (
	"+defaultTypingAttributes",
	"+registerForServices",
	"-initWithFrame:textContainer:",
	"-initWithFrame:",
	"-textContainer",
	"-setTextContainer:",
	"-replaceTextContainer:",
	"-layoutManager",
	"-textStorage",
	"-replaceCharactersInRange:withString:",
	"-replaceCharactersInRange:withAttributedString:",
	"-setAlignment:range:",
	"-defaultParagraphStyle",
	"-setDefaultParagraphStyle:",
	"-setRulerVisible:",
	"-usesRuler",
	"-setUsesRuler:",
	"-usesFindPanel",
	"-setUsesFindPanel:",
	"-isContinuousSpellCheckingEnabled",
	"-setContinuousSpellCheckingEnabled:",
	"-allowsUndo",
	"-setAllowsUndo:",
	"-smartInsertDeleteEnabled",
	"-setSmartInsertDeleteEnabled:",
	"-pasteAsPlainText:",
	"-pasteAsRichText:",
	"-shouldChangeTextInRange:replacementString:",
	"-shouldChangeTextInRanges:replacementStrings:",
	"-didChangeText",
	"-rangeForUserTextChange",
	"-rangeForUserCharacterAttributeChange",
	"-rangeForUserParagraphAttributeChange",
	"-rangeForUserCompletion",
	"-rangesForUserCharacterAttributeChange",
	"-rangesForUserParagraphAttributeChange",
	"-rangesForUserTextChange",
	"-setTextContainerInset:",
	"-textContainerInset",
	"-textContainerOrigin",
	"-invalidateTextContainerOrigin",
	"-setConstrainedFrameSize:",
	"-setSelectedTextAttributes:",
	"-selectedTextAttributes",
	"-setInsertionPointColor:",
	"-insertionPointColor",
	"-setMarkedTextAttributes:",
	"-markedTextAttributes",
	"-linkTextAttributes",
	"-setLinkTextAttributes:",
	"-_updateInputMethodState",
	"-_updateInputMethodWithInsertionPoint:"
    );
    "NSTextView(GSTextViewSync)" = (
	"-_updateMultipleTextViews",
	"-_syncTextViewsByCalling:withFlag:",
	"-_recacheDelegateResponses",
	"-_layoutManagerDidInvalidateLayout"
    );
    "NSTextView(UserActions)" = (
	"-alignJustified:",
	"-turnOffKerning:",
	"-tightenKerning:",
	"-loosenKerning:",
	"-useStandardKerning:",
	"-turnOffLigatures:",
	"-useStandardLigatures:",
	"-useAllLigatures:",
	"-raiseBaseline:",
	"-lowerBaseline:",
	"-toggleTraditionalCharacterShape:",
	"-transpose:",
	"-toggleContinuousSpellChecking:",
	"-outline:",
	"-setBaseWritingDirection:range:",
	"-toggleBaseWritingDirection:"
    );
    "NSTextView(leftovers)" = (
	"-setNeedsDisplayInRect:avoidAdditionalLayout:",
	"-shouldDrawInsertionPoint",
	"-drawInsertionPointInRect:color:turnedOn:",
	"-preferredPasteboardTypeFromArray:restrictedToTypesFromArray:",
	"-readSelectionFromPasteboard:",
	"-readSelectionFromPasteboard:type:",
	"-readablePasteboardTypes",
	"-writablePasteboardTypes",
	"-writeSelectionToPasteboard:type:",
	"-writeSelectionToPasteboard:types:",
	"-validRequestorForSendType:returnType:",
	"-dragImageForSelectionWithEvent:origin:",
	"-dragOperationForDraggingInfo:type:",
	"-dragSelectionWithEvent:offset:slideBack:",
	"-cleanUpAfterDragOperation",
	"-selectionRangeForProposedRange:granularity:",
	"-setSelectedRange:",
	"-setSelectedRange:affinity:stillSelecting:",
	"-selectionAffinity",
	"-selectionGranularity",
	"-setSelectionGranularity:",
	"-selectedRanges",
	"-setSelectedRanges:",
	"-setSelectedRanges:affinity:stillSelecting:",
	"-updateInsertionPointStateAndRestartTimer:",
	"-spellCheckerDocumentTag",
	"-smartDeleteRangeForProposedRange:",
	"-smartInsertForString:replacingRange:beforeString:afterString:",
	"-smartInsertAfterStringForString:replacingRange:",
	"-smartInsertBeforeStringForString:replacingRange:",
	"-toggleSmartInsertDelete:",
	"-typingAttributes",
	"-setTypingAttributes:",
	"-clickedOnLink:atIndex:",
	"-updateRuler",
	"-updateFontPanel",
	"-acceptableDragTypes",
	"-updateDragTypeRegistration",
	"-startSpeaking:",
	"-stopSpeaking:",
	"-acceptsGlyphInfo",
	"-setAcceptsGlyphInfo:",
	"-allowsDocumentBackgroundColorChange",
	"-setAllowsDocumentBackgroundColorChange:",
	"-changeDocumentBackgroundColor:",
	"-drawViewBackgroundInRect:",
	"-changeAttributes:",
	"-complete:",
	"-completionsForPartialWordRange:indexOfSelectedItem:",
	"-insertCompletion:forPartialWordRange:movement:isFinal:",
	"-performFindPanelAction:",
	"-breakUndoCoalescing",
	"-orderFrontLinkPanel:",
	"-orderFrontListPanel:",
	"-orderFrontTablePanel:"
    );
    NSTokenField = (
	"-tokenStyle",
	"-setTokenStyle:",
	"+defaultCompletionDelay",
	"-completionDelay",
	"-setCompletionDelay:",
	"+defaultTokenizingCharacterSet",
	"-setTokenizingCharacterSet:",
	"-tokenizingCharacterSet"
    );
    NSTokenFieldCell = (
	"-tokenStyle",
	"-setTokenStyle:",
	"+defaultCompletionDelay",
	"-completionDelay",
	"-setCompletionDelay:",
	"+defaultTokenizingCharacterSet",
	"-setTokenizingCharacterSet:",
	"-tokenizingCharacterSet"
    );
    NSToolbar = (
	"-initWithIdentifier:",
	"-insertItemWithItemIdentifier:atIndex:",
	"-removeItemAtIndex:",
	"-runCustomizationPalette:",
	"-validateVisibleItems",
	"-allowsUserCustomization",
	"-autosavesConfiguration",
	"-configurationDictionary",
	"-customizationPaletteIsRunning",
	"-delegate",
	"-displayMode",
	"-identifier",
	"-items",
	"-visibleItems",
	"-isVisible",
	"-setAllowsUserCustomization:",
	"-setAutosavesConfiguration:",
	"-setConfigurationFromDictionary:",
	"-setDelegate:",
	"-setDisplayMode:",
	"-setVisible:",
	"-sizeMode",
	"-setSizeMode:",
	"-selectedItemIdentifier",
	"-setSelectedItemIdentifier:",
	"-showsBaselineSeparator",
	"-setShowsBaselineSeparator:"
    );
    NSToolbarItem = (
	"-initWithItemIdentifier:",
	"-validate",
	"-action",
	"-allowsDuplicatesInToolbar",
	"-image",
	"-isEnabled",
	"-itemIdentifier",
	"-label",
	"-maxSize",
	"-menuFormRepresentation",
	"-minSize",
	"-paletteLabel",
	"-tag",
	"-target",
	"-toolTip",
	"-toolbar",
	"-view",
	"-setAction:",
	"-setEnabled:",
	"-setImage:",
	"-setLabel:",
	"-setMaxSize:",
	"-setMenuFormRepresentation:",
	"-setMinSize:",
	"-setPaletteLabel:",
	"-setTag:",
	"-setTarget:",
	"-setToolTip:",
	"-setView:",
	"-autovalidates",
	"-setAutovalidates:",
	"-visibilityPriority",
	"-setVisibilityPriority:"
    );
    NSToolbarItemGroup = (
	"-setSubitems:",
	"-subitems"
    );
    NSTrackingArea = (
	"-initWithRect:options:owner:userInfo:",
	"-options",
	"-owner",
	"-rect",
	"-userInfo"
    );
    NSTreeController = (
	"-addSelectionIndexPaths:",
	"-alwaysUsesMultipleValuesMarker",
	"-avoidsEmptySelection",
	"-canAddChild",
	"-canInsert",
	"-canInsertChild",
	"-preservesSelection",
	"-selectsInsertedObjects",
	"-setSelectionIndexPath:",
	"-setSelectionIndexPaths:",
	"-arrangedObjects",
	"-selectedObjects",
	"-selectionIndexPath",
	"-selectionIndexPaths",
	"-sortDescriptors",
	"-childrenKeyPath",
	"-countKeyPath",
	"-leafKeyPath",
	"-addChild:",
	"-add:",
	"-insertChild:",
	"-insertObject:atArrangedObjectIndexPath:",
	"-insertObjects:atArrangedObjectIndexPaths:",
	"-insertObject:atArrangedObjectIndexPath:",
	"-insertObjects:atArrangedObjectIndexPaths:",
	"-insert:",
	"-rearrangeObjects",
	"-removeObjectAtArrangedObjectIndexPath:",
	"-removeObjectsAtArrangedObjectIndexPaths:",
	"-removeSelectionIndexPaths:",
	"-removeObjectAtArrangedObjectIndexPath:",
	"-removeObjectsAtArrangedObjectIndexPaths:",
	"-removeSelectionIndexPaths:",
	"-remove:",
	"-setAlwaysUsesMultipleValuesMarker:",
	"-setAvoidsEmptySelection:",
	"-setChildrenKeyPath:",
	"-setCountKeyPath:",
	"-setLeafKeyPath:",
	"-setPreservesSelection:",
	"-setSelectsInsertedObjects:",
	"-setSortDescriptors:",
	"-childrenKeyPathForNode:",
	"-countKeyPathForNode:",
	"-leafKeyPathForNode:",
	"-moveNode:toIndexPath:",
	"-moveNodes:toIndexPath:",
	"-setSortDescriptors:",
	"-selectedNodes"
    );
    NSTreeNode = (
	"+treeNodeWithRepresentedObject:",
	"-childNodes",
	"-descendantNodeAtIndexPath:",
	"-indexPath",
	"-initWithRepresentedObject:",
	"-isLeaf",
	"-mutableChildNodes",
	"-parentNode",
	"-representedObject",
	"-sortWithSortDescriptors:recursively:"
    );
    "NSURL(NSPasteboard)" = (
	"+URLFromPasteboard:",
	"-writeToPasteboard:"
    );
    NSUserDefaultsController = (
	"+sharedUserDefaultsController",
	"-initWithDefaults:initialValues:",
	"-defaults",
	"-values",
	"-initialValues",
	"-setInitialValues:",
	"-appliesImmediately",
	"-setAppliesImmediately:",
	"-revert:",
	"-revertToInitialValues:",
	"-save:",
	"-hasUnappliedChanges"
    );
    NSUserInterfaceCompressionOptions = (
	"-initWithIdentifier:",
	"-initWithCompressionOptions:",
	"-containsOptions:",
	"-intersectsOptions:",
	"-isEmpty",
	"-optionsByAddingOptions:",
	"-optionsByRemovingOptions:",
	"+hideImagesOption",
	"+hideTextOption",
	"+reduceMetricsOption",
	"+breakEqualWidthsOption",
	"+standardOptions"
    );
    NSView = (
	"-initWithFrame:",
	"-addSubview:",
	"-addSubview:positioned:relativeTo:",
	"-ancestorSharedWithView:",
	"-isDescendantOf:",
	"-opaqueAncestor",
	"-removeFromSuperviewWithoutNeedingDisplay",
	"-removeFromSuperview",
	"-removeSubview:",
	"-replaceSubview:with:",
	"-sortSubviewsUsingFunction:context:",
	"-subviews",
	"-setSubviews:",
	"-superview",
	"-window",
	"-viewWillMoveToSuperview:",
	"-viewWillMoveToWindow:",
	"-didAddSubview:",
	"-viewDidMoveToSuperview",
	"-viewDidMoveToWindow",
	"-willRemoveSubview:",
	"-tag",
	"-viewWithTag:",
	"-frameRotation",
	"-frame",
	"-setFrame:",
	"-setFrameOrigin:",
	"-setFrameRotation:",
	"-setFrameSize:",
	"-boundsRotation",
	"-bounds",
	"-setBounds:",
	"-setBoundsOrigin:",
	"-setBoundsRotation:",
	"-setBoundsSize:",
	"-translateOriginToPoint:",
	"-scaleUnitSquareToSize:",
	"-rotateByAngle:",
	"-isFlipped",
	"-isRotatedFromBase",
	"-isRotatedOrScaledFromBase",
	"-alphaValue",
	"-setAlphaValue:",
	"-frameCenterRotation",
	"-setFrameCenterRotation:",
	"-centerScanRect:",
	"-convertPoint:fromView:",
	"-convertPoint:toView:",
	"-convertRect:fromView:",
	"-convertRect:toView:",
	"-convertSize:fromView:",
	"-convertSize:toView:",
	"-convertPointFromBase:",
	"-convertPointToBase:",
	"-convertRectFromBase:",
	"-convertRectToBase:",
	"-convertSizeFromBase:",
	"-convertSizeToBase:",
	"-setPostsFrameChangedNotifications:",
	"-postsFrameChangedNotifications",
	"-setPostsBoundsChangedNotifications:",
	"-postsBoundsChangedNotifications",
	"-resizeSubviewsWithOldSize:",
	"-setAutoresizesSubviews:",
	"-autoresizesSubviews",
	"-setAutoresizingMask:",
	"-autoresizingMask",
	"-resizeWithOldSuperviewSize:",
	"+focusView",
	"-lockFocus",
	"-unlockFocus",
	"-lockFocusIfCanDraw",
	"-lockFocusInRect:",
	"-lockFocusIfCanDrawInContext:",
	"-display",
	"-displayIfNeeded",
	"-displayIfNeededIgnoringOpacity",
	"-displayIfNeededInRect:",
	"-displayIfNeededInRectIgnoringOpacity:",
	"-displayRect:",
	"-displayRectIgnoringOpacity:",
	"-displayRectIgnoringOpacity:inContext:",
	"-needsDisplay",
	"-setNeedsDisplay:",
	"-setNeedsDisplayInRect:",
	"-isOpaque",
	"+defaultFocusRingType",
	"-setKeyboardFocusRingNeedsDisplayInRect:",
	"-setFocusRingType:",
	"-focusRingType",
	"-setHidden:",
	"-isHidden",
	"-isHiddenOrHasHiddenAncestor",
	"-drawRect:",
	"-visibleRect",
	"-canDraw",
	"-shouldDrawColor",
	"-bitmapImageRepForCachingDisplayInRect:",
	"-cacheDisplayInRect:toBitmapImageRep:",
	"-wantsDefaultClipping",
	"-needsToDrawRect:",
	"-getRectsBeingDrawn:count:",
	"-inLiveResize",
	"-viewWillStartLiveResize",
	"-viewDidEndLiveResize",
	"-preservesContentDuringLiveResize",
	"-getRectsExposedDuringLiveResize:count:",
	"-rectPreservedDuringLiveResize",
	"-allocateGState",
	"-releaseGState",
	"-gState",
	"-renewGState",
	"-setUpGState",
	"-acceptsFirstMouse:",
	"-hitTest:",
	"-mouse:inRect:",
	"-performKeyEquivalent:",
	"-performMnemonic:",
	"-mouseDownCanMoveWindow",
	"-dragFile:fromRect:slideBack:event:",
	"-dragImage:at:offset:event:pasteboard:source:slideBack:",
	"-registerForDraggedTypes:",
	"-unregisterDraggedTypes",
	"-shouldDelayWindowOrderingForEvent:",
	"-dragPromisedFilesOfTypes:fromRect:source:slideBack:event:",
	"-registeredDraggedTypes",
	"-addCursorRect:cursor:",
	"-discardCursorRects",
	"-removeCursorRect:cursor:",
	"-resetCursorRects",
	"-addToolTipRect:owner:userData:",
	"-removeAllToolTips",
	"-removeToolTip:",
	"-setToolTip:",
	"-toolTip",
	"-removeTrackingRect:",
	"-addTrackingRect:owner:userData:assumeInside:",
	"-adjustScroll:",
	"-autoscroll:",
	"-enclosingScrollView",
	"-scrollPoint:",
	"-scrollRect:by:",
	"-scrollRectToVisible:",
	"-reflectScrolledClipView:",
	"-scrollClipView:toPoint:",
	"+defaultMenu",
	"-menuForEvent:",
	"-needsPanelToBecomeKey",
	"-setNextKeyView:",
	"-nextKeyView",
	"-nextValidKeyView",
	"-setPreviousKeyView:",
	"-previousKeyView",
	"-previousValidKeyView",
	"-canBecomeKeyView",
	"-fax:",
	"-print:",
	"-dataWithEPSInsideRect:",
	"-writeEPSInsideRect:toPasteboard:",
	"-dataWithPDFInsideRect:",
	"-writePDFInsideRect:toPasteboard:",
	"-printJobTitle",
	"-adjustPageHeightNew:top:bottom:limit:",
	"-adjustPageWidthNew:left:right:limit:",
	"-heightAdjustLimit",
	"-knowsPagesFirst:last:",
	"-knowsPageRange:",
	"-locationOfPrintRect:",
	"-rectForPage:",
	"-widthAdjustLimit",
	"-addToPageSetup",
	"-beginPage:label:bBox:fonts:",
	"-beginPageSetupRect:placement:",
	"-beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:",
	"-beginSetup",
	"-beginTrailer",
	"-drawPageBorderWithSize:",
	"-drawSheetBorderWithSize:",
	"-endHeaderComments",
	"-endPrologue",
	"-endSetup",
	"-endPageSetup",
	"-endPage",
	"-endTrailer",
	"-beginDocument",
	"-beginPageInRect:atPlacement:",
	"-endDocument",
	"-pageFooter",
	"-pageHeader",
	"-layerContentsPlacement",
	"-setLayerContentsPlacement:",
	"-layerContentsRedrawPolicy",
	"-setLayerContentsRedrawPolicy:",
	"-layerContentsPlacement",
	"-setLayerContentsPlacement:",
	"-layerContentsRedrawPolicy",
	"-setLayerContentsRedrawPolicy:",
	"-userInterfaceLayoutDirection",
	"-setUserInterfaceLayoutDirection:",
	"-userInterfaceLayoutDirection",
	"-setUserInterfaceLayoutDirection:",
	"-layoutSubtreeIfNeeded",
	"-layout",
	"-needsLayout",
	"-setNeedsLayout:",
	"-needsLayout",
	"-setNeedsLayout:",
	"-needsUpdateConstraints",
	"-setNeedsUpdateConstraints:",
	"-needsUpdateConstraints",
	"-setNeedsUpdateConstraints:",
	"-translatesAutoresizingMaskIntoConstraints",
	"-setTranslatesAutoresizingMaskIntoConstraints:",
	"-translatesAutoresizingMaskIntoConstraints",
	"-setTranslatesAutoresizingMaskIntoConstraints:",
	"-contentCompressionResistancePriority",
	"-setContentCompressionResistancePriority:",
	"-contentCompressionResistancePriority",
	"-setContentCompressionResistancePriority:",
	"-intrinsicContentSize",
	"-intrinsicContentSize",
	"-baselineOffsetFromBottom",
	"-baselineOffsetFromBottom",
	"-firstBaselineOffsetFromTop",
	"-firstBaselineOffsetFromTop"
    );
    "NSView(CoreAnimationSupport)" = (
	"-shadow",
	"-setShadow:"
    );
    "NSView(NSConstraintBasedLayoutCoreMethods)" = (
	"-updateConstraints",
	"-updateConstraintsForSubtreeIfNeeded",
	"-contentHuggingPriorityForOrientation:",
	"-setContentHuggingPriority:forOrientation:",
	"-contentCompressionResistancePriorityForOrientation:",
	"-setContentCompressionResistancePriority:forOrientation:"
    );
    "NSView(NSConstraintBasedLayoutInstallingConstraints)" = (
	"-addConstraint:",
	"-addConstraints:"
    );
    "NSView(NSLayoutGuideSupport)" = (
	"-addLayoutGuide:",
	"-removeLayoutGuide:",
	"-layoutGuides"
    );
    "NSView(PrivateMethods)" = (
	"-_invalidateCoordinates",
	"-_rebuildCoordinates",
	"-_matrixToWindow",
	"-_matrixFromWindow",
	"-_setIgnoresBacking:",
	"-_ignoresBacking"
    );
    NSViewAnimation = (
	"-initWithViewAnimations:",
	"-setViewAnimations:",
	"-viewAnimations"
    );
    NSViewController = (
	"-initWithNibName:bundle:",
	"-setRepresentedObject:",
	"-representedObject",
	"-setTitle:",
	"-title",
	"-setView:",
	"-view",
	"-loadView",
	"-nibName",
	"-nibBundle",
	"-viewWillLoad",
	"-viewDidLoad",
	"-viewWillAppear:",
	"-viewIsAppearing:",
	"-viewDidAppear:",
	"-viewWillDisappear:",
	"-viewDidDisappear:",
	"-dismissViewController:",
	"-dismissController:"
    );
    NSVisualEffectView = (
	"-material",
	"-setMaterial:",
	"-interiorBackgroundStyle",
	"-blendingMode",
	"-setBlendingMode:",
	"-state",
	"-setState:",
	"-maskImage",
	"-setMaskImage:",
	"-material",
	"-setMaterial:",
	"-interiorBackgroundStyle",
	"-blendingMode",
	"-setBlendingMode:",
	"-state",
	"-setState:",
	"-maskImage",
	"-setMaskImage:"
    );
    NSWindow = (
	"+windowWithContentViewController:",
	"+contentRectForFrameRect:styleMask:",
	"+frameRectForContentRect:styleMask:",
	"+minFrameWidthWithTitle:styleMask:",
	"-contentRectForFrameRect:",
	"-frameRectForContentRect:",
	"-initWithContentRect:styleMask:backing:defer:",
	"-initWithContentRect:styleMask:backing:defer:screen:",
	"-convertBaseToScreen:",
	"-convertScreenToBase:",
	"-convertRectFromScreen:",
	"-convertRectToScreen:",
	"-frame",
	"-setFrame:display:",
	"-setFrameOrigin:",
	"-setFrameTopLeftPoint:",
	"-setContentSize:",
	"-cascadeTopLeftFromPoint:",
	"-center",
	"-resizeFlags",
	"-setFrame:display:animate:",
	"-animationResizeTime:",
	"-performZoom:",
	"-zoom:",
	"-isZoomed",
	"-showsResizeIndicator",
	"-setShowsResizeIndicator:",
	"-preservesContentDuringLiveResize",
	"-setPreservesContentDuringLiveResize:",
	"-minSize",
	"-maxSize",
	"-setMinSize:",
	"-setMaxSize:",
	"-constrainFrameRect:toScreen:",
	"-aspectRatio",
	"-setAspectRatio:",
	"-resizeIncrements",
	"-setResizeIncrements:",
	"-contentMaxSize",
	"-setContentMaxSize:",
	"-contentMinSize",
	"-setContentMinSize:",
	"-contentAspectRatio",
	"-setContentAspectRatio:",
	"-contentResizeIncrements",
	"-setContentResizeIncrements:",
	"+removeFrameUsingName:",
	"-frameAutosaveName",
	"-saveFrameUsingName:",
	"-setFrameAutosaveName:",
	"-setFrameFromString:",
	"-setFrameUsingName:",
	"-stringWithSavedFrame",
	"-setFrameUsingName:force:",
	"-orderBack:",
	"-orderFront:",
	"-orderFrontRegardless",
	"-orderOut:",
	"-orderWindow:relativeTo:",
	"-isVisible",
	"-setIsVisible:",
	"-level",
	"-setLevel:",
	"-becomeKeyWindow",
	"-becomeMainWindow",
	"-canBecomeKeyWindow",
	"-canBecomeMainWindow",
	"-isKeyWindow",
	"-isMainWindow",
	"-makeKeyAndOrderFront:",
	"-makeKeyWindow",
	"-makeMainWindow",
	"-resignKeyWindow",
	"-resignMainWindow",
	"-defaultButtonCell",
	"-setDefaultButtonCell:",
	"-disableKeyEquivalentForDefaultButtonCell",
	"-enableKeyEquivalentForDefaultButtonCell",
	"-display",
	"-displayIfNeeded",
	"-isAutodisplay",
	"-setAutodisplay:",
	"-setViewsNeedDisplay:",
	"-update",
	"-useOptimizedDrawing:",
	"-viewsNeedDisplay",
	"-isFlushWindowDisabled",
	"-disableFlushWindow",
	"-enableFlushWindow",
	"-flushWindow",
	"-flushWindowIfNeeded",
	"-cacheImageInRect:",
	"-discardCachedImage",
	"-restoreCachedImage",
	"-windowNumber",
	"-gState",
	"-deviceDescription",
	"-backingType",
	"-setBackingType:",
	"-isOneShot",
	"-setOneShot:",
	"-graphicsContext",
	"-userSpaceScaleFactor",
	"+defaultDepthLimit",
	"-canStoreColor",
	"-depthLimit",
	"-hasDynamicDepthLimit",
	"-setDepthLimit:",
	"-setDynamicDepthLimit:",
	"-deepestScreen",
	"-screen",
	"-firstResponder",
	"-collectionBehavior",
	"-setCollectionBehavior:",
	"-makeFirstResponder:",
	"-currentEvent",
	"-nextEventMatchingMask:",
	"-nextEventMatchingMask:untilDate:inMode:dequeue:",
	"-discardEventsMatchingMask:beforeEvent:",
	"-postEvent:atStart:",
	"-sendEvent:",
	"-tryToPerform:with:",
	"-keyDown:",
	"-mouseLocationOutsideOfEventStream",
	"-acceptsMouseMovedEvents",
	"-setAcceptsMouseMovedEvents:",
	"-ignoresMouseEvents",
	"-setIgnoresMouseEvents:",
	"-endEditingFor:",
	"-fieldEditor:forObject:",
	"-initialFirstResponder",
	"-keyViewSelectionDirection",
	"-selectKeyViewFollowingView:",
	"-selectKeyViewPrecedingView:",
	"-selectNextKeyView:",
	"-selectPreviousKeyView:",
	"-setInitialFirstResponder:",
	"-autorecalculatesKeyViewLoop",
	"-setAutorecalculatesKeyViewLoop:",
	"-recalculateKeyViewLoop",
	"-representedFilename",
	"-setRepresentedFilename:",
	"-setTitle:",
	"-setTitleWithRepresentedFilename:",
	"-title",
	"-isDocumentEdited",
	"-setDocumentEdited:",
	"-close",
	"-performClose:",
	"-setReleasedWhenClosed:",
	"-isReleasedWhenClosed",
	"-deminiaturize:",
	"-miniaturize:",
	"-performMiniaturize:",
	"-isMiniaturized",
	"-miniwindowImage",
	"-miniwindowTitle",
	"-setMiniwindowImage:",
	"-setMiniwindowTitle:",
	"-counterpart",
	"+menuChanged:",
	"-isExcludedFromWindowsMenu",
	"-setExcludedFromWindowsMenu:",
	"-areCursorRectsEnabled",
	"-disableCursorRects",
	"-discardCursorRects",
	"-enableCursorRects",
	"-invalidateCursorRectsForView:",
	"-resetCursorRects",
	"-dragImage:at:offset:event:pasteboard:source:slideBack:",
	"-registerForDraggedTypes:",
	"-unregisterDraggedTypes",
	"-hidesOnDeactivate",
	"-setHidesOnDeactivate:",
	"-worksWhenModal",
	"-setCanHide:",
	"-canHide",
	"-contentView",
	"-setContentView:",
	"-setBackgroundColor:",
	"-backgroundColor",
	"-styleMask",
	"-setHasShadow:",
	"-hasShadow",
	"-setAlphaValue:",
	"-alphaValue",
	"-setOpaque:",
	"-isOpaque",
	"-invalidateShadow",
	"-validRequestorForSendType:returnType:",
	"-fax:",
	"-print:",
	"-dataWithEPSInsideRect:",
	"-dataWithPDFInsideRect:",
	"-delegate",
	"-setDelegate:",
	"-setWindowController:",
	"-windowController",
	"-drawers",
	"-initWithWindowRef:",
	"-windowRef",
	"-windowHandle",
	"+standardWindowButton:forStyleMask:",
	"-standardWindowButton:",
	"-showsToolbarButton",
	"-setShowsToolbarButton:",
	"-childWindows",
	"-addChildWindow:ordered:",
	"-removeChildWindow:",
	"-parentWindow",
	"-setParentWindow:",
	"-allowsToolTipsWhenApplicationIsInactive",
	"-setAllowsToolTipsWhenApplicationIsInactive:",
	"-isMovableByWindowBackground",
	"-setMovableByWindowBackground:",
	"-displaysWhenScreenProfileChanges",
	"-setDisplaysWhenScreenProfileChanges:",
	"-sheetParent",
	"-sheetParent",
	"-beginSheet:completionHandler:",
	"-backingScaleFactor",
	"-backingScaleFactor",
	"+windowNumberAtPoint:belowWindowWithWindowNumber:"
    );
    "NSWindow(GNUstepBackend)" = (
	"-_captureMouse:",
	"-_releaseMouse:",
	"-_initDefaults",
	"-_setVisible:"
    );
    "NSWindow(GNUstepTextView)" = (
	"-_futureFirstResponder"
    );
    "NSWindow(NSConstraintBasedLayoutCoreMethods)" = (
	"-_bootstrapAutoLayout",
	"-layoutIfNeeded"
    );
    "NSWindow(Toolbar)" = (
	"-runToolbarCustomizationPalette:",
	"-toggleToolbarShown:",
	"-toolbar",
	"-setToolbar:"
    );
    NSWindowController = (
	"-initWithWindowNibName:",
	"-initWithWindowNibName:owner:",
	"-initWithWindow:",
	"-initWithWindowNibPath:owner:",
	"-loadWindow",
	"-showWindow:",
	"-isWindowLoaded",
	"-window",
	"-setWindow:",
	"-windowDidLoad",
	"-windowWillLoad",
	"-setDocument:",
	"-document",
	"-setDocumentEdited:",
	"-close",
	"-shouldCloseDocument",
	"-setShouldCloseDocument:",
	"-owner",
	"-windowNibName",
	"-windowNibPath",
	"-shouldCascadeWindows",
	"-setShouldCascadeWindows:",
	"-setWindowFrameAutosaveName:",
	"-windowFrameAutosaveName",
	"-windowTitleForDocumentDisplayName:",
	"-synchronizeWindowTitleWithDocumentName"
    );
    NSWorkspace = (
	"+sharedWorkspace",
	"-openFile:",
	"-openFile:fromImage:at:inView:",
	"-openFile:withApplication:",
	"-openFile:withApplication:andDeactivate:",
	"-openTempFile:",
	"-openURL:",
	"-performFileOperation:source:destination:files:tag:",
	"-selectFile:inFileViewerRootedAtPath:",
	"-fullPathForApplication:",
	"-getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:",
	"-getInfoForFile:application:type:",
	"-iconForFile:",
	"-iconForFiles:",
	"-iconForFileType:",
	"-isFilePackageAtPath:",
	"-setIcon:forFile:options:",
	"-fileSystemChanged",
	"-noteFileSystemChanged",
	"-noteFileSystemChanged:",
	"-findApplications",
	"-hideOtherApplications",
	"-launchApplication:",
	"-launchApplication:showIcon:autolaunch:",
	"-absolutePathForAppBundleWithIdentifier:",
	"-launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:",
	"-openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:",
	"-filenameExtension:isValidForType:",
	"-localizedDescriptionForType:",
	"-preferredFilenameExtensionForType:",
	"-type:conformsToType:",
	"-typeOfFile:error:",
	"-activeApplication",
	"-launchedApplications",
	"-unmountAndEjectDeviceAtPath:",
	"-checkForRemovableMedia",
	"-mountNewRemovableMedia",
	"-mountedRemovableMedia",
	"-mountedLocalVolumePaths",
	"-notificationCenter",
	"-noteUserDefaultsChanged",
	"-userDefaultsChanged",
	"-slideImage:from:to:",
	"-extendPowerOffBy:"
    );
    "NSWorkspace(GNUstep)" = (
	"-getBestAppInRole:forExtension:",
	"-getBestIconForExtension:",
	"-infoForExtension:",
	"-bundleForApp:",
	"-appIconForApp:",
	"-locateApplicationBinary:",
	"-setBestApp:inRole:forExtension:",
	"-setBestIcon:forExtension:",
	"-infoForScheme:",
	"-getBestAppInRole:forScheme:",
	"-setBestApp:inRole:forScheme:"
    );
    "NSWorkspace(NSWorkspaceRunningApplications)" = (
	"-runningApplications",
	"-frontmostApplication",
	"-runningApplications",
	"-frontmostApplication"
    );
}