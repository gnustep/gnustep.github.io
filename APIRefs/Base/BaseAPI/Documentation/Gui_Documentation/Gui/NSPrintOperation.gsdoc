<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSPrintOperation" up="Gui">
  <head>
    <title>NSPrintOperation</title>
    <author name="Scott Christley">
      <email address="scottc@net-community.com">
        scottc@net-community.com
      </email>
    </author>
    <author name="Fred Kiefer">
      <email address="FredKiefer@gmx.de">
        FredKiefer@gmx.de
      </email>
    </author>
    <author name="Adam Fedor">
      <email address="fedor@gnu.org">
        fedor@gnu.org
      </email>
    </author>
    <author name="Chad Hardin">
      <email address="cehardin@mac.com">
        cehardin@mac.com
      </email>
    </author>
    <date>Generated at 2024-11-07 19:58:28 -0500</date>
    <abstract>
      Controls generation of EPS, PDF or PS print jobs.
    </abstract>
    <copy>1996,2001,2004 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSPrintOperation class
      </heading>
      <class name="NSPrintOperation" super="NSObject" ovadd="1.0.0">
        <declared>AppKit/NSPrintOperation.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <ivariable type="NSView*" name="_accessory_view" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSGraphicsContext*" name="_context" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="int" name="_currentPage" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSMutableData*" name="_data" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_job_style_hint" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSPrintingPageOrder" name="_page_order" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_path" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSPrintInfo*" name="_print_info" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSPrintPanel*" name="_print_panel" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSRect" name="_rect" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSView*" name="_view" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="struct __Flags" name="struct __Flags" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <method type="NSPrintOperation*" factory="yes" ovadd="1.0.0">
          <sel>EPSOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toData:</sel>
          <arg type="NSMutableData*">data</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="1.0.0">
          <sel>EPSOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toData:</sel>
          <arg type="NSMutableData*">data</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="1.0.0">
          <sel>EPSOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toPath:</sel>
          <arg type="NSString*">path</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="10.0.0">
          <sel>PDFOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toData:</sel>
          <arg type="NSMutableData*">data</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="10.0.0">
          <sel>PDFOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toData:</sel>
          <arg type="NSMutableData*">data</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="10.0.0">
          <sel>PDFOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toPath:</sel>
          <arg type="NSString*">path</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="1.0.0">
          <sel>currentOperation</sel>
          <desc>
            Returns the NSPrintOperation object that is
            currently performing a print operation (if any).
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="1.0.0">
          <sel>printOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintOperation*" factory="yes" ovadd="1.0.0">
          <sel>printOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" factory="yes" ovadd="1.0.0">
          <sel>setCurrentOperation:</sel>
          <arg type="NSPrintOperation*">operation</arg>
          <desc>
            Set the current NSPrintOperation to the supplied
            <var>operation</var> object. As this is currently
            implemented, if a NSPrintOperation is
            currently running, that <var>operation</var> is
            lost (along with any associated context), so be
            careful to call this only when there is no current
            <var>operation</var>.
          </desc>
        </method>
        <method type="NSView*" ovadd="10.0.0">
          <sel>accessoryView</sel>
          <desc>
            Returns the accessory view used by the NSPrintPanel
            associated with the receiver.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>canSpawnSeparateThread</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>cleanUpOperation</sel>
          <desc>
            Called by the print operation after it has finished
            running a printing operation.
          </desc>
        </method>
        <method type="NSGraphicsContext*" ovadd="1.0.0">
          <sel>context</sel>
          <desc>
            Returns the graphic contexts used by the print
            operation.
          </desc>
        </method>
        <method type="NSGraphicsContext*" ovadd="1.0.0">
          <sel>createContext</sel>
          <desc>
            This method is used by the print operation to create a
            special graphics context for use while running the
            print operation.
          </desc>
        </method>
        <method type="int" ovadd="1.0.0">
          <sel>currentPage</sel>
          <desc>
            Returns the page currently being printing. Returns
            0 if no page is currently being printed
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>deliverResult</sel>
          <desc>
            Called by the print operation to deliver the results
            of the printing operation. This might include sending
            the output to a printer, a file or a previewing
            program. Returns <code>YES</code> if the output
            was delivered sucessfully.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>destroyContext</sel>
          <desc>
            This method is used by the print operation to destroy
            the special graphic context used while running the
            print operation.
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initEPSOperationWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toData:</sel>
          <arg type="NSMutableData*">data</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>isCopyingOperation</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isEPSOperation</sel>
          <desc>
            Returns <code>YES</code> if the receiver is
            performing an operation whose output is EPS
            format.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.2.0">
          <sel>jobStyleHint</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSPrintingPageOrder" ovadd="1.0.0">
          <sel>pageOrder</sel>
          <desc>
            Returns the page order of printing.
          </desc>
        </method>
        <method type="NSPrintInfo*" ovadd="1.0.0">
          <sel>printInfo</sel>
          <desc>
            Returns the NSPrintInfo object associated with the
            receiver.
          </desc>
        </method>
        <method type="NSPrintPanel*" ovadd="1.0.0">
          <sel>printPanel</sel>
          <desc>
            Returns the NSPrintPanel associated with the
            receiver.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>runOperation</sel>
          <desc>
            Call this message to run the print operation on a
            view. This includes (optionally) displaying a print
            panel and working with the NSView to paginate and
            draw the contents of the view.
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>runOperationModalForWindow:</sel>
          <arg type="NSWindow*">docWindow</arg>
          <sel>delegate:</sel>
          <arg type="id">delegate</arg>
          <sel>didRunSelector:</sel>
          <arg type="SEL">didRunSelector</arg>
          <sel>contextInfo:</sel>
          <arg type="void*">contextInfo</arg>
          <desc>
            Run a print operation modally with respect to a window.
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAccessoryView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
            Set the accessory view used by the NSPrintPanel
            associated with the receiver.
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setCanSpawnSeparateThread:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.2.0">
          <sel>setJobStyleHint:</sel>
          <arg type="NSString*">hint</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPageOrder:</sel>
          <arg type="NSPrintingPageOrder">order</arg>
          <desc>
            Set the page <var>order</var> used when printing.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPrintInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            Set the NSPrintInfo object associated with the
            receiver.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPrintPanel:</sel>
          <arg type="NSPrintPanel*">panel</arg>
          <desc>
            Sets the NSPrintPanel used by the receiver obtaining
            and displaying printing information from/to the user.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setShowPanels:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Use this to set whether a print panel is displayed
            during a printing operation. If set to
            <code>NO</code>, then the receiver uses information
            that was previously set and does not display any
            status information about the progress of the
            printing operation.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setShowsPrintPanel:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setShowsProgressPanel:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>showPanels</sel>
          <desc>
            Returns <code>YES</code> if the reciever display an
            NSPrintPanel and other information when
            running a print operation.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>showsPrintPanel</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>showsProgressPanel</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSView*" ovadd="1.0.0">
          <sel>view</sel>
          <desc>
            Return the view that is the being printed.
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSPrintOperation(Private) category
      </heading>
      <category name="Private" class="NSPrintOperation" ovadd="1.0.0">
        <declared>AppKit/NSPrintOperation.h</declared>
        <desc>
          <em>Warning</em> this category is <em>private</em>,
          which means that the methods are for internal use by
          the package. You should not use them in external code.
        </desc>
        <method type="id" ovadd="1.0.0">
          <sel>initWithView:</sel>
          <arg type="NSView*">aView</arg>
          <sel>insideRect:</sel>
          <arg type="NSRect">rect</arg>
          <sel>toData:</sel>
          <arg type="NSMutableData*">data</arg>
          <sel>printInfo:</sel>
          <arg type="NSPrintInfo*">aPrintInfo</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
