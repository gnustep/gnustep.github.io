<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSControl" up="Gui">
  <head>
    <title>NSControl</title>
    <author name="Scott Christley">
      <email address="scottc@net-community.com">
        scottc@net-community.com
      </email>
    </author>
    <author name="Richard Frith-Macdonald">
      <email address="richard@brainstorm.co.uk">
        richard@brainstorm.co.uk
      </email>
    </author>
    <date>Generated at 2024-11-07 19:58:28 -0500</date>
    <abstract>The abstract control class</abstract>
    <copy>1996 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSControl class
      </heading>
      <class name="NSControl" super="NSView" ovadd="1.0.0">
        <declared>AppKit/NSControl.h</declared>
        <desc>
          <p>
            TODO Description
          </p>
        </desc>
        <ivariable type="id" name="_cell" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_ignoresMultiClick" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_tag" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="Class" factory="yes" ovadd="1.0.0">
          <sel>cellClass</sel>
          <desc>
            <p>
              Returns the cell <strong>Class</strong> used by
              NSControl. Used by subclasses.
            </p>
            <p>
              See Also:
              <ref type="method" id="+setCellClass:">
                +setCellClass:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" factory="yes" ovadd="1.0.0">
          <sel>setCellClass:</sel>
          <arg type="Class">factoryId</arg>
          <desc>
            <p>
              Sets the cell <strong>Class</strong> used by
              NSControl to <var>factoryId</var>. Used by
              subclasses.
            </p>
            <p>
              See Also:
              <ref type="method" id="+setCellClass:">
                +setCellClass:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>abortEditing</sel>
          <desc>
            <p>
              Sends an
              <ref type="method" id="-endEditing:" class="NSCell">
                [NSCell -endEditing:]
              </ref>
              message to the current object used to edit the
              NSControl. Returns <code>NO</code> if the the
              currentEditor does not exists,
              <code>YES</code> otherwise.
            </p>
          </desc>
        </method>
        <method type="SEL" ovadd="1.0.0">
          <sel>action</sel>
          <desc>
            <p>
              Returns the NSControl's cell action method.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAction:">
                -setAction:
              </ref>
              <ref type="method" id="-action" class="NSCell">
                [NSCell -action]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSTextAlignment" ovadd="1.0.0">
          <sel>alignment</sel>
          <desc>
            <p>
              Returns the alignment of the text in the
              NSControl's cell. Returns
              NSNaturalTextAlignment if the cell
              does not exists. See
              <ref type="type" id="NSTextAlignment">
                NSTextAlignment
              </ref>
              for more informations.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAlignment:">
                -setAlignment:
              </ref>
              <ref type="method" id="-alignment" class="NSCell">
                [NSCell -alignment]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSAttributedString*" ovadd="10.0.0">
          <sel>attributedStringValue</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSWritingDirection" ovadd="10.4.0">
          <sel>baseWritingDirection</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>calcSize</sel>
          <desc>
            <p>
              Recalculates the internal size by sending
              <ref type="method" id="-calcDrawInfo:" class="NSCell">
                [NSCell -calcDrawInfo:]
              </ref>
              to the cell.
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>cell</sel>
          <desc>
            <p>
              Returns the NSControl's cell.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCell:">
                -setCell:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSText*" ovadd="1.0.0">
          <sel>currentEditor</sel>
          <desc>
            <p>
              Returns the NSText object used when editing the
              NSControl.
            </p>
          </desc>
        </method>
        <method type="double" ovadd="1.0.0">
          <sel>doubleValue</sel>
          <desc>
            <p>
              Returns the value of the NSControl's selected
              cell as <strong>double</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDoubleValue:">
                -setDoubleValue:
              </ref>
              <ref type="method" id="-doubleValue" class="NSCell">
                [NSCell -doubleValue]
              </ref>
              <ref type="method" id="-intValue">
                -intValue
              </ref>
              <ref type="method" id="-floatValue">
                -floatValue
              </ref>
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>drawCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Redraws a <var>aCell</var> if it is the
              NSControl's cell.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCell:">
                -setCell:
              </ref>
              <ref type="method" id="-drawWithFrame:inView:" class="NSCell">[NSCell -drawWithFrame:inView:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>drawCellInside:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Redraws a <var>aCell</var> 's inside if it is the
              NSControl's cell.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCell:">
                -setCell:
              </ref>
              <ref type="method" id="-drawInteriorWithFrame:inView:" class="NSCell">[NSCell -drawInteriorWithFrame:inView:]</ref>
            </p>
          </desc>
        </method>
        <method type="float" ovadd="1.0.0">
          <sel>floatValue</sel>
          <desc>
            <p>
              Returns the value of the NSControl's selected
              cell as <strong>float</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setFloatValue:">
                -setFloatValue:
              </ref>
              <ref type="method" id="-floatValue" class="NSCell">
                [NSCell -floatValue]
              </ref>
              <ref type="method" id="-intValue">
                -intValue
              </ref>
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSFont*" ovadd="1.0.0">
          <sel>font</sel>
          <desc>
            <p>
              Returns the font of the text in the NSControl's
              cell. Returns <code>nil</code> if the cell does not
              exists.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setFont:">
                -setFont:
              </ref>
              <ref type="method" id="-font" class="NSCell">
                [NSCell -font]
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="10.0.0">
          <sel>formatter</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>ignoresMultiClick</sel>
          <desc>
            <p>
              Returns wheter multiple clicks are ignored.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIgnoresMultiClick:">
                -setIgnoresMultiClick:
              </ref>
              <ref type="method" id="-mouseDown:">
                -mouseDown:
              </ref>
            </p>
          </desc>
        </method>
        <method type="int" ovadd="1.0.0">
          <sel>intValue</sel>
          <desc>
            <p>
              Returns the value of the NSControl's selected
              cell as <strong>int</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntValue:">
                -setIntValue:
              </ref>
              <ref type="method" id="-intValue" class="NSCell">
                [NSCell -intValue]
              </ref>
              <ref type="method" id="-floatValue">
                -floatValue
              </ref>
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="10.5.0">
          <sel>integerValue</sel>
          <desc>
            <p>
              Returns the value of the NSControl's selected
              cell as <strong>int</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntegerValue:">
                -setIntegerValue:
              </ref>
              <ref type="method" id="-integerValue" class="NSCell">
                [NSCell -integerValue]
              </ref>
              <ref type="method" id="-floatValue">
                -floatValue
              </ref>
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isContinuous</sel>
          <desc>
            <p>
              Returns whether the NSControl's cell can
              continuously sends its action message.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setContinuous:">
                -setContinuous:
              </ref>
              <ref type="method" id="-isContinuous" class="NSCell">
                [NSCell -isContinuous]
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isEnabled</sel>
          <desc>
            <p>
              Returns whether the selected cell of the
              NSControl is enabled.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setEnabled:">
                -setEnabled:
              </ref>
              <ref type="method" id="-isEnabled" class="NSCell">
                [NSCell -isEnabled]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>mouseDown:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>objectValue</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>performClick:</sel>
          <arg type="id">sender</arg>
          <desc>
            Simulates a single mouse click on the control.
            This method calls the cell's method
            performClickWithFrame:inView:.
            Take note that <var>sender</var> is not used.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>refusesFirstResponder</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Sets the aCell's state to NSOnState and marks self
              for display if it is the NSControl's cell.
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>selectedCell</sel>
          <desc>
            <p>
              Returns the NSControl's selected cell.
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>selectedTag</sel>
          <desc>
            <p>
              Returns the tag of the NSControl's selected cell
              (if exists). -1 otherwise.
            </p>
            <p>
              See Also:
              <ref type="method" id="-tag" class="NSCell">
                [NSCell -tag]
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>sendAction:</sel>
          <arg type="SEL">theAction</arg>
          <sel>to:</sel>
          <arg type="id">theTarget</arg>
          <desc>
            <p>
              Asks the NSApplication to send an action
              <var>theAction</var> with <var>theTarget</var> as
              target to NSControl. Returns <code>NO</code> if
              <var>theAction</var> is <code>nil</code> or if
              NSApplication can not send the action.
            </p>
            <p>
              See Also:
              <ref type="method" id="-sendAction:to:from:" class="NSApplication">[NSApplication -sendAction:to:from:]</ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>sendActionOn:</sel>
          <arg type="NSInteger">mask</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAction:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            <p>
              Sets the NSControl's cell action method.
            </p>
            <p>
              See Also:
              <ref type="method" id="-action">
                -action
              </ref>
              <ref type="method" id="-setAction:" class="NSCell">
                [NSCell -setAction:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAlignment:</sel>
          <arg type="NSTextAlignment">mode</arg>
          <desc>
            <p>
              Sets the alignment of the text in the NSControl's
              cell to <var>mode</var>. This method abort the
              editing and marks self for display if the cell is
              an NSActionCell. See
              <ref type="type" id="NSTextAlignment">
                NSTextAlignment
              </ref>
              for more informations.
            </p>
            <p>
              See Also:
              <ref type="method" id="-alignment">
                -alignment
              </ref>
              <ref type="method" id="-setAlignment:" class="NSCell">
                [NSCell -setAlignment:]
              </ref>
              <ref type="method" id="-abortEditing">
                -abortEditing
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAttributedStringValue:</sel>
          <arg type="NSAttributedString*">attribStr</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setBaseWritingDirection:</sel>
          <arg type="NSWritingDirection">direction</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Sets the NSControl's cell to <var>aCell</var>,
              Raises an NSInvalidArgumentException exception if
              <var>aCell</var> is not <code>nil</code> and if it
              is not a cell class.
            </p>
            <p>
              See Also: <ref type="method" id="-cell">-cell</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setContinuous:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSControl's cell can continuously
              sends its action message.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isContinuous">
                -isContinuous
              </ref>
              <ref type="method" id="-setContinuous:" class="NSCell">
                [NSCell -setContinuous:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDoubleValue:</sel>
          <arg type="double">aDouble</arg>
          <desc>
            <p>
              Sets the value of the NSControl's selected cell to
              <strong>double</strong>. If the selected cell is
              an action cell, it marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
              <ref type="method" id="-setDoubleValue:" class="NSCell">
                [NSCell -setDoubleValue:]
              </ref>
              <ref type="method" id="-setIntValue:">
                -setIntValue:
              </ref>
              <ref type="method" id="-setStringValue:">
                -setStringValue:
              </ref>
              <ref type="method" id="-setFloatValue:">
                -setFloatValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setEnabled:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSControl's selected cell is
              enabled. If <var>flag</var> is <code>NO</code>,
              this method abort the editing. This method marks
              self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isEnabled">
                -isEnabled
              </ref>
              <ref type="method" id="-setEnabled:" class="NSCell">
                [NSCell -setEnabled:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFloatValue:</sel>
          <arg type="float">aFloat</arg>
          <desc>
            <p>
              Sets the value of the NSControl's selected cell to
              <strong>float</strong>. If the selected cell is
              an action cell, it marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-floatValue">
                -floatValue
              </ref>
              <ref type="method" id="-setFloatValue:" class="NSCell">
                [NSCell -setFloatValue:]
              </ref>
              <ref type="method" id="-setIntValue:">
                -setIntValue:
              </ref>
              <ref type="method" id="-setStringValue:">
                -setStringValue:
              </ref>
              <ref type="method" id="-setDoubleValue:">
                -setDoubleValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFloatingPointFormat:</sel>
          <arg type="BOOL">autoRange</arg>
          <sel>left:</sel>
          <arg type="NSUInteger">leftDigits</arg>
          <sel>right:</sel>
          <arg type="NSUInteger">rightDigits</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFont:</sel>
          <arg type="NSFont*">fontObject</arg>
          <desc>
            <p>
              Sets the font of the text in the NSControl's cell
              and the editor object (if exists) to
              <var>fontObject</var>.
            </p>
            <p>
              See Also: <ref type="method" id="-font">-font</ref>
              <ref type="method" id="-setFont:" class="NSCell">
                [NSCell -setFont:]
              </ref>
              <ref type="method" id="-currentEditor">
                -currentEditor
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setFormatter:</sel>
          <arg type="NSFormatter*">newFormatter</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setIgnoresMultiClick:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets wheter multiple clicks are ignored.
            </p>
            <p>
              See Also:
              <ref type="method" id="-ignoresMultiClick">
                -ignoresMultiClick
              </ref>
              <ref type="method" id="-mouseDown:">
                -mouseDown:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setIntValue:</sel>
          <arg type="int">anInt</arg>
          <desc>
            <p>
              Sets the value of the NSControl's selected cell to
              <strong>int</strong>. If the selected cell is an
              action cell, it marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-intValue">
                -intValue
              </ref>
              <ref type="method" id="-setIntValue:" class="NSCell">
                [NSCell -setIntValue:]
              </ref>
              <ref type="method" id="-setDoubleValue:">
                -setDoubleValue:
              </ref>
              <ref type="method" id="-setFloatValue:">
                -setFloatValue:
              </ref>
              <ref type="method" id="-setStringValue:">
                -setStringValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setIntegerValue:</sel>
          <arg type="NSInteger">anInt</arg>
          <desc>
            <p>
              Sets the value of the NSControl's selected cell to
              <strong>int</strong>. If the selected cell is an
              action cell, it marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-integerValue">
                -integerValue
              </ref>
              <ref type="method" id="-setIntegerValue:" class="NSCell">[NSCell -setIntegerValue:]</ref> <ref type="method" id="-setDoubleValue:">-setDoubleValue:</ref> <ref type="method" id="-setFloatValue:">-setFloatValue:</ref> <ref type="method" id="-setStringValue:">-setStringValue:</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setNeedsDisplay</sel>
          <desc>
            <p>
              Marks self for display.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setObjectValue:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setRefusesFirstResponder:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setStringValue:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Sets the value of the NSControl's selected cell to
              NSString. If the selected cell is an action
              cell, it marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
              <ref type="method" id="-setStringValue:" class="NSCell">
                [NSCell -setStringValue:]
              </ref>
              <ref type="method" id="-setIntValue:">
                -setIntValue:
              </ref>
              <ref type="method" id="-setFloatValue:">
                -setFloatValue:
              </ref>
              <ref type="method" id="-setDoubleValue:">
                -setDoubleValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTag:</sel>
          <arg type="NSInteger">anInt</arg>
          <desc>
            Assigning a Tag
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTarget:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <p>
              Sets the target object of the NSControl's cell to
              <var>anObject</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-target">
                -target
              </ref>
              <ref type="method" id="-setTarget:" class="NSCell">
                [NSCell -setTarget:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSSize" ovadd="10.10.0">
          <sel>sizeThatFits:</sel>
          <arg type="NSSize">size</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sizeToFit</sel>
          <desc>
            <p>
              Resizes the NSControl to fits the NSControl's
              cell size.
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellSize" class="NSCell">
                [NSCell -cellSize]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>stringValue</sel>
          <desc>
            <p>
              Returns the value of the NSControl's selected
              cell as NSString.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setStringValue:">
                -setStringValue:
              </ref>
              <ref type="method" id="-stringValue" class="NSCell">
                [NSCell -stringValue]
              </ref>
              <ref type="method" id="-intValue">
                -intValue
              </ref>
              <ref type="method" id="-floatValue">
                -floatValue
              </ref>
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>tag</sel>
          <desc>
            <p>
              Returns the NSControl tag
            </p>
            <p>
              See Also:
              <ref type="method" id="-setTag:">
                -setTag:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeDoubleValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSControl's selected cell to the sender's
              <strong>double</strong> value.
            </p>
            <p>
              See Also:
              <ref type="method" id="-takeDoubleValueFrom:" class="NSCell">[NSCell -takeDoubleValueFrom:]</ref> <ref type="method" id="-takeFloatValueFrom:">-takeFloatValueFrom:</ref> takeIntValueFrom: takeStringValueFrom:
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeFloatValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSControl's selected cell to the sender's
              <strong>float</strong> value.
            </p>
            <p>
              See Also:
              <ref type="method" id="-takeDoubleValueFrom:" class="NSCell">[NSCell -takeDoubleValueFrom:]</ref> <ref type="method" id="-takeDoubleValueFrom:">-takeDoubleValueFrom:</ref> <ref type="method" id="-takeIntValueFrom:">-takeIntValueFrom:</ref> <ref type="method" id="-takeStringValueFrom:">-takeStringValueFrom:</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeIntValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSControl's selected cell to the sender's
              <strong>float</strong> <strong>int</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-takeIntValueFrom:" class="NSCell">[NSCell -takeIntValueFrom:]</ref> <ref type="method" id="-takeDoubleValueFrom:">-takeDoubleValueFrom:</ref> <ref type="method" id="-takeFloatValueFrom:">-takeFloatValueFrom:</ref> <ref type="method" id="-takeStringValueFrom:">-takeStringValueFrom:</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>takeIntegerValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSControl's selected cell to the sender's
              <strong>float</strong> <strong>int</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-takeIntegerValueFrom:" class="NSCell">[NSCell -takeIntegerValueFrom:]</ref> <ref type="method" id="-takeDoubleValueFrom:">-takeDoubleValueFrom:</ref> <ref type="method" id="-takeFloatValueFrom:">-takeFloatValueFrom:</ref> <ref type="method" id="-takeStringValueFrom:">-takeStringValueFrom:</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeObjectValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeStringValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSControl's selected cell to the sender's
              <strong>float</strong> <strong>int</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-takeDoubleValueFrom:" class="NSCell">[NSCell -takeDoubleValueFrom:]</ref> <ref type="method" id="-takeDoubleValueFrom:">-takeDoubleValueFrom:</ref> <ref type="method" id="-takeFloatValueFrom:">-takeFloatValueFrom:</ref> <ref type="method" id="-takeIntValueFrom:">-takeIntValueFrom:</ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>target</sel>
          <desc>
            <p>
              Returns the target object of the NSControl's
              cell.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setTarget:">
                -setTarget:
              </ref>
              <ref type="method" id="-target" class="NSCell">
                [NSCell -target]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>updateCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Marks self for display.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>updateCellInside:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Marks self for display.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>validateEditing</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(NSControlDelegate)
        informal protocol
      </heading>
      <category name="NSControlDelegate" class="NSObject" ovadd="1.0.0">
        <declared>AppKit/NSControl.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="void" ovadd="1.0.0">
          <sel>controlTextDidBeginEditing:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>controlTextDidChange:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>controlTextDidEndEditing:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSObject(NSControlTextEditingDelegate)
        informal protocol
      </heading>
      <category name="NSControlTextEditingDelegate" class="NSObject" ovadd="1.0.0">
        <declared>AppKit/NSControl.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="BOOL" ovadd="1.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>didFailToFormatString:</sel>
          <arg type="NSString*">string</arg>
          <sel>errorDescription:</sel>
          <arg type="NSString*">error</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>didFailToValidatePartialString:</sel>
          <arg type="NSString*">string</arg>
          <sel>errorDescription:</sel>
          <arg type="NSString*">error</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>isValidObject:</sel>
          <arg type="id">object</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>textShouldBeginEditing:</sel>
          <arg type="NSText*">fieldEditor</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>textShouldEndEditing:</sel>
          <arg type="NSText*">fieldEditor</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>textView:</sel>
          <arg type="NSTextView*">textView</arg>
          <sel>completions:</sel>
          <arg type="NSArray*">words</arg>
          <sel>forPartialWordRange:</sel>
          <arg type="NSRange">charRange</arg>
          <sel>indexOfSelectedItem:</sel>
          <arg type="int*">index</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>control:</sel>
          <arg type="NSControl*">control</arg>
          <sel>textView:</sel>
          <arg type="NSTextView*">textView</arg>
          <sel>doCommandBySelector:</sel>
          <arg type="SEL">command</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the
        NSControlTextEditingDelegate
        protocol
      </heading>
      <protocol name="NSControlTextEditingDelegate" ovadd="1.0.0">
        <declared>AppKit/NSControl.h</declared>
        <conform>NSObject</conform>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </protocol>
    </chapter>
  </body>
</gsdoc>
