<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSCell" up="Gui">
  <head>
    <title>NSCell</title>
    <author name="Scott Christley">
      <email address="scottc@net-community.com">
        scottc@net-community.com
      </email>
    </author>
    <date>Generated at 2024-11-07 19:58:28 -0500</date>
    <abstract>The abstract cell class</abstract>
    <copy>1996-2012,2019 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSCell class
      </heading>
      <class name="NSCell" super="NSObject" ovadd="1.0.0">
        <declared>AppKit/NSCell.h</declared>
        <conform>NSCopying</conform>
        <conform>NSCoding</conform>
        <desc>
          <p>
            TODO Desctiption
          </p>
        </desc>
        <ivariable type="NSUInteger" name="_action_mask" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSImage*" name="_cell_image" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_contents" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSFont*" name="_font" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSFormatter*" name="_formatter" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSMenu*" name="_menu" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSUInteger" name="_mouse_down_flags" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_object_value" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_represented_object" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="void*" name="_reserved1" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="struct GSCellFlagsType" name="struct GSCellFlagsType" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <method type="NSFocusRingType" factory="yes" ovadd="10.3.0">
          <sel>defaultFocusRingType</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSMenu*" factory="yes" ovadd="10.0.0">
          <sel>defaultMenu</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" factory="yes" ovadd="1.0.0">
          <sel>prefersTrackingUntilMouseUp</sel>
          <desc>
            <p>
              This class method returns <code>NO</code>. This
              method should be overrided by subclasses.
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>acceptsFirstResponder</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="SEL" ovadd="1.0.0">
          <sel>action</sel>
          <desc>
            <p>
              Implemented by subclasses to return the
              action method. The NSCell implementaiton returns
              NULL.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAction:">
                -setAction:
              </ref>
              <ref type="method" id="-setTarget:">
                -setTarget:
              </ref>
              <ref type="method" id="-target">
                -target
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSTextAlignment" ovadd="1.0.0">
          <sel>alignment</sel>
          <desc>
            <p>
              Returns the alignment of the text used in the
              NSCell. See
              <ref type="type" id="NSTextAlignment">
                NSTextAlignment
              </ref>
              for more informations. By default the text alignment
              is
              <ref type="type" id="NSTextAlignment">
                NSJustifiedTextAlignment
              </ref>
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAlignment:">
                -setAlignment:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>allowsEditingTextAttributes</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>allowsMixedState</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>allowsUndo</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSAttributedString*" ovadd="10.0.0">
          <sel>attributedStringValue</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSBackgroundStyle" ovadd="10.5.0">
          <sel>backgroundStyle</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSWritingDirection" ovadd="10.4.0">
          <sel>baseWritingDirection</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>calcDrawInfo:</sel>
          <arg type="NSRect">aRect</arg>
          <desc>
            <p>
              Does nothing. This method is used by subclasses to
              recalculate sizes
            </p>
            <p>
              It is usally called from a NSControl object
            </p>
            <p>
              See Also:
              <ref type="method" id="-calcSize" class="NSControl">
                [NSControl -calcSize]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>cellAttribute:</sel>
          <arg type="NSCellAttribute">aParameter</arg>
          <desc>
            <p>
              Returns some NSCell's attributes for the
              specified
              <ref type="type" id="NSCellAttribute">
                NSCellAttribute
              </ref>
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCellAttribute:to:">
                -setCellAttribute:to:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSSize" ovadd="1.0.0">
          <sel>cellSize</sel>
          <desc>
            Returns the minimun size needed to display the
            NSCell. This size is calculate by adding :
            <list>
              <item>the borders (plain or bezeled) size</item>
              <item>
                the spacing between the border and inside the cell
              </item>
              <item>
                the TODO... if the cell is type of NSTextCellType
                or the image size if the cell has a NSImageCellType
                type.
              </item>
            </list>
            <p>
              This method returns NSZeroSize if the cell has a
              NSNullCellType type (Cocoa returns a very
              big size instead).
            </p>
          </desc>
        </method>
        <method type="NSSize" ovadd="1.0.0">
          <sel>cellSizeForBounds:</sel>
          <arg type="NSRect">aRect</arg>
          <desc>
            <p>
              TODO. Currently the GNUstep implementation returns
              <ref type="method" id="-cellSize">
                -cellSize
              </ref>
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellSize">
                -cellSize
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSComparisonResult" ovadd="1.0.0">
          <sel>compare:</sel>
          <arg type="id">otherCell</arg>
          <desc>
            Compares the reciever to another to another
            NSCell. The argument must be an NSCell sublclass
            and have the NSCellType NSTextCellType. Returns the
            result of the comparison of each cell's stringValue.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>continueTracking:</sel>
          <arg type="NSPoint">lastPoint</arg>
          <sel>at:</sel>
          <arg type="NSPoint">currentPoint</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <p>
              Returns whether the mouse dragging should
              continue for the cell. Subclasses should
              overrided this method if you want stop tracking
              the mouse. This method is call in the
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:">-trackMouse:inRect:ofView:untilMouseUp:</ref> main loop.
            </p>
            <p>
              See Also:
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:">-trackMouse:inRect:ofView:untilMouseUp:</ref>
            </p>
          </desc>
        </method>
        <method type="NSControlSize" ovadd="10.0.0">
          <sel>controlSize</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSControlTint" ovadd="10.0.0">
          <sel>controlTint</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSView*" ovadd="1.0.0">
          <sel>controlView</sel>
          <desc>
            <p>
              This method is used by subclasses to get the control
              view. This method returns <code>nil</code>.
            </p>
          </desc>
        </method>
        <method type="double" ovadd="1.0.0">
          <sel>doubleValue</sel>
          <desc>
            <p>
              Returns the NSCell's value as a
              <strong>double</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDoubleValue:">
                -setDoubleValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>drawInteriorWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <p>
              This drawing is minimal and with no background, to
              make it easier for subclass to customize drawing.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>drawWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <p>
              Draws the cell in <var>controlView</var>
            </p>
          </desc>
        </method>
        <method type="NSRect" ovadd="1.0.0">
          <sel>drawingRectForBounds:</sel>
          <arg type="NSRect">theRect</arg>
          <desc>
            <p>
              TODO
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>editWithFrame:</sel>
          <arg type="NSRect">aRect</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <sel>editor:</sel>
          <arg type="NSText*">textObject</arg>
          <sel>delegate:</sel>
          <arg type="id">anObject</arg>
          <sel>event:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
            <p>
              .This method does nothing if a the
              <var>controlView</var> is <code>nil</code>, if text
              object does not exist or if the cell's type is not
              <ref type="type" id="NSCellType">
                NSTextCellType
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>endEditing:</sel>
          <arg type="NSText*">textObject</arg>
          <desc>
            <p>
              Ends any text editing. This method sets the text
              object's delegate to <code>nil</code>, and
              remove the NSClipView and the text object used for
              editing
            </p>
            <p>
              See Also:
              <ref type="method" id="-editWithFrame:inView:editor:delegate:event:">-editWithFrame:inView:editor:delegate:event:</ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>entryType</sel>
          <desc>
            <p>
              TODO
            </p>
          </desc>
        </method>
        <method type="float" ovadd="1.0.0">
          <sel>floatValue</sel>
          <desc>
            <p>
              Returns the cell's value as a
              <strong>float</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setFloatValue:">
                -setFloatValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSFocusRingType" ovadd="10.3.0">
          <sel>focusRingType</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSFont*" ovadd="1.0.0">
          <sel>font</sel>
          <desc>
            <p>
              Returns the font of the text used in the NSCell
            </p>
            <p>
              See Also:
              <ref type="method" id="-setFont:">
                -setFont:
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="10.0.0">
          <sel>formatter</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>getPeriodicDelay:</sel>
          <arg type="float*">delay</arg>
          <sel>interval:</sel>
          <arg type="float*">interval</arg>
          <desc>
            <p>
              Gets the NSCell's <var>delay</var> and the
              <var>interval</var> parameters used when NSCell
              sends continouly action messages. The NSCell
              implementation sets <var>delay</var> to
              0.2 and <var>interval</var> to 0.025.
            </p>
            <p>
              See Also:
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:">-trackMouse:inRect:ofView:untilMouseUp:</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>hasValidObjectValue</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>highlight:</sel>
          <arg type="BOOL">lit</arg>
          <sel>withFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <p>
              TODO explain
            </p>
          </desc>
        </method>
        <method type="NSColor*" ovadd="10.0.0">
          <sel>highlightColorWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSUInteger" ovadd="10.5.0">
          <sel>hitTestForEvent:</sel>
          <arg type="NSEvent*">event</arg>
          <sel>inRect:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>ofView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSImage*" ovadd="1.0.0">
          <sel>image</sel>
          <desc>
            <p>
              Returns the NSCell's image if the NSCell's type
              is
              <ref type="type" id="NSCellType">
                NSImageCellType
              </ref>
              , returns <code>nil</code> otherwise.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setImage:">
                -setImage:
              </ref>
              <ref type="method" id="-setType:">
                -setType:
              </ref>
              <ref type="method" id="-type">
                -type
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSRect" ovadd="1.0.0">
          <sel>imageRectForBounds:</sel>
          <arg type="NSRect">theRect</arg>
          <desc>
            <p>
              Frame the image gets drawn in
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>importsGraphics</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initImageCell:</sel>
          <arg type="NSImage*">anImage</arg>
          <desc>
            <p>
              Initializes and returns a new NSCell with a
              NSImage <var>anImage</var>. This method sets the
              image position to
              <ref type="type" id="NSCellImagePosition">
                NSImageOnly
              </ref>
              and the cell's type to
              <ref type="type" id="NSCellType">
                NSImageCellType
              </ref>
              .
            </p>
            <p>
              See Also:
              <ref type="method" id="-initTextCell:">
                -initTextCell:
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initTextCell:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Initializes and returns a new NSCell with a
              NSString <var>aString</var>. This method sets
              the cell's type to
              <ref type="type" id="NSCellType">
                NSTextCellType
              </ref>
              .
            </p>
            <p>
              See Also:
              <ref type="method" id="-initImageCell:">
                -initImageCell:
              </ref>
            </p>
          </desc>
        </method>
        <method type="int" ovadd="1.0.0">
          <sel>intValue</sel>
          <desc>
            <p>
              Returns the cell's value as an
              <strong>int</strong>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntValue:">
                -setIntValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="10.5.0">
          <sel>integerValue</sel>
          <desc>
            <p>
              Returns the cell's value as an NSInteger.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntegerValue:">
                -setIntegerValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isBezeled</sel>
          <desc>
            <p>
              Returns whether the NSCell has a bezeled border.
              By default a NSCell has no bezeled border
            </p>
            <p>
              See Also:
              <ref type="method" id="-setBezeled:">
                -setBezeled:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isBordered</sel>
          <desc>
            <p>
              Returns whether the NSCell has a border. By
              default a NSCell has border
            </p>
            <p>
              See Also:
              <ref type="method" id="-setBordered:">
                -setBordered:
              </ref>
              <ref type="method" id="-setBezeled:">
                -setBezeled:
              </ref>
              <ref type="method" id="-isBezeled">
                -isBezeled
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isContinuous</sel>
          <desc>
            <p>
              Returns whether the cell can continuously send
              its action messages.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setContinuous:">
                -setContinuous:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isEditable</sel>
          <desc>
            <p>
              Returns whether the cell is editable.By default a
              NSCell is not editable.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setEditable:">
                -setEditable:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isEnabled</sel>
          <desc>
            <p>
              Returns whether the NSCell can respond to mouse
              events.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setEnabled:">
                -setEnabled:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isEntryAcceptable:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isHighlighted</sel>
          <desc>
            <p>
              Returns whether the cell is highlighted. By
              default <code>NO</code>
            </p>
            <p>
              See Also:
              <ref type="method" id="-setHighlighted:">
                -setHighlighted:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isOpaque</sel>
          <desc>
            <p>
              Returns whether the cell is opaque. Return
              <code>NO</code> by default
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isScrollable</sel>
          <desc>
            <p>
              Returns whether the NSCell is scrollable. By
              default a NSCell is not scrollable
            </p>
            <p>
              See Also:
              <ref type="method" id="-setScrollable:">
                -setScrollable:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isSelectable</sel>
          <desc>
            <p>
              Returns whether the cell is selectable. This
              method returns <code>YES</code> if the cell is
              selectable or editable. <code>NO</code>
              otherwise
            </p>
            <p>
              See Also:
              <ref type="method" id="-setSelectable:">
                -setSelectable:
              </ref>
              <ref type="method" id="-isEditable">
                -isEditable
              </ref>
              <ref type="method" id="-setEditable:">
                -setEditable:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>keyEquivalent</sel>
          <desc>
            <p>
              Implemented by subclasses to returns the key
              equivalent. The NSCell implementation returns
              an empty NSString.
            </p>
          </desc>
        </method>
        <method type="NSLineBreakMode" ovadd="10.4.0">
          <sel>lineBreakMode</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSMenu*" ovadd="10.0.0">
          <sel>menu</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSMenu*" ovadd="10.0.0">
          <sel>menuForEvent:</sel>
          <arg type="NSEvent*">anEvent</arg>
          <sel>inRect:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>ofView:</sel>
          <arg type="NSView*">aView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSString*" ovadd="10.0.0">
          <sel>mnemonic</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSUInteger" ovadd="10.0.0">
          <sel>mnemonicLocation</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>mouseDownFlags</sel>
          <desc>
            <p>
              Returns the mouse flags. This flags are usally
              sets in the
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:">-trackMouse:inRect:ofView:untilMouseUp:</ref> method
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>nextState</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>objectValue</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>performClick:</sel>
          <arg type="id">sender</arg>
          <desc>
            Simulates a single click in the cell (only works
            with controls which have no more than one cell). This
            method is deprecated, performClickWithFrame:inView:
            is the right method to use now.
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>performClickWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            Simulates a single click in the cell. The display
            of the cell with this event occurs in the area delimited
            by <var>cellFrame</var> within <var>controlView</var>.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>refusesFirstResponder</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>representedObject</sel>
          <desc>
            <p>
              Returns the NSCell's represented object
            </p>
            <p>
              See Also:
              <ref type="method" id="-setRepresentedObject:">
                -setRepresentedObject:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>resetCursorRect:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <p>
              TODO
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectWithFrame:</sel>
          <arg type="NSRect">aRect</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <sel>editor:</sel>
          <arg type="NSText*">textObject</arg>
          <sel>delegate:</sel>
          <arg type="id">anObject</arg>
          <sel>start:</sel>
          <arg type="NSInteger">selStart</arg>
          <sel>length:</sel>
          <arg type="NSInteger">selLength</arg>
          <desc>
            <p>
              This method does nothing if the
              <var>controlView</var> is <code>nil</code>, if text
              object does not exist or if the cell's type is not
              <ref type="type" id="NSCellType">
                NSTextCellType
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>sendActionOn:</sel>
          <arg type="NSInteger">mask</arg>
          <desc>
            <p>
              TODO Explain
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>sendsActionOnEndEditing</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAction:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            <p>
              Implemented by subclasses to set the action
              method. The NSCell implementation raises a
              NSInternalInconsistencyException
            </p>
            <p>
              See Also:
              <ref type="method" id="-action">
                -action
              </ref>
              <ref type="method" id="-setTarget:">
                -setTarget:
              </ref>
              <ref type="method" id="-target">
                -target
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAlignment:</sel>
          <arg type="NSTextAlignment">mode</arg>
          <desc>
            <p>
              Sets the alignment of the text. See
              <ref type="type" id="NSTextAlignment">
                NSTextAlignment
              </ref>
              .
            </p>
            <p>
              See Also:
              <ref type="method" id="-alignment">
                -alignment
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAllowsEditingTextAttributes:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAllowsMixedState:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setAllowsUndo:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAttributedStringValue:</sel>
          <arg type="NSAttributedString*">attribStr</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setBackgroundStyle:</sel>
          <arg type="NSBackgroundStyle">backgroundStyle</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setBaseWritingDirection:</sel>
          <arg type="NSWritingDirection">direction</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setBezeled:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the cell has a bezeled border. If this
              method is called, the bordered <var>flag</var> is
              turn off. By default a NSCell has no bezeled border
            </p>
            <p>
              See Also:
              <ref type="method" id="-isBezeled">
                -isBezeled
              </ref>
              <ref type="method" id="-setBordered:">
                -setBordered:
              </ref>
              <ref type="method" id="-isBordered">
                -isBordered
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setBordered:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the cell has a border. If this method
              is called, the bezeled <var>flag</var> is turn off. By
              default a NSCell has no border
            </p>
            <p>
              See Also:
              <ref type="method" id="-isBordered">
                -isBordered
              </ref>
              <ref type="method" id="-setBezeled:">
                -setBezeled:
              </ref>
              <ref type="method" id="-isBezeled">
                -isBezeled
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setCellAttribute:</sel>
          <arg type="NSCellAttribute">aParameter</arg>
          <sel>to:</sel>
          <arg type="NSInteger">value</arg>
          <desc>
            <p>
              TODO
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellAttribute:">
                -cellAttribute:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setContinuous:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the cell can continuously send its
              action messages.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isContinuous">
                -isContinuous
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setControlSize:</sel>
          <arg type="NSControlSize">controlSize</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setControlTint:</sel>
          <arg type="NSControlTint">controlTint</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setControlView:</sel>
          <arg type="NSView*">view</arg>
          <desc>
            <p>
              This method is used by subclasses to specify the
              control <var>view</var>.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDoubleValue:</sel>
          <arg type="double">aDouble</arg>
          <desc>
            <p>
              Sets the NSCell's value to <var>aDouble</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-doubleValue">
                -doubleValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setEditable:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSCell's text is editable.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isEditable">
                -isEditable
              </ref>
              <ref type="method" id="-setSelectable:">
                -setSelectable:
              </ref>
              <ref type="method" id="-isSelectable">
                -isSelectable
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setEnabled:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSCell can respond to mouse events
            </p>
            <p>
              See Also:
              <ref type="method" id="-isEnabled">
                -isEnabled
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setEntryType:</sel>
          <arg type="NSInteger">aType</arg>
          <desc>
            <p>
              TODO
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFloatValue:</sel>
          <arg type="float">aFloat</arg>
          <desc>
            <p>
              Sets the NSCell's value to a <var>aFloat</var>. This
              used for example in NSSliderCell
            </p>
            <p>
              See Also:
              <ref type="method" id="-floatValue">
                -floatValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFloatingPointFormat:</sel>
          <arg type="BOOL">autoRange</arg>
          <sel>left:</sel>
          <arg type="NSUInteger">leftDigits</arg>
          <sel>right:</sel>
          <arg type="NSUInteger">rightDigits</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.3.0">
          <sel>setFocusRingType:</sel>
          <arg type="NSFocusRingType">type</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFont:</sel>
          <arg type="NSFont*">fontObject</arg>
          <desc>
            <p>
              Sets the text font. The NSCell's type is set to
              NSTextCellType if needed
            </p>
            <p>
              See Also: <ref type="method" id="-font">-font</ref>
              <ref type="method" id="-setType:">
                -setType:
              </ref>
              <ref type="method" id="-type">
                -type
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setFormatter:</sel>
          <arg type="NSFormatter*">newFormatter</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setHighlighted:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSCell is highlighted.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isHighlighted">
                -isHighlighted
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setImage:</sel>
          <arg type="NSImage*">anImage</arg>
          <desc>
            <p>
              Sets the NSCell's image to <var>anImage</var>. This
              method sets the cell's type to NSImageCellType if
              needed. Raises an NSInvalidArgumentException if
              the <var>anImage</var> is not an NSImage (sub)class.
              The new image is retained and the old one is released
            </p>
            <p>
              See Also: <ref type="method" id="-image">-image</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setImportsGraphics:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setIntValue:</sel>
          <arg type="int">anInt</arg>
          <desc>
            <p>
              Sets the NSCell's value to <var>anInt</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-intValue">
                -intValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setIntegerValue:</sel>
          <arg type="NSInteger">anInt</arg>
          <desc>
            <p>
              Sets the NSCell's value to <var>anInt</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-integerValue">
                -integerValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setLineBreakMode:</sel>
          <arg type="NSLineBreakMode">mode</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setMenu:</sel>
          <arg type="NSMenu*">aMenu</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setMnemonicLocation:</sel>
          <arg type="NSUInteger">location</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setNextState</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setObjectValue:</sel>
          <arg type="id">object</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setRefusesFirstResponder:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setRepresentedObject:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <p>
              Sets the NSCell's represented object to
              <var>anObject</var>. <var>anObject</var> will be
              retain.
            </p>
            <p>
              See Also:
              <ref type="method" id="-representedObject">
                -representedObject
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setScrollable:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NCell is scrollable. By default a
              NSCell is not scrollable
            </p>
            <p>
              See Also:
              <ref type="method" id="-isSelectable">
                -isSelectable
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setSelectable:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the cell selectable. Making a cell
              unselectable also makes it uneditable until
              a
              <ref type="method" id="-setEditable:">
                -setEditable:
              </ref>
              re-enables it.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isSelectable">
                -isSelectable
              </ref>
              <ref type="method" id="-setEditable:">
                -setEditable:
              </ref>
              <ref type="method" id="-isEditable">
                -isEditable
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setSendsActionOnEndEditing:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setShowsFirstResponder:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setState:</sel>
          <arg type="NSInteger">value</arg>
          <desc>
            <p>
              Sets the NSCell's state. Please use always symbolic
              constants when calling this method. The integer
              values could be changed in the this
              implementation. (Currently they match the
              Cocoa values but they are quite strange)
            </p>
            <p>
              See Also: <ref type="method" id="-state">-state</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setStringValue:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Sets the cell's value to a NSString. The NSCell's
              type is set to NSTextCellType if needed
            </p>
            <p>
              See Also:
              <ref type="method" id="-stringValue">
                -stringValue
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTag:</sel>
          <arg type="NSInteger">anInt</arg>
          <desc>
            <p>
              Implemented by sublclasses to assigns the tag
              <var>anInt</var>. The NSCell implementation raises
              an NSInvalidArgumentException.
            </p>
            <p>
              See Also: <ref type="method" id="-tag">-tag</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTarget:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <p>
              Implemented by subclasses to set the target
              object. The NSCell implementation raises a
              NSInternalInconsistencyException
            </p>
            <p>
              See Also:
              <ref type="method" id="-target">
                -target
              </ref>
              <ref type="method" id="-setAction:">
                -setAction:
              </ref>
              <ref type="method" id="-action">
                -action
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setTitleWithMnemonic:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setType:</sel>
          <arg type="NSCellType">aType</arg>
          <desc>
            <p>
              Sets the NSCell's type. See
              <ref type="type" id="NSCellType">
                NSCellType
              </ref>
              .If the cell is set to NSTextCellType, the cell is
              given a default title and is reset to the default
              system font.
            </p>
            <p>
              See Also: <ref type="method" id="-type">-type</ref>
            </p>
          </desc>
        </method>
        <method type="NSText*" ovadd="1.0.0">
          <sel>setUpFieldEditorAttributes:</sel>
          <arg type="NSText*">textObject</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.8.0">
          <sel>setUserInterfaceLayoutDirection:</sel>
          <arg type="NSUserInterfaceLayoutDirection">dir</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.6.0">
          <sel>setUsesSingleLineMode:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setWraps:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>showsFirstResponder</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>startTrackingAt:</sel>
          <arg type="NSPoint">startPoint</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <p>
              Returns whether tracking starts. The NSCell
              implementation returns <code>YES</code>
              when the <var>startPoint</var> is into the control
              view retangle, <code>NO</code> otherwise. This
              method is call at the early stage of
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:">-trackMouse:inRect:ofView:untilMouseUp:</ref>
            </p>
            <p>
              See Also:
              <ref type="method" id="-mouse:inRect:" class="NSView">
                [NSView -mouse:inRect:]
              </ref>
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:">-trackMouse:inRect:ofView:untilMouseUp:</ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>state</sel>
          <desc>
            <p>
              Returns the NSCell's state
            </p>
            <p>
              See Also:
              <ref type="method" id="-setState:">
                -setState:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>stopTracking:</sel>
          <arg type="NSPoint">lastPoint</arg>
          <sel>at:</sel>
          <arg type="NSPoint">stopPoint</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <sel>mouseIsUp:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Default implementation of this method in NSCell
              does nothing.
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>stringValue</sel>
          <desc>
            <p>
              Returns the cell's value as a NSString.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setStringValue:">
                -setStringValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>tag</sel>
          <desc>
            <p>
              Implemented by subclasses to Return the tag.
              The NSCell implementation returns -1
            </p>
            <p>
              See Also:
              <ref type="method" id="-setTag:">
                -setTag:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeDoubleValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSCell's <strong>double</strong> value to
              sender's <strong>double</strong> value
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDoubleValue:">
                -setDoubleValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeFloatValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSCell's <strong>float</strong> value to
              sender's <strong>float</strong> value
            </p>
            <p>
              See Also:
              <ref type="method" id="-setFloatValue:">
                -setFloatValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeIntValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSCell's <strong>int</strong> value to
              sender's <strong>int</strong> value
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntValue:">
                -setIntValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>takeIntegerValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSCell's NSInteger value to sender's
              NSInteger value
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntegerValue:">
                -setIntegerValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeObjectValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>takeStringValueFrom:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Sets the NSCell's NSString value to sender's NSSting
              value
            </p>
            <p>
              See Also:
              <ref type="method" id="-setStringValue:">
                -setStringValue:
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>target</sel>
          <desc>
            <p>
              Implemented by subclass to return the target
              object. The NSCell implementation returns
              <code>nil</code>
            </p>
            <p>
              See Also:
              <ref type="method" id="-setTarget:">
                -setTarget:
              </ref>
              <ref type="method" id="-setAction:">
                -setAction:
              </ref>
              <ref type="method" id="-action">
                -action
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="10.0.0">
          <sel>title</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSRect" ovadd="1.0.0">
          <sel>titleRectForBounds:</sel>
          <arg type="NSRect">theRect</arg>
          <desc>
            <p>
              Frame the title gets drawn in
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>trackMouse:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <sel>inRect:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>ofView:</sel>
          <arg type="NSView*">controlView</arg>
          <sel>untilMouseUp:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSCellType" ovadd="1.0.0">
          <sel>type</sel>
          <desc>
            <p>
              Returns the cell's type. Returns NSNullCellType
              if the cell's type flag is set to NSImageCellType and
              if the cell's image is <code>nil</code>. See
              <ref type="type" id="NSCellType">
                NSCellType
              </ref>
              for more information.
            </p>
            <p>
              See Also
              <ref type="method" id="-setType:">
                -setType:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSUserInterfaceLayoutDirection" ovadd="10.8.0">
          <sel>userInterfaceLayoutDirection</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.6.0">
          <sel>usesSingleLineMode</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>wraps</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSCell(PrivateMethods)
        category
      </heading>
      <category name="PrivateMethods" class="NSCell" ovadd="1.0.0">
        <declared>AppKit/NSCell.h</declared>
        <desc>
          <em>Warning</em> this category is <em>private</em>,
          which means that the methods are for internal use by
          the package. You should not use them in external code.
        </desc>
        <method type="NSAttributedString*" ovadd="1.0.0">
          <sel>_drawAttributedString</sel>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code. <br /> Private internal method,
            returns an attributed string to display.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_drawAttributedText:</sel>
          <arg type="NSAttributedString*">aString</arg>
          <sel>inFrame:</sel>
          <arg type="NSRect">aRect</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code. <br /> Private internal method
            to display an attributed string. <br /> Important: text
            should always be vertically centered without
            considering descender [as if descender did not
            exist]. This is particularly important for single
            line texts. Please make sure the output remains always
            correct.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_drawBorderAndBackgroundWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_drawEditorWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_drawFocusRingWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_drawText:</sel>
          <arg type="NSString*">aString</arg>
          <sel>inFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code. <br /> Important: text should
            always be vertically centered without considering
            descender [as if descender did not exist]. This
            is particularly important for single line texts. Please
            make sure the output remains always correct.
          </desc>
        </method>
        <method type="NSDictionary*" ovadd="1.0.0">
          <sel>_nonAutoreleasedTypingAttributes</sel>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>_sendsActionOn:</sel>
          <arg type="NSUInteger">eventTypeMask</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_setInEditing:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="NSSize" ovadd="1.0.0">
          <sel>_sizeText:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>_updateFieldEditor:</sel>
          <arg type="NSText*">textObject</arg>
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this method indicates that it is private, for
            internal use only, and you should not use the
            method in your code.
          </desc>
        </method>
        <method type="NSColor*" ovadd="1.0.0">
          <sel>textColor</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </category>
    </chapter>
  </body>
</gsdoc>
