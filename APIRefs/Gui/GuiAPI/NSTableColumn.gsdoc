<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSTableColumn" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSTableColumn</title>
    <author name="Nicola Pero">
      <email address="n.pero@mi.flashnet.it">
        n.pero@mi.flashnet.it
      </email>
    </author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
    <copy>1999 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>Overview of NSTableColumn</heading>
      <section>
        <heading>The Column Identifier</heading>
        <p>
          Each NSTableColumn object is identified by an object,
          called the column identifier. The reason is that,
          after a column has been added to a table view, the user
          might move the columns around, so there is a need to
          identify the columns regardless of their position in
          the table.
        </p>
        <p>
          The identifier is typically a string describing the
          column. This identifier object is never displayed to
          the user ! It is only used internally by the program to
          identify the column - so yes, you may use a funny
          string for it and nobody will know, except people
          reading the code.
        </p>
      </section>
      <section>
        <heading>
          Information Stored in an NSTableColumn Object
        </heading>
        <p>
          An NSTableColumn object mainly keeps information about the
          width of the column, its minimum and maximum width;
          whether the column can be edited or resized; and the
          cells used to draw the column header and the data in
          the column. You can change all these attributes of the
          column by calling the appropriate methods. Please note
          that the table column does not hold nor has access to
          the data to be displayed in the column; this data is
          maintained in the table view's data source, as
          described in the NSTableView documentation. A last
          hint: to set the title of a table column, ask the table
          column for its header cell, and set the string value
          of this header cell to the desired title.
        </p>
      </section>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSTableColumn class
      </heading>
      <class name="NSTableColumn" super="NSObject" ovadd="1.0.0">
        <declared>AppKit/NSTableColumn.h</declared>
        <conform>NSCoding</conform>
        <desc>
          <p>
            NSTableColumn objects represent columns in
            NSTableViews.
          </p>
        </desc>
        <ivariable type="NSCell*" name="_dataCell" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSCell*" name="_headerCell" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_headerToolTip" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_identifier" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_is_editable" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_is_hidden" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_is_resizable" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float" name="_max_width" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float" name="_min_width" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSMutableArray*" name="_prototypeCellViews" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSUInteger" name="_resizing_mask" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSSortDescriptor*" name="_sortDescriptorPrototype" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSTableView*" name="_tableView" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float" name="_width" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="NSCell*" ovadd="1.0.0">
          <sel>dataCell</sel>
          <desc>
            Return the cell used to display data in the column.
            The default data cell is an NSTextFieldCell.
          </desc>
        </method>
        <method type="NSCell*" ovadd="1.0.0">
          <sel>dataCellForRow:</sel>
          <arg type="NSInteger">row</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSCell*" ovadd="1.0.0">
          <sel>headerCell</sel>
          <desc>
            Return the cell used to display the column title.
            The default header cell is an NSTableHeaderCell.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.5.0">
          <sel>headerToolTip</sel>
          <desc>
            Return the toop tip text displayed when the pointer
            is in the header area.
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>identifier</sel>
          <desc>
            Return the column identifier, an object used to
            identify the column. This object is usually a
            string, but might be any kind of object.
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initWithIdentifier:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Initialize the column. <var>anObject</var> is an
            object used to identify the column; it is usually a
            string, but might be any kind of object.
            <var>anObject</var> is retained.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isEditable</sel>
          <desc>
            Return whether data displayed in the column can be
            edited by the user by double-cliking on them.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.5.0">
          <sel>isHidden</sel>
          <desc>
            Return whether the column is invisible or not. When
            the column is hidden, it remains present in the column
            array returned by -[NSTableView tableColumns].
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isResizable</sel>
          <desc>
            Return whether the column might be resized by the
            user by dragging the column header border.
          </desc>
        </method>
        <method type="CGFloat" ovadd="1.0.0">
          <sel>maxWidth</sel>
          <desc>
            Return the column's max width. The column can in no
            way be resized to a width bigger than this max width.
            The default max width is 100000.
          </desc>
        </method>
        <method type="CGFloat" ovadd="1.0.0">
          <sel>minWidth</sel>
          <desc>
            Return the column's min width. The column can in no
            way be resized to a width smaller than this min width.
            The default min width is 10.
          </desc>
        </method>
        <method type="NSUInteger" ovadd="10.4.0">
          <sel>resizingMask</sel>
          <desc>
            Set the resizing mask that describes whether the column
            is resizable and how it resizes.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDataCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            Set the cell used to display data in the column.
            <var>aCell</var> can't be <code>nil</code>, otherwise
            a warning will be generated and the method ignored. The
            old cell is released, the new one is retained. If you
            want to change the attributes in which a single row in
            a column is displayed, you should better use a delegate
            for your NSTableView implementing
            tableView:willDisplayCell:forTableColumn:row:.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setEditable:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Set whether data in the column might be edited by the
            user by double-cliking on them.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setHeaderCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            Set the cell used to display the column header.
            <var>aCell</var> can't be <code>nil</code>, otherwise
            a warning will be generated and the method call ignored.
            The old cell is released, the new one is retained.
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setHeaderToolTip:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            Set the tool tip text displayed when the pointer is in
            the header area.
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setHidden:</sel>
          <arg type="BOOL">hidden</arg>
          <desc>
            Set whether the column is invisible or not.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setIdentifier:</sel>
          <arg type="id">anObject</arg>
          <desc>
            Set the identifier used to identify the table. The old
            identifier is released, and the new one is
            retained.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setMaxWidth:</sel>
          <arg type="CGFloat">maxWidth</arg>
          <desc>
            Set the max width of the table column, eventually
            adjusting the width of the column if it is bigger
            than the new max width. In no way a table column can
            be made bigger than its max width.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setMinWidth:</sel>
          <arg type="CGFloat">minWidth</arg>
          <desc>
            Set the min width of the table column, eventually
            adjusting the width of the column if it is
            smaller than the new min width. In no way a table
            column can be made smaller than its min width.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setResizable:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Set whether the user can resize the table column by
            dragging the border of its header with the mouse.
            The table column can be resized programmatically
            regardless of this setting.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setResizingMask:</sel>
          <arg type="NSUInteger">resizingMask</arg>
          <desc>
            Return the resizing mask that describes whether the
            column is resizable and how it resizes.
          </desc>
        </method>
        <method type="void" ovadd="10.3.0">
          <sel>setSortDescriptorPrototype:</sel>
          <arg type="NSSortDescriptor*">aSortDescriptor</arg>
          <desc>
            Return the sort descriptor bound to the column. This
            sort descriptor will be added to -[NSTableView
            sortDescriptors] when you bind a column to
            another object and
            NSCreateSortDescriptorBindingOption
            is set to <code>YES</code>.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTableView:</sel>
          <arg type="NSTableView*">aTableView</arg>
          <desc>
            Set the table view corresponding to this table column.
            This method is invoked internally by the table view,
            and you should not call it directly; it is exposed
            because you may want to override it in subclasses.
            To use the table column in a table view, you should use
            NSTableView's addTableColumn: instead.
          </desc>
        </method>
        <method type="void" ovadd="10.10.0">
          <sel>setTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setWidth:</sel>
          <arg type="CGFloat">newWidth</arg>
          <desc>
            Set the width of the table column. Before being
            resized, the new width is constrained to the table
            column minimum and maximum width: if
            <var>newWidth</var> is smaller than the table
            column's min width, the table column is simply
            resized to its min width. If <var>newWidth</var> is
            bigger than the table column's max width, the table
            column is simply resized to its max width.
            Otherwise, it is resized to <var>newWidth</var>.
            If the width of the table was actually changed, the
            table view (if any) is redisplayed (by calling tile),
            and the NSTableViewColumnDidResizeNotification is
            posted on behalf of the table view.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sizeToFit</sel>
          <desc>
            Change the width of the column to be just enough to
            display its header; change the minimum width and
            maximum width to allow the column to have this
            width (if the minimum width is bigger than the column
            header width, it is reduced to it; if the maximum
            width is smaller than the column header width, it is
            increased to it).
          </desc>
        </method>
        <method type="NSSortDescriptor*" ovadd="10.3.0">
          <sel>sortDescriptorPrototype</sel>
          <desc>
            Return the sort descriptor bound to the column.
          </desc>
        </method>
        <method type="NSTableView*" ovadd="1.0.0">
          <sel>tableView</sel>
          <desc>
            Return the table view the column belongs to, or
            <code>nil</code> if the table column was not added
            to any table view.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.10.0">
          <sel>title</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="CGFloat" ovadd="1.0.0">
          <sel>width</sel>
          <desc>
            Return the width of the table column. The default
            width is 100.
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
