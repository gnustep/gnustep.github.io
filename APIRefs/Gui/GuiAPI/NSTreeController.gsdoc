<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSTreeController" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSTreeController class documentation</title>
    <author name="Generated by Gregory John Casamento,,,"></author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSTreeController class
      </heading>
      <class name="NSTreeController" super="NSObjectController" ovadd="10.4.0">
        <declared>AppKit/NSTreeController.h</declared>
        <conform>NSCoding</conform>
        <conform>NSCopying</conform>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <ivariable type="BOOL" name="_alwaysUsesMultipleValuesMarker" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSTreeNode*" name="_arranged_objects" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_avoidsEmptySelection" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_canAddChild" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_canInsert" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_canInsertChild" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_childrenKeyPath" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_countKeyPath" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_leafKeyPath" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_preservesSelection" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSMutableArray*" name="_selection_index_paths" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_selectsInsertedObjects" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSArray*" name="_sortDescriptors" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="IBAction" ovadd="10.4.0">
          <sel>add:</sel>
          <arg type="id">sender</arg>
          <desc>
            Adds a new objeect to the tree usin the newObject
            method. If the tree controller is in "object" mode,
            then newObject is called to add a new node.
          </desc>
        </method>
        <method type="IBAction" ovadd="10.4.0">
          <sel>addChild:</sel>
          <arg type="id">sender</arg>
          <desc>
            Adds a child to the current selection using the
            newObject method. If the tree controller is in
            "object" mode, then newObject is called to add a
            new node.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>addSelectionIndexPaths:</sel>
          <arg type="NSArray*">indexPaths</arg>
          <desc>
            Adds the objects in the <var>indexPaths</var> array to
            the current selection.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>alwaysUsesMultipleValuesMarker</sel>
          <desc>
            BOOL that indicates if the controller returns the
            multiple values marker when multiple objects have
            been selected.
          </desc>
        </method>
        <method type="NSTreeNode*" ovadd="10.4.0">
          <sel>arrangedObjects</sel>
          <desc>
            All objects managed by this tree controller.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>avoidsEmptySelection</sel>
          <desc>
            If <code>YES</code>, requires the content array to
            maintain a selection.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>canAddChild</sel>
          <desc>
            If <code>YES</code>, a child can be added.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>canInsert</sel>
          <desc>
            If <code>YES</code>, an object can be inserted.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>canInsertChild</sel>
          <desc>
            If <code>YES</code>, a child can be inserted.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.4.0">
          <sel>childrenKeyPath</sel>
          <desc>
            Key path for children of the node. This key must be key
            value compliant.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.5.0">
          <sel>childrenKeyPathForNode:</sel>
          <arg type="NSTreeNode*">node</arg>
          <desc>
            children key path for the given NSTreeNode.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.4.0">
          <sel>countKeyPath</sel>
          <desc>
            Key value path for the flag which gives the count for
            the children of this node. The path indicated here must
            be key-value compliant. If count is enabled, then add:,
            addChild:, remove:, removeChild: and insert: are
            disabled. This key path is option since it can be
            determined by the array of children retuned by
            the childKeyPath. The mode the tree controller is in
            when this is not specified is called "object" mode.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.5.0">
          <sel>countKeyPathForNode:</sel>
          <arg type="NSTreeNode*">node</arg>
          <desc>
            count key path for the given NSTreeNode.
          </desc>
        </method>
        <method type="IBAction" ovadd="10.4.0">
          <sel>insert:</sel>
          <arg type="id">sender</arg>
          <desc>
            Insert an object created by newObject into arranged
            objects. This method will only function if the
            tree controller is in "object" mode.
          </desc>
        </method>
        <method type="IBAction" ovadd="10.4.0">
          <sel>insertChild:</sel>
          <arg type="id">sender</arg>
          <desc>
            Inserts a child using the newObject method. This
            method will fail if canInsertChild returns
            <code>NO</code>. If the tree controller is in
            "object" mode, then newObject is called to add a
            new node.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>insertObject:</sel>
          <arg type="id">object</arg>
          <sel>atArrangedObjectIndexPath:</sel>
          <arg type="NSIndexPath*">indexPath</arg>
          <desc>
            Insert an <var>object</var> created by newObject
            into arranged objects. This method will only function
            if the tree controller is in "object" mode.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>insertObjects:</sel>
          <arg type="NSArray*">objects</arg>
          <sel>atArrangedObjectIndexPaths:</sel>
          <arg type="NSArray*">indexPaths</arg>
          <desc>
            Inserts <var>objects</var> into arranged
            <var>objects</var> at the specified
            <var>indexPaths</var>. These arrays are expected to
            be parallel and have the same number of
            <var>objects</var>. This method will only function if
            the tree controller is in "object" mode.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.4.0">
          <sel>leafKeyPath</sel>
          <desc>
            Key value path for the flag which determins that this
            is a leaf. The path indicated here must be key-value
            compliant. This key path is optional as it can
            be determined by the children returned by the
            childrenKeyPath.
          </desc>
        </method>
        <method type="NSString*" ovadd="10.5.0">
          <sel>leafKeyPathForNode:</sel>
          <arg type="NSTreeNode*">node</arg>
          <desc>
            leaf key path for the given NSTreeNode.
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>moveNode:</sel>
          <arg type="NSTreeNode*">node</arg>
          <sel>toIndexPath:</sel>
          <arg type="NSIndexPath*">indexPath</arg>
          <desc>
            Moves <var>node</var> to given <var>indexPath</var>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>moveNodes:</sel>
          <arg type="NSArray*">nodes</arg>
          <sel>toIndexPath:</sel>
          <arg type="NSIndexPath*">startingIndexPath</arg>
          <desc>
            Move <var>nodes</var> to position at
            <var>startingIndexPath</var>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>preservesSelection</sel>
          <desc>
            If <code>YES</code>, then preserve the current selection
            when the content changes.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>rearrangeObjects</sel>
          <desc>
            Causes the controller to re-sort and rearrange the
            objects. This method should be called if anything
            has been done that affects the list of objects in the
            controller.
          </desc>
        </method>
        <method type="IBAction" ovadd="10.4.0">
          <sel>remove:</sel>
          <arg type="id">sender</arg>
          <desc>
            Remove the currently selected object. This method
            will only function if the tree controller is in
            "object" mode.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>removeObjectAtArrangedObjectIndexPath:</sel>
          <arg type="NSIndexPath*">indexPath</arg>
          <desc>
            Remove the currently selected object
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>removeObjectsAtArrangedObjectIndexPaths:</sel>
          <arg type="NSArray*">indexPaths</arg>
          <desc>
            Removes objects at the specified
            <var>indexPaths</var>.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>removeSelectionIndexPaths:</sel>
          <arg type="NSArray*">indexPaths</arg>
          <desc>
            Removes selection of objects at the specified
            <var>indexPaths</var>.
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.5.0">
          <sel>selectedNodes</sel>
          <desc>
            Array containing all selected nodes
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.4.0">
          <sel>selectedObjects</sel>
          <desc>
            An NSArray containing all selected objects.
          </desc>
        </method>
        <method type="NSIndexPath*" ovadd="10.4.0">
          <sel>selectionIndexPath</sel>
          <desc>
            The index path of the first selected object.
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.4.0">
          <sel>selectionIndexPaths</sel>
          <desc>
            An array containing all of the currently selected
            objects.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>selectsInsertedObjects</sel>
          <desc>
            If <code>YES</code>, then when an object is inserted it
            is added to the selection.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setAlwaysUsesMultipleValuesMarker:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Sets the <var>flag</var> to always use multiple values
            marker.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setAvoidsEmptySelection:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Sets the <var>flag</var> to avoid empty selection.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setChildrenKeyPath:</sel>
          <arg type="NSString*">path</arg>
          <desc>
            Sets the children key <var>path</var>. This needs to
            be key-value compliant.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setCountKeyPath:</sel>
          <arg type="NSString*">path</arg>
          <desc>
            Sets the count key <var>path</var>. This needs to be
            key-value compliant. Setting this key
            <var>path</var> will disable add:, addChild:,
            remove:, removeChild:, and insert: methods. If
            this is not specified, the tree controller is in
            "object" mode.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setLeafKeyPath:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            Sets leaf <var>key</var> path. This value needs to be
            key-value compliant.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setPreservesSelection:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Sets the preserves selection <var>flag</var>.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>setSelectionIndexPath:</sel>
          <arg type="NSIndexPath*">indexPath</arg>
          <desc>
            Makes <var>indexPath</var> the current selection.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>setSelectionIndexPaths:</sel>
          <arg type="NSArray*">indexPaths</arg>
          <desc>
            Makes the array <var>indexPaths</var> the current
            selections.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setSelectsInsertedObjects:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Sets the <var>flag</var> that determines if objects
            inserted are automatically selected.
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setSortDescriptors:</sel>
          <arg type="NSArray*">descriptors</arg>
          <desc>
            Set the <var>descriptors</var> by which the content of
            this tree controller is sorted.
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.4.0">
          <sel>sortDescriptors</sel>
          <desc>
            An array containing sort descriptors used to arrange
            content.
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
