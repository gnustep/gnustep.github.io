<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSButtonCell" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSButtonCell</title>
    <author name="Scott Christley">
      <email address="scottc@net-community.com">
        scottc@net-community.com
      </email>
    </author>
    <author name="Felipe A. Rodriguez">
      <email address="far@ix.netcom.com">
        far@ix.netcom.com
      </email>
    </author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
    <abstract>The button cell class</abstract>
    <copy>1996-1999 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSButtonCell class
      </heading>
      <class name="NSButtonCell" super="NSActionCell" ovadd="1.0.0">
        <declared>AppKit/NSButtonCell.h</declared>
        <desc>
          <p>
            TODO Description
          </p>
        </desc>
        <ivariable type="NSString*" name="_altContents" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSImage*" name="_altImage" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSColor*" name="_backgroundColor" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSBezelStyle" name="_bezel_style" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float" name="_delayInterval" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSGradientType" name="_gradient_type" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_highlightsByMask" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSImageScaling" name="_imageScaling" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSString*" name="_keyEquivalent" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSFont*" name="_keyEquivalentFont" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSUInteger" name="_keyEquivalentModifierMask" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float" name="_repeatInterval" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_showAltStateMask" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSSound*" name="_sound" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="NSImage*" ovadd="1.0.0">
          <sel>alternateImage</sel>
          <desc>
            <p>
              Returns the NSButtonCell's alternate image.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAlternateImage:">
                -setAlternateImage:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="10.0.0">
          <sel>alternateMnemonic</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSUInteger" ovadd="10.0.0">
          <sel>alternateMnemonicLocation</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>alternateTitle</sel>
          <desc>
            <p>
              Returns the NSButtonCell's alternate title (used
              when highlighted).
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAlternateTitle:">
                -setAlternateTitle:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSAttributedString*" ovadd="10.0.0">
          <sel>attributedAlternateTitle</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSAttributedString*" ovadd="10.0.0">
          <sel>attributedTitle</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSColor*" ovadd="10.4.0">
          <sel>backgroundColor</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSBezelStyle" ovadd="10.0.0">
          <sel>bezelStyle</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>drawBezelWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>drawImage:</sel>
          <arg type="NSImage*">imageToDisplay</arg>
          <sel>withFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSRect" ovadd="10.4.0">
          <sel>drawTitle:</sel>
          <arg type="NSAttributedString*">titleToDisplay</arg>
          <sel>withFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>getPeriodicDelay:</sel>
          <arg type="float*">delay</arg>
          <sel>interval:</sel>
          <arg type="float*">interval</arg>
          <desc>
            <p>
              Gets the NSButtonCell's <var>delay</var> and the
              <var>interval</var> parameters used when NSButton
              sends continouly action messages. By default
              <var>delay</var> is 0.4 and <var>interval</var> is
              0.075.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setPeriodicDelay:interval:">
                -setPeriodicDelay:interval:
              </ref>
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:" class="NSCell">[NSCell -trackMouse:inRect:ofView:untilMouseUp:]</ref>
            </p>
          </desc>
        </method>
        <method type="NSGradientType" ovadd="10.0.0">
          <sel>gradientType</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>highlightsBy</sel>
          <desc>
            <p>
              Returns a mask describing how the button cell is
              highlighted :
            </p>
            <p>
              NSNoCellMask,
              NSContentsCellMask,NSPushInCellMask,NSChangeGrayCellMask, NSChangeBackgroundCellMask
            </p>
            <p>
              See Also :
              <ref type="method" id="-setHighlightsBy:">
                -setHighlightsBy:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>imageDimsWhenDisabled</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSCellImagePosition" ovadd="1.0.0">
          <sel>imagePosition</sel>
          <desc>
            <p>
              Returns the NSButtonCell's image position. See
              <ref type="type" id="NSCellImagePosition">
                NSCellImagePosition
              </ref>
              for more information.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setImagePosition:">
                -setImagePosition:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSImageScaling" ovadd="10.5.0">
          <sel>imageScaling</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isTransparent</sel>
          <desc>
            <p>
              Returns whether the button cell is transparent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setTransparent:">
                -setTransparent:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>keyEquivalent</sel>
          <desc>
            <p>
              Returns the NSButtonCell's key equivalent. The
              key equivalent and its modifier mask are used to
              simulate the click of the button in
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>. Returns an empty string if no key equivalent is defined. By default NSButtonCell hasn't key equivalent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setKeyEquivalent:">
                -setKeyEquivalent:
              </ref>
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref> <ref type="method" id="-keyEquivalentModifierMask">-keyEquivalentModifierMask</ref> <ref type="method" id="-keyEquivalent" class="NSButtonCell">[NSButtonCell -keyEquivalent]</ref>
            </p>
          </desc>
        </method>
        <method type="NSFont*" ovadd="1.0.0">
          <sel>keyEquivalentFont</sel>
          <desc>
            <p>
              Returns the NSFont of the key equivalent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setKeyEquivalentFont:">
                -setKeyEquivalentFont:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSUInteger" ovadd="1.0.0">
          <sel>keyEquivalentModifierMask</sel>
          <desc>
            <p>
              Returns the modifier mask of the NSButtonCell's
              key equivalent. The key equivalent and its modifier
              mask are used to simulate the click of the button in
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>. The default mask is 0.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setKeyEquivalentModifierMask:">
                -setKeyEquivalentModifierMask:
              </ref>
              <ref type="method" id="-keyEquivalent">
                -keyEquivalent
              </ref>
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>mouseEntered:</sel>
          <arg type="NSEvent*">event</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>mouseExited:</sel>
          <arg type="NSEvent*">event</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAlternateImage:</sel>
          <arg type="NSImage*">anImage</arg>
          <desc>
            <p>
              Sets the NSButtonCell's alternate image to
              <var>anImage</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-alternateImage">
                -alternateImage
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAlternateMnemonicLocation:</sel>
          <arg type="NSUInteger">location</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAlternateTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Sets the NSButtonCell's alternate title (used when
              highlighted) to <var>aString</var> and update
              the cell if it contains a NSControl view.
            </p>
            <p>
              See Also:
              <ref type="method" id="-alternateTitle">
                -alternateTitle
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAlternateTitleWithMnemonic:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAttributedAlternateTitle:</sel>
          <arg type="NSAttributedString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAttributedTitle:</sel>
          <arg type="NSAttributedString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setBackgroundColor:</sel>
          <arg type="NSColor*">color</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setBezelStyle:</sel>
          <arg type="NSBezelStyle">bezelStyle</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setButtonType:</sel>
          <arg type="NSButtonType">buttonType</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setFont:</sel>
          <arg type="NSFont*">fontObject</arg>
          <desc>
            <p>
              Sets the NSButtonCell's font to
              <var>fontObject</var>. The key equivalent font size
              is changed to match the <var>fontObject</var> if
              needed.
            </p>
            <p>
              See Also:
              <ref type="method" id="-font" class="NSCell">
                [NSCell -font]
              </ref>
              <ref type="method" id="-keyEquivalentFont">
                -keyEquivalentFont
              </ref>
              <ref type="method" id="-setKeyEquivalentFont:">
                -setKeyEquivalentFont:
              </ref>
              <ref type="method" id="-setKeyEquivalentFont:size:">
                -setKeyEquivalentFont:size:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setGradientType:</sel>
          <arg type="NSGradientType">gradientType</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setHighlightsBy:</sel>
          <arg type="NSInteger">mask</arg>
          <desc>
            <p>
              Sets a <var>mask</var> describing how the button
              cell is highlighted :
            </p>
            <p>
              NSNoCellMask,
              NSContentsCellMask,NSPushInCellMask,NSChangeGrayCellMask, NSChangeBackgroundCellMask
            </p>
            <p>
              See Also :
              <ref type="method" id="-highlightsBy">
                -highlightsBy
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setImageDimsWhenDisabled:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setImagePosition:</sel>
          <arg type="NSCellImagePosition">aPosition</arg>
          <desc>
            <p>
              Sets the image position. The GNUstep implementation
              depends only on the image position. If the image
              position is set to
              <ref type="type" id="NSCellImagePosition">
                NSNoImage
              </ref>
              then the type is set to
              <ref type="type" id="NSCellImagePosition">
                NSTextCellType
              </ref>
              , to
              <ref type="type" id="NSCellImagePosition">
                NSImageCellType
              </ref>
              otherwise
            </p>
            <p>
              See Also:
              <ref type="method" id="-imagePosition">
                -imagePosition
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.5.0">
          <sel>setImageScaling:</sel>
          <arg type="NSImageScaling">scaling</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyEquivalent:</sel>
          <arg type="NSString*">key</arg>
          <desc>
            <p>
              Sets the NSButtonCell's <var>key</var> equivalent to
              <var>key</var>. The <var>key</var> equivalent and
              its modifier mask are used to simulate the click of
              the button in
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>. By default NSButton hasn't <var>key</var> equivalent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalent">
                -keyEquivalent
              </ref>
              <ref type="method" id="-setKeyEquivalentModifierMask:">
                -setKeyEquivalentModifierMask:
              </ref>
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyEquivalentFont:</sel>
          <arg type="NSFont*">fontObj</arg>
          <desc>
            <p>
              Sets the NSFont of the key equivalent to
              <var>fontObject</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalentFont">
                -keyEquivalentFont
              </ref>
              <ref type="method" id="-setFont:">
                -setFont:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyEquivalentFont:</sel>
          <arg type="NSString*">fontName</arg>
          <sel>size:</sel>
          <arg type="float">fontSize</arg>
          <desc>
            <p>
              Sets the NSFont with size <var>fontSize</var> of the
              key equivalent to <var>fontName</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalentFont">
                -keyEquivalentFont
              </ref>
              <ref type="method" id="-setKeyEquivalentFont:">
                -setKeyEquivalentFont:
              </ref>
              <ref type="method" id="-setFont:">
                -setFont:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyEquivalentModifierMask:</sel>
          <arg type="NSUInteger">mask</arg>
          <desc>
            <p>
              Sets the modifier <var>mask</var> of the
              NSButtonCell's key equivalent to
              <var>mask</var>. The key equivalent and its
              modifier <var>mask</var> are used to simulate
              the click of the button in
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>. By default the <var>mask</var> is 0.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalentModifierMask">
                -keyEquivalentModifierMask
              </ref>
              <ref type="method" id="-setKeyEquivalent:">
                -setKeyEquivalent:
              </ref>
              <ref type="method" id="-performKeyEquivalent:" class="NSButton">[NSButton -performKeyEquivalent:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPeriodicDelay:</sel>
          <arg type="float">delay</arg>
          <sel>interval:</sel>
          <arg type="float">interval</arg>
          <desc>
            <p>
              Sets the NSButtonCell's <var>delay</var> and
              <var>interval</var> parameters used when NSButton
              sends continouly action messages. By default
              <var>delay</var> is 0.4 and <var>interval</var> is
              0.075.
            </p>
            <p>
              See Also:
              <ref type="method" id="-getPeriodicDelay:interval:">
                -getPeriodicDelay:interval:
              </ref>
              <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:" class="NSCell">[NSCell -trackMouse:inRect:ofView:untilMouseUp:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setShowsBorderOnlyWhileMouseInside:</sel>
          <arg type="BOOL">show</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setShowsStateBy:</sel>
          <arg type="NSInteger">mask</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setSound:</sel>
          <arg type="NSSound*">aSound</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Sets the NSButtonCell's title to <var>aString</var>.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setTitleWithMnemonic:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTransparent:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the button cell is transparent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isTransparent">
                -isTransparent
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>showsBorderOnlyWhileMouseInside</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>showsStateBy</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSSound*" ovadd="10.0.0">
          <sel>sound</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>title</sel>
          <desc>
            <p>
              Returns the NSButtonCell's title.
            </p>
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
