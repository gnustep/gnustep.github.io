<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSAnimation" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSAnimation documentation</title>
    <author name="Generated by Gregory John Casamento,,,"></author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSAnimation class
      </heading>
      <class name="NSAnimation" super="NSObject" ovadd="10.4.0">
        <declared>AppKit/NSAnimation.h</declared>
        <conform>NSCopying</conform>
        <conform>NSCoding</conform>
        <conform>GSAnimation</conform>
        <desc>
          Objects of the NSAnimation class manage the timing
          and progress of animations in the user interface. The
          class also lets you link together multiple animations
          so that when one animation ends another one starts. It
          does not provide any drawing support for animation and
          does not directly deal with views, targets, or actions.
        </desc>
        <ivariable type="GSAnimator*" name="_animator" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimationBlockingMode" name="_blockingMode" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="unsigned int" name="_cachedProgressMarkNumberCount" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSNumber**" name="_cachedProgressMarkNumbers" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_currentDelegate" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimationProgress" name="_currentProgress" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimationCurve" name="_curve" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="_NSAnimationCurveDesc" name="_curveDesc" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimationProgress" name="_curveProgressShift" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_delegate" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="void(*" name="_delegate_animationDidEnd" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="void(*" name="_delegate_animationDidReachProgressMark" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="void(*" name="_delegate_animationDidStop" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL(*" name="_delegate_animationShouldStart" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float(*" name="_delegate_animationValueForProgress" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSTimeInterval" name="_duration" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="float" name="_frameRate" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_isANewAnimatorNeeded" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSRecursiveLock*" name="_isAnimatingLock" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_isCachedProgressMarkNumbersValid" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_isThreaded" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="unsigned int" name="_nextMark" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="void*" name="_progressMarks" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimation*" name="_startAnimation" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimationProgress" name="_startMark" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimation*" name="_stopAnimation" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSAnimationProgress" name="_stopMark" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="void" ovadd="10.4.0">
          <sel>addProgressMark:</sel>
          <arg type="NSAnimationProgress">progress</arg>
          <desc>
            Adds the <var>progress</var> mark to the receiver.
          </desc>
        </method>
        <method type="NSAnimationBlockingMode" ovadd="10.4.0">
          <sel>animationBlockingMode</sel>
          <desc>
            Returns the blocking mode the receiver is next
            scheduled to run under.
          </desc>
        </method>
        <method type="NSAnimationCurve" ovadd="10.4.0">
          <sel>animationCurve</sel>
          <desc>
            Returns the animation curve the receiver is running
            under.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>clearStartAnimation</sel>
          <desc>
            Clears linkage to another animation that causes the
            receiver to start.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>clearStopAnimation</sel>
          <desc>
            Clears linkage to another animation that causes the
            receiver to stop.
          </desc>
        </method>
        <method type="NSAnimationProgress" ovadd="10.4.0">
          <sel>currentProgress</sel>
          <desc>
            Returns the current progress of the receiver.
          </desc>
        </method>
        <method type="float" ovadd="10.4.0">
          <sel>currentValue</sel>
          <desc>
            Returns the current value of the effect based on
            the current progress.
          </desc>
        </method>
        <method type="id" ovadd="10.4.0">
          <sel>delegate</sel>
          <desc>
            Returns the delegate of the receiver.
          </desc>
        </method>
        <method type="NSTimeInterval" ovadd="10.4.0">
          <sel>duration</sel>
          <desc>
            Returns the duration of the animation, in seconds.
          </desc>
        </method>
        <method type="float" ovadd="10.4.0">
          <sel>frameRate</sel>
          <desc>
            Returns the frame rate of the animation.
          </desc>
        </method>
        <method type="id" ovadd="10.4.0">
          <sel>initWithDuration:</sel>
          <arg type="NSTimeInterval">duration</arg>
          <sel>animationCurve:</sel>
          <arg type="NSAnimationCurve">curve</arg>
          <desc>
            Returns an NSAnimation object initialized with the
            specified <var>duration</var> and animation-curve
            values.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>isAnimating</sel>
          <desc>
            Returns a Boolean value that indicates whether the
            receiver is currently animating.
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.4.0">
          <sel>progressMarks</sel>
          <desc>
            Returns the receiver's progress marks.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>removeProgressMark:</sel>
          <arg type="NSAnimationProgress">progress</arg>
          <desc>
            Removes a <var>progress</var> mark from the
            receiver. A value that does not correspond to a
            <var>progress</var> mark is ignored.
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.4.0">
          <sel>runLoopModesForAnimating</sel>
          <desc>
            Overridden to return the run-loop modes that the
            receiver uses to run the animation timer in.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setAnimationBlockingMode:</sel>
          <arg type="NSAnimationBlockingMode">mode</arg>
          <desc>
            Sets the blocking <var>mode</var> of the receiver. The
            new blocking <var>mode</var> takes effect the next time
            the receiver is started.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setAnimationCurve:</sel>
          <arg type="NSAnimationCurve">curve</arg>
          <desc>
            Sets the receiver's animation <var>curve</var>. The
            new value affects the animation already in progress :
            the actual <var>curve</var> smoothly changes from the
            old <var>curve</var> to the new one.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setCurrentProgress:</sel>
          <arg type="NSAnimationProgress">progress</arg>
          <desc>
            Sets the current <var>progress</var> of the receiver.
            In the case of a forward jump the marks between the
            previous <var>progress</var> value and the new
            (excluded) <var>progress</var> value are
            ignored. In the case of a backward jump (rewind)
            the marks will be reached again.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setDelegate:</sel>
          <arg type="id">delegate</arg>
          <desc>
            Sets the <var>delegate</var> of the receiver. The new
            <var>delegate</var> takes effect the next time the
            receiver is started.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setDuration:</sel>
          <arg type="NSTimeInterval">duration</arg>
          <desc>
            Sets the <var>duration</var> of the animation to a
            specified number of seconds. If the
            <var>duration</var> is changed while the animation is
            running the <em>speed</em> of the animation is not
            changed but the current progress value is (see
            <ref type="method" id="-setCurrentprogress">
              -setCurrentprogress
            </ref>
            ). The new value takes effect at the next frame.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setFrameRate:</sel>
          <arg type="float">fps</arg>
          <desc>
            Sets the frame rate of the receiver. The new frame
            rate takes effect at the next frame.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setProgressMarks:</sel>
          <arg type="NSArray*">progress</arg>
          <desc>
            Sets the receiver's <var>progress</var> marks to the
            values specified in the passed-in array. The new
            marks are t
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>startAnimation</sel>
          <desc>
            Starts the animation represented by the receiver. If
            the animation is already running the method has no
            effect.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>startWhenAnimation:</sel>
          <arg type="NSAnimation*">animation</arg>
          <sel>reachesProgress:</sel>
          <arg type="NSAnimationProgress">start</arg>
          <desc>
            Starts running the <var>animation</var> represented
            by the receiver when another <var>animation</var>
            reaches a specific progress mark.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>stopAnimation</sel>
          <desc>
            Stops the animation represented by the receiver. If
            the animation is not running the method has no effect.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>stopWhenAnimation:</sel>
          <arg type="NSAnimation*">animation</arg>
          <sel>reachesProgress:</sel>
          <arg type="NSAnimationProgress">stop</arg>
          <desc>
            Stops running the <var>animation</var> represented by
            the receiver when another <var>animation</var> reaches
            a specific progress mark.
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSViewAnimation class
      </heading>
      <class name="NSViewAnimation" super="NSAnimation" ovadd="10.4.0">
        <declared>AppKit/NSAnimation.h</declared>
        <desc>
          The NSViewAnimation class, a public subclass of
          NSAnimation, offers a convenient way to animate
          multiple views and windows. The animation effects
          you can achieve are limited to changes in frame location
          and size, and to fade-in and fade-out effects.
        </desc>
        <ivariable type="NSMutableArray*" name="_viewAnimationDesc" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSArray*" name="_viewAnimations" validity="protected" ovadd="10.4.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="id" ovadd="10.4.0">
          <sel>initWithViewAnimations:</sel>
          <arg type="NSArray*">animations</arg>
          <desc>
            Returns an NSViewAnimation object initialized with
            the supplied information.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>setViewAnimations:</sel>
          <arg type="NSArray*">animations</arg>
          <desc>
            Sets the dictionaries defining the objects to animate.
          </desc>
        </method>
        <method type="NSArray*" ovadd="10.4.0">
          <sel>viewAnimations</sel>
          <desc>
            Returns the array of dictionaries defining the
            objects to animate.
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSAnimation(GNUstep)
        category
      </heading>
      <category name="GNUstep" class="NSAnimation" ovadd="10.4.0">
        <declared>AppKit/NSAnimation.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="float" ovadd="10.4.0">
          <sel>actualFrameRate</sel>
          <desc>
            Returns the current the actual (mesured) frame rate
            value
          </desc>
        </method>
        <method type="unsigned int" ovadd="10.4.0">
          <sel>frameCount</sel>
          <desc>
            Returns the current value of the frame counter
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>resetCounters</sel>
          <desc>
            Resets all stats
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSObject(NSAnimation)
        informal protocol
      </heading>
      <category name="NSAnimation" class="NSObject" ovadd="10.4.0">
        <declared>AppKit/NSAnimation.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <method type="void" ovadd="10.4.0">
          <sel>animation:</sel>
          <arg type="NSAnimation*">animation</arg>
          <sel>didReachProgressMark:</sel>
          <arg type="NSAnimationProgress">progress</arg>
          <desc>
            NSAnimation delegate method. Sent to the
            delegate when an <var>animation</var> reaches a
            specific <var>progress</var> mark.
          </desc>
        </method>
        <method type="float" ovadd="10.4.0">
          <sel>animation:</sel>
          <arg type="NSAnimation*">animation</arg>
          <sel>valueForProgress:</sel>
          <arg type="NSAnimationProgress">progress</arg>
          <desc>
            NSAnimation delegate method. Requests a custom
            curve value for the current <var>progress</var>
            value.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>animationDidEnd:</sel>
          <arg type="NSAnimation*">animation</arg>
          <desc>
            NSAnimation delegate method. Sent to the
            delegate when the specified <var>animation</var>
            completes its run.
          </desc>
        </method>
        <method type="void" ovadd="10.4.0">
          <sel>animationDidStop:</sel>
          <arg type="NSAnimation*">animation</arg>
          <desc>
            NSAnimation delegate method. Sent to the
            delegate when the specified <var>animation</var>
            is stopped before it completes its run.
          </desc>
        </method>
        <method type="BOOL" ovadd="10.4.0">
          <sel>animationShouldStart:</sel>
          <arg type="NSAnimation*">animation</arg>
          <desc>
            NSAnimation delegate method. Sent to the
            delegate just after an <var>animation</var> is
            started.
          </desc>
        </method>
      </category>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSAnimationDelegate
        protocol
      </heading>
      <protocol name="NSAnimationDelegate" ovadd="10.4.0">
        <declared>AppKit/NSAnimation.h</declared>
        <conform>NSObject</conform>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </protocol>
    </chapter>
  </body>
</gsdoc>
