<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSPopUpButtonCell" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSPopUpButtonCell</title>
    <author name="Fred Kiefer">
      <email address="FredKiefer@gmx.de">
        FredKiefer@gmx.de
      </email>
    </author>
    <author name="Michael Hanni">
      <email address="mhanni@sprintmail.com">
        mhanni@sprintmail.com
      </email>
    </author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
    <copy>1999 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSPopUpButtonCell class
      </heading>
      <class name="NSPopUpButtonCell" super="NSMenuItemCell" ovadd="1.0.0">
        <declared>AppKit/NSPopUpButtonCell.h</declared>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
        <ivariable type="id&lt;NSMenuItem&gt;" name="_selectedItem" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="struct __pbcFlags" name="struct __pbcFlags" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </ivariable>
        <method type="void" ovadd="1.0.0">
          <sel>addItemWithTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            Add an item to the popup with <var>title</var>.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>addItemsWithTitles:</sel>
          <arg type="NSArray*">titles</arg>
          <desc>
            Add a number of items to the reciever using the
            provided itemTitles array.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>altersStateOfSelectedItem</sel>
          <desc>
            Return <code>YES</code>, if the reciever changes the
            state of the item chosen by the user.
          </desc>
        </method>
        <method type="NSPopUpArrowPosition" ovadd="1.0.0">
          <sel>arrowPosition</sel>
          <desc>
            Returns the current arrow position of the reciever.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>attachPopUpWithFrame:</sel>
          <arg type="NSRect">cellFrame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            Attach popup
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>autoenablesItems</sel>
          <desc>
            Returns <code>YES</code>, if the items are
            autoenabled.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>dismissPopUp</sel>
          <desc>
            Dismiss the reciever.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>indexOfItem:</sel>
          <arg type="id&lt;NSMenuItem&gt;">item</arg>
          <desc>
            Return the index of <var>item</var> in the
            <var>item</var> array of the reciever.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>indexOfItemWithRepresentedObject:</sel>
          <arg type="id">obj</arg>
          <desc>
            Index of the item whose menu item's representedObject
            is equal to <var>obj</var>.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>indexOfItemWithTag:</sel>
          <arg type="NSInteger">tag</arg>
          <desc>
            Return index of the item with a <var>tag</var> equal
            to aTag.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>indexOfItemWithTarget:</sel>
          <arg type="id">aTarget</arg>
          <sel>andAction:</sel>
          <arg type="SEL">actionSelector</arg>
          <desc>
            Index of the item in the reciever whose target and
            action are equal to <var>aTarget</var> and
            <var>actionSelector</var>.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>indexOfItemWithTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            Return index of the item with the given
            <var>title</var>.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>indexOfSelectedItem</sel>
          <desc>
            Index of the currently selected item in the reciever.
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initTextCell:</sel>
          <arg type="NSString*">stringValue</arg>
          <sel>pullsDown:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Initialize with <var>stringValue</var> and
            pullDown. If pullDown is <code>YES</code>, the
            reciever will be a pulldown button.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>insertItemWithTitle:</sel>
          <arg type="NSString*">title</arg>
          <sel>atIndex:</sel>
          <arg type="NSInteger">index</arg>
          <desc>
            Adds an item with the given <var>title</var> at
            <var>index</var>. If an item already exists at
            <var>index</var>, it, and all items after it are
            advanced one position. Index needs to be within
            the valid range for the array of items in the popup
            button.
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>itemArray</sel>
          <desc>
            Item array of the reciever.
          </desc>
        </method>
        <method type="id&lt;NSMenuItem&gt;" ovadd="1.0.0">
          <sel>itemAtIndex:</sel>
          <arg type="NSInteger">index</arg>
          <desc>
            Return the item at <var>index</var>.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>itemTitleAtIndex:</sel>
          <arg type="NSInteger">index</arg>
          <desc>
            Set item title at the given <var>index</var> in the
            reciever.
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>itemTitles</sel>
          <desc>
            Returns an array containing all of the current item
            titles.
          </desc>
        </method>
        <method type="id&lt;NSMenuItem&gt;" ovadd="1.0.0">
          <sel>itemWithTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            Return the item with <var>title</var>.
          </desc>
        </method>
        <method type="id&lt;NSMenuItem&gt;" ovadd="1.0.0">
          <sel>lastItem</sel>
          <desc>
            Return the item listed last in the reciever.
          </desc>
        </method>
        <method type="NSMenu*" ovadd="1.0.0">
          <sel>menu</sel>
          <desc>
            Return the menu for the popup.
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>numberOfItems</sel>
          <desc>
            Number of items in the reciever.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>performClickWithFrame:</sel>
          <arg type="NSRect">frame</arg>
          <sel>inView:</sel>
          <arg type="NSView*">controlView</arg>
          <desc>
            Perform the click operation with the given
            <var>frame</var> and <var>controlView</var>.
          </desc>
        </method>
        <method type="NSRectEdge" ovadd="1.0.0">
          <sel>preferredEdge</sel>
          <desc>
            Return the preferred edge.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>pullsDown</sel>
          <desc>
            Returns <code>YES</code>, if this is a pull-down
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeAllItems</sel>
          <desc>
            Purges all items from the popup.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeItemAtIndex:</sel>
          <arg type="NSInteger">index</arg>
          <desc>
            Remove a given item based on its <var>index</var>,
            must be a valid <var>index</var> within the range for
            the item array of this popup.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeItemWithTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            Remove a given item based on its <var>title</var>.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectItem:</sel>
          <arg type="id&lt;NSMenuItem&gt;">item</arg>
          <desc>
            Select <var>item</var> in the reciever.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectItemAtIndex:</sel>
          <arg type="NSInteger">index</arg>
          <desc>
            Select item at the given <var>index</var>.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectItemWithTitle:</sel>
          <arg type="NSString*">title</arg>
          <desc>
            Select the item with the given <var>title</var>.
          </desc>
        </method>
        <method type="id&lt;NSMenuItem&gt;" ovadd="1.0.0">
          <sel>selectedItem</sel>
          <desc>
            The currently selected item in the reciever.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAltersStateOfSelectedItem:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Set to <code>YES</code>, if the state of the menu item
            selected in the reciever should be changed when
            it's selected. <br /> Return <code>YES</code>, if the
            reciever changes the state of the item chosen by
            the user.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setArrowPosition:</sel>
          <arg type="NSPopUpArrowPosition">pos</arg>
          <desc>
            Sets the current arrow position of the reciever.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAutoenablesItems:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Set to <code>YES</code>, if the items are to be
            autoenabled.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setMenu:</sel>
          <arg type="NSMenu*">menu</arg>
          <desc>
            Set the <var>menu</var> for the popup.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPreferredEdge:</sel>
          <arg type="NSRectEdge">preferredEdge</arg>
          <desc>
            Set the preferred edge as described by edge. This is
            used to determine the edge which will open the popup
            when the screen is small.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPullsDown:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Set to <code>YES</code> to make the popup button a
            pull-down style control. <br /> Set the pull-down
            state
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            Set title to <var>aString</var>.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setUsesItemFromMenu:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            Set to <code>YES</code>, if the reciever should use a
            menu item for its title. <code>YES</code> is the
            default.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>synchronizeTitleAndSelectedItem</sel>
          <desc>
            Synchronizes the title and the selected item.
            This sets the selected item to the title of the
            reciever.
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>titleOfSelectedItem</sel>
          <desc>
            Returns the title of the currently selected item in
            the reciever.
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>usesItemFromMenu</sel>
          <desc>
            Returns <code>YES</code>, if the reciever uses a
            menu item for its title.
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
