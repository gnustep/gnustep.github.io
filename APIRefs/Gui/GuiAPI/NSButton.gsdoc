<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSButton" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSButton</title>
    <author name="Scott Christley">
      <email address="scottc@net-community.com">
        scottc@net-community.com
      </email>
    </author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
    <abstract>The button class</abstract>
    <copy>1996 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSButton class
      </heading>
      <class name="NSButton" super="NSControl" ovadd="1.0.0">
        <declared>AppKit/NSButton.h</declared>
        <desc>
          TODO Description
        </desc>
        <method type="BOOL" ovadd="1.0.0">
          <sel>allowsMixedState</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSImage*" ovadd="1.0.0">
          <sel>alternateImage</sel>
          <desc>
            <p>
              Returns the NSButtonCell's alternate image.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAlternateImage:">
                -setAlternateImage:
              </ref>
              <ref type="method" id="-alternateImage" class="NSButtonCell">[NSButtonCell -alternateImage]</ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>alternateTitle</sel>
          <desc>
            <p>
              Returns the NSButtonCell's alternate title.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAlternateTitle:">
                -setAlternateTitle:
              </ref>
              <ref type="method" id="-alternateTitle" class="NSButtonCell">[NSButtonCell -alternateTitle]</ref>
            </p>
          </desc>
        </method>
        <method type="NSAttributedString*" ovadd="10.0.0">
          <sel>attributedAlternateTitle</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSAttributedString*" ovadd="10.0.0">
          <sel>attributedTitle</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSBezelStyle" ovadd="10.0.0">
          <sel>bezelStyle</sel>
          <desc>
            <p>
              Returns the style of the NSButtonCell's bezeled
              border. See
              <ref type="type" id="NSBezelStyle">
                NSBezelStyle
              </ref>
              for more information.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setBezelStyle:">
                -setBezelStyle:
              </ref>
              <ref type="method" id="-bezelStyle" class="NSButtonCell">[NSButtonCell -bezelStyle]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>getPeriodicDelay:</sel>
          <arg type="float*">delay</arg>
          <sel>interval:</sel>
          <arg type="float*">interval</arg>
          <desc>
            <p>
              Gets the NSButtonCell's <var>delay</var> and the
              <var>interval</var> parameters used when NSButton
              sends continouly action messages. By default
              <var>delay</var> is 0.4 and <var>interval</var> is
              0.075.
            </p>
            <p>
              See Also:
              <ref type="method" id="-getPeriodicDelay:interval:" class="NSButtonCell">[NSButtonCell -getPeriodicDelay:interval:]</ref> <ref type="method" id="-setPeriodicDelay:interval:">-setPeriodicDelay:interval:</ref> <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:" class="NSCell">[NSCell -trackMouse:inRect:ofView:untilMouseUp:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>highlight:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              (Un)Highlights the NSButtonCell.
            </p>
            <p>
              See Also:
              <ref type="method" id="-highlight:withFrame:inView:" class="NSButtonCell">[NSButtonCell -highlight:withFrame:inView:]</ref>
            </p>
          </desc>
        </method>
        <method type="NSImage*" ovadd="1.0.0">
          <sel>image</sel>
          <desc>
            <p>
              Returns the NSButtonCell's image.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setImage:">
                -setImage:
              </ref>
              <ref type="method" id="-image" class="NSButtonCell">
                [NSButtonCell -image]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSCellImagePosition" ovadd="1.0.0">
          <sel>imagePosition</sel>
          <desc>
            <p>
              Returns the position of the NSButtonCell's image.
              See
              <ref type="type" id="NSCellImagePosition">
                NSCellImagePosition
              </ref>
              for more information.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setImagePosition:">
                -setImagePosition:
              </ref>
              <ref type="method" id="-imagePosition" class="NSButtonCell">[NSButtonCell -imagePosition]</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isBordered</sel>
          <desc>
            <p>
              Returns whether the NSButton's cell has border.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setBordered:">
                -setBordered:
              </ref>
              <ref type="method" id="-isBordered" class="NSButtonCell">[NSButtonCell -isBordered]</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isTransparent</sel>
          <desc>
            <p>
              Returns whether the NSButton's cell is
              transparent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setTransparent:">
                -setTransparent:
              </ref>
              <ref type="method" id="-isTransparent" class="NSButtonCell">[NSButtonCell -isTransparent]</ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>keyEquivalent</sel>
          <desc>
            <p>
              Returns the NSButtonCell's key equivalent. The
              key equivalent and its modifier mask are used to
              simulate the click of the button in
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              . Returns an empty string if no key equivalent is
              defined. By default NSButton hasn't key
              equivalent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setKeyEquivalent:">
                -setKeyEquivalent:
              </ref>
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              <ref type="method" id="-keyEquivalentModifierMask">
                -keyEquivalentModifierMask
              </ref>
              <ref type="method" id="-keyEquivalent" class="NSButtonCell">[NSButtonCell -keyEquivalent]</ref>
            </p>
          </desc>
        </method>
        <method type="NSUInteger" ovadd="1.0.0">
          <sel>keyEquivalentModifierMask</sel>
          <desc>
            <p>
              Returns the modifier mask of the NSButtonCell's
              key equivalent. The key equivalent and its modifier
              mask are used to simulate the click of the button in
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              . The default mask is NSCommandKeyMask.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setKeyEquivalentModifierMask:">
                -setKeyEquivalentModifierMask:
              </ref>
              <ref type="method" id="-keyEquivalent">
                -keyEquivalent
              </ref>
              <ref type="method" id="-setKeyEquivalentModifierMask:" class="NSButtonCell">[NSButtonCell -setKeyEquivalentModifierMask:]</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>performKeyEquivalent:</sel>
          <arg type="NSEvent*">anEvent</arg>
          <desc>
            <p>
              Simulates the click of the button if the key
              equivalent and its modifier mask match the
              event <var>anEvent</var>. By default the key
              modifier mask is NSCommandKeyMask and there is
              no key equivalent
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalent">
                -keyEquivalent
              </ref>
              <ref type="method" id="-keyEquivalentModifierMask">
                -keyEquivalentModifierMask
              </ref>
              <ref type="method" id="-performClick:" class="NSControl">[NSControl -performClick:]</ref> <ref type="method" id="-charactersIgnoringModifiers" class="NSEvent">[NSEvent -charactersIgnoringModifiers]</ref> <ref type="method" id="-modifierFlags" class="NSEvent">[NSEvent -modifierFlags]</ref>
            </p>
            Does nothing and returns <code>NO</code> if the
            receiver is disabled or if it is blocked by a
            modal window being run.
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAllowsMixedState:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAlternateImage:</sel>
          <arg type="NSImage*">anImage</arg>
          <desc>
            <p>
              Sets the NSButtonCell's alternate image to
              <var>anImage</var> and marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-alternateImage">
                -alternateImage
              </ref>
              <ref type="method" id="-setAlternateImage:" class="NSButtonCell">[NSButtonCell -setAlternateImage:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAlternateTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Sets the NSButtonCell's alternateTitle to
              <var>aString</var> and marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-alternateTitle">
                -alternateTitle
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAttributedAlternateTitle:</sel>
          <arg type="NSAttributedString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setAttributedTitle:</sel>
          <arg type="NSAttributedString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setBezelStyle:</sel>
          <arg type="NSBezelStyle">bezelStyle</arg>
          <desc>
            <p>
              Sets the style of the NSButtonCell's bezeled border
              and marks self for display. See
              <ref type="type" id="NSBezelStyle">
                NSBezelStyle
              </ref>
              for more information.
            </p>
            <p>
              See Also:
              <ref type="method" id="-bezelStyle">
                -bezelStyle
              </ref>
              <ref type="method" id="-setBezelStyle:" class="NSButtonCell">[NSButtonCell -setBezelStyle:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setBordered:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSButton's cell has border and
              marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isBordered">
                -isBordered
              </ref>
              <ref type="method" id="-setBordered:" class="NSButtonCell">[NSButtonCell -setBordered:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setButtonType:</sel>
          <arg type="NSButtonType">aType</arg>
          <desc>
            <p>
              Sets the NSButtonCell's type to <var>aType</var> and
              marks self for display.See
              <ref type="type" id="NSButtonType">
                NSButtonType
              </ref>
              for more information.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setButtonType:" class="NSButtonCell">[NSButtonCell -setButtonType:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setHighlightsBy:</sel>
          <arg type="NSInteger">aType</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setImage:</sel>
          <arg type="NSImage*">anImage</arg>
          <desc>
            <p>
              Sets the NSButtonCell's image to <var>anImage</var>
              and marks self for display.
            </p>
            <p>
              See Also: <ref type="method" id="-image">-image</ref>
              <ref type="method" id="-setImage:" class="NSButtonCell">
                [NSButtonCell -setImage:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setImagePosition:</sel>
          <arg type="NSCellImagePosition">aPosition</arg>
          <desc>
            <p>
              Sets the postion of the NSButtonCell's image to
              <var>aPosition</var> and marks self for display.
              See
              <ref type="type" id="NSCellImagePosition">
                NSCellImagePosition
              </ref>
              for more information.
            </p>
            <p>
              See Also:
              <ref type="method" id="-imagePosition">
                -imagePosition
              </ref>
              <ref type="method" id="-setImagePosition:" class="NSButtonCell">[NSButtonCell -setImagePosition:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyEquivalent:</sel>
          <arg type="NSString*">aKeyEquivalent</arg>
          <desc>
            <p>
              Sets the NSButtonCell's key equivalent to
              <var>aKeyEquivalent</var>. The key equivalent and
              its modifier mask are used to simulate the click of
              the button in
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              . By default NSButton hasn't key equivalent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalent">
                -keyEquivalent
              </ref>
              <ref type="method" id="-setKeyEquivalentModifierMask:">
                -setKeyEquivalentModifierMask:
              </ref>
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              <ref type="method" id="-setKeyEquivalent:" class="NSButtonCell">[NSButtonCell -setKeyEquivalent:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyEquivalentModifierMask:</sel>
          <arg type="NSUInteger">mask</arg>
          <desc>
            <p>
              Sets the modifier <var>mask</var> of the
              NSButtonCell's key equivalent to
              <var>mask</var>. The key equivalent and its
              modifier <var>mask</var> are used to simulate
              the click of the button in
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              . By default the <var>mask</var> is NSCommandKeyMask.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalentModifierMask">
                -keyEquivalentModifierMask
              </ref>
              <ref type="method" id="-setKeyEquivalent:">
                -setKeyEquivalent:
              </ref>
              <ref type="method" id="-performKeyEquivalent:">
                -performKeyEquivalent:
              </ref>
              <ref type="method" id="-setKeyEquivalentModifierMask:" class="NSButtonCell">[NSButtonCell -setKeyEquivalentModifierMask:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setNextState</sel>
          <desc>
            <p>
              Sets the NSButtonCell to the next state and marks
              self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setNextState" class="NSButtonCell">[NSButtonCell -setNextState]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPeriodicDelay:</sel>
          <arg type="float">delay</arg>
          <sel>interval:</sel>
          <arg type="float">interval</arg>
          <desc>
            <p>
              Sets the NSButtonCell's <var>delay</var> and
              <var>interval</var> parameters used when NSButton
              sends continouly action messages. By default
              <var>delay</var> is 0.4 and <var>interval</var> is
              0.075.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setPeriodicDelay:interval:" class="NSButtonCell">[NSButtonCell -setPeriodicDelay:interval:]</ref> <ref type="method" id="-getPeriodicDelay:interval:">-getPeriodicDelay:interval:</ref> <ref type="method" id="-trackMouse:inRect:ofView:untilMouseUp:" class="NSCell">[NSCell -trackMouse:inRect:ofView:untilMouseUp:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setShowsBorderOnlyWhileMouseInside:</sel>
          <arg type="BOOL">show</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setShowsStateBy:</sel>
          <arg type="NSInteger">aType</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setSound:</sel>
          <arg type="NSSound*">aSound</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setState:</sel>
          <arg type="NSInteger">value</arg>
          <desc>
            <p>
              Sets the NSButtonCell's state to <var>value</var>
              and marks self for display.
            </p>
            <p>
              See Also: <ref type="method" id="-state">-state</ref>
              <ref type="method" id="-setState:" class="NSButtonCell">
                [NSButtonCell -setState:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTitle:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <p>
              Sets the NSButtonCell's title to <var>aString</var>
              and marks self for display.
            </p>
            <p>
              See Also: <ref type="method" id="-title">-title</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="10.0.0">
          <sel>setTitleWithMnemonic:</sel>
          <arg type="NSString*">aString</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTransparent:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSButton's cell is transparent and
              marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-isTransparent">
                -isTransparent
              </ref>
              <ref type="method" id="-setTransparent:" class="NSButtonCell">[NSButtonCell -setTransparent:]</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="10.0.0">
          <sel>showsBorderOnlyWhileMouseInside</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSSound*" ovadd="10.0.0">
          <sel>sound</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>state</sel>
          <desc>
            <p>
              Returns the NSButtonCell's state.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setState:">
                -setState:
              </ref>
              <ref type="method" id="-state" class="NSButtonCell">
                [NSButtonCell -state]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>title</sel>
          <desc>
            <p>
              Returns the NSButtonCell's title.
            </p>
            <p>
              See Also:
              <ref type="method" id="-title" class="NSButtonCell">
                [NSButtonCell -title]
              </ref>
              <ref type="method" id="-setTitle:">
                -setTitle:
              </ref>
            </p>
          </desc>
        </method>
      </class>
    </chapter>
  </body>
</gsdoc>
