<?xml version="1.0"?>
<!DOCTYPE gsdoc PUBLIC "-//GNUstep//DTD gsdoc 1.0.4//EN" "http://www.gnustep.org/gsdoc-1_0_4.dtd">
<gsdoc base="NSMatrix" stylesheeturl="default-styles.css" up="Gui">
  <head>
    <title>NSMatrix</title>
    <author name="Ovidiu Predescu">
      <email address="ovidiu@net-community.com">
        ovidiu@net-community.com
      </email>
    </author>
    <date>Generated at 2024-11-13 12:52:37 -0500</date>
    <abstract>Matrix class for grouping controls</abstract>
    <copy>1996-2015 Free Software Foundation, Inc.</copy>
  </head>
  <body>
    <front><contents /></front>
    <chapter>
      <heading>
        Software documentation for the NSMatrix class
      </heading>
      <class name="NSMatrix" super="NSControl" ovadd="1.0.0">
        <declared>AppKit/NSMatrix.h</declared>
        <conform>NSCoding</conform>
        <desc>
          <p>
            TODO documentation
          </p>
        </desc>
        <ivariable type="SEL" name="_action" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_allowsEmptySelection" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_autoscroll" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_autosizesCells" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSColor*" name="_backgroundColor" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSColor*" name="_cellBackgroundColor" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="Class" name="_cellClass" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="IMP" name="_cellInit" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="IMP" name="_cellNew" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_cellPrototype" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSSize" name="_cellSize" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id**" name="_cells" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_delegate" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_dottedColumn" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_dottedRow" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="SEL" name="_doubleAction" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_drawsBackground" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_drawsCellBackground" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="SEL" name="_errorAction" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSSize" name="_intercell" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_maxCols" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_maxRows" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSMatrixMode" name="_mode" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSZone*" name="_myZone" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_numCols" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_numRows" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_reserved1" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_selectedCell" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL**" name="_selectedCells" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_selectedColumn" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSInteger" name="_selectedRow" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_selectionByRect" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="BOOL" name="_tabKeyTraversesCells" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="id" name="_target" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <ivariable type="NSText*" name="_textObject" validity="protected" ovadd="1.0.0">
          <desc>
            <em>Warning</em> the underscore at the start of the
            name of this instance variable indicates that, even
            though it is not technically <em>private</em>, it is
            intended for internal use within the package, and
            you should not use the variable in other code.
          </desc>
        </ivariable>
        <method type="Class" factory="yes" ovadd="1.0.0">
          <sel>cellClass</sel>
          <desc>
            <p>
              Returns the cell class used to create cells. By
              default it is a NSActionCell class
            </p>
            <p>
              See Also:
              <ref type="method" id="+setCellClass:">
                +setCellClass:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" factory="yes" ovadd="1.0.0">
          <sel>setCellClass:</sel>
          <arg type="Class">classId</arg>
          <desc>
            <p>
              Sets the cell class used to create cells to
              <var>classId</var>. By default it is a NSActionCell
              class
            </p>
            <p>
              See Also:
              <ref type="method" id="+setCellClass:">
                +setCellClass:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>acceptsFirstMouse:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
            <p>
              Returns <code>NO</code> if the NSMatrix's mode is
              <ref type="type" id="NSMatrixMode">
                NSListModeMatrix
              </ref>
              , <code>YES</code> otherwise.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setMode:">
                -setMode:
              </ref>
              <ref type="method" id="-mode">
                -mode
              </ref>
            </p>
          </desc>
        </method>
        <method type="SEL" ovadd="1.0.0">
          <sel>action</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>addColumn</sel>
          <desc>
            <p>
              Inserts a new column after the current last
              column.
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertColumn:withCells:">
                -insertColumn:withCells:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>addColumnWithCells:</sel>
          <arg type="NSArray*">cellArray</arg>
          <desc>
            <p>
              Inserts a new column of cells specified by
              <var>cellArray</var> after the current last column.
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertColumn:withCells:">
                -insertColumn:withCells:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>addRow</sel>
          <desc>
            <p>
              Inserts a new row after the current last row.
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertRow:withCells:">
                -insertRow:withCells:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>addRowWithCells:</sel>
          <arg type="NSArray*">cellArray</arg>
          <desc>
            <p>
              Inserts a new row of cells specified by
              <var>cellArray</var> after the current last row.
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertRow:withCells:">
                -insertRow:withCells:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>allowsEmptySelection</sel>
          <desc>
            <p>
              Returns whether the matrix should permit empty
              selections or should force one or mor cells to
              be selected at all times.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setAllowsEmptySelection:">
                -setAllowsEmptySelection:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>autosizesCells</sel>
          <desc>
            <p>
              Returns whether the NSMatrix resizes its cells
              automatically
            </p>
            <p>
              See Also:
              <ref type="method" id="-autosizesCells">
                -autosizesCells
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSColor*" ovadd="1.0.0">
          <sel>backgroundColor</sel>
          <desc>
            <p>
              Returns the background color The background color
              is used to display the NSMatrix color (the space
              between the cells), not the cells (uses
              <ref type="method" id="-setCellBackgroundColor:">
                -setCellBackgroundColor:
              </ref>
              for that)
            </p>
            <p>
              See Also:
              <ref type="method" id="-setBackgroundColor:">
                -setBackgroundColor:
              </ref>
              <ref type="method" id="-setCellBackgroundColor:">
                -setCellBackgroundColor:
              </ref>
              <ref type="method" id="-cellBackgroundColor">
                -cellBackgroundColor
              </ref>
              <ref type="method" id="-drawsBackground">
                -drawsBackground
              </ref>
              <ref type="method" id="-setDrawsBackground:">
                -setDrawsBackground:
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>cellAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Returns the cell at <var>row</var> <var>row</var>
              and <var>column</var> <var>column</var> Returns
              <code>nil</code> if the <var>row</var> or
              <var>column</var> are out of range
            </p>
          </desc>
        </method>
        <method type="NSColor*" ovadd="1.0.0">
          <sel>cellBackgroundColor</sel>
          <desc>
            <p>
              Returns the background color of the NSMatrix's
              cells.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCellBackgroundColor:">
                -setCellBackgroundColor:
              </ref>
              <ref type="method" id="-backgroundColor">
                -backgroundColor
              </ref>
              <ref type="method" id="-setBackgroundColor:">
                -setBackgroundColor:
              </ref>
            </p>
          </desc>
        </method>
        <method type="Class" ovadd="1.0.0">
          <sel>cellClass</sel>
          <desc>
            <p>
              Returns the cell class used by the NSMatrix when
              it creates new cells. The default cell class is a
              NSActionCell class
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCellClass:">
                -setCellClass:
              </ref>
              <ref type="method" id="-setPrototype:">
                -setPrototype:
              </ref>
              <ref type="method" id="-prototype">
                -prototype
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSRect" ovadd="1.0.0">
          <sel>cellFrameAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Returns the rectangle of the cell at
              <var>row</var> <var>row</var> and <var>column</var>
              <var>column</var>
            </p>
          </desc>
        </method>
        <method type="NSSize" ovadd="1.0.0">
          <sel>cellSize</sel>
          <desc>
            <p>
              Returns the size of the NSMatrix's cells
            </p>
            <p>
              See Also:
              <ref type="method" id="-setCellSize:">
                -setCellSize:
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>cellWithTag:</sel>
          <arg type="NSInteger">anInt</arg>
          <desc>
            <p>
              Returns the cell with tag <var>anInt</var>
              Returns <code>nil</code> if no cell has a tag
              <var>anInt</var>
            </p>
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>cells</sel>
          <desc>
            <p>
              Returns an array of the NSMatrix's cells
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>delegate</sel>
          <desc>
            <p>
              Returns the NSMatrix's delegate. delegate is used
              when editing a cell
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDelegate:">
                -setDelegate:
              </ref>
              <ref type="method" id="-textDidEndEditing:">
                -textDidEndEditing:
              </ref>
              <ref type="method" id="-textDidBeginEditing:">
                -textDidBeginEditing:
              </ref>
              <ref type="method" id="-textDidChange:">
                -textDidChange:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>deselectAllCells</sel>
          <desc>
            <p>
              Deselects all NSMatrix's cells. Does nothing if
              the NSMatrix's mode is NSRadioModeMatrix and if it
              does not allows empty selection. Except for the
              case, when there are no cells left at all. Then the
              selection is always cleared.
            </p>
            <p>
              See Also: <ref type="method" id="-mode">-mode</ref>
              <ref type="method" id="-allowsEmptySelection">
                -allowsEmptySelection
              </ref>
              <ref type="method" id="-setNeedsDisplayInRect:">
                -setNeedsDisplayInRect:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>deselectSelectedCell</sel>
          <desc>
            <p>
              Deselects the selected cell.Does nothing if the
              NSMatrix's mode is NSRadioModeMatrix and if it
              does not allows empty selection
            </p>
          </desc>
        </method>
        <method type="SEL" ovadd="1.0.0">
          <sel>doubleAction</sel>
          <desc>
            <p>
              Returns the action method, used when the user
              <strong>double</strong> clicks
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDoubleAction:">
                -setDoubleAction:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>drawCellAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Draws the cell at <var>row</var> <var>row</var> and
              <var>column</var> <var>column</var>
            </p>
            <p>
              See Also:
              <ref type="method" id="-drawWithFrame:inView:" class="NSCell">[NSCell -drawWithFrame:inView:]</ref> <ref type="method" id="-setDrawsCellBackground:">-setDrawsCellBackground:</ref> <ref type="method" id="-drawsCellBackground">-drawsCellBackground</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>drawsBackground</sel>
          <desc>
            <p>
              Returns whether the NSMatrix draws its background
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDrawsBackground:">
                -setDrawsBackground:
              </ref>
              <ref type="method" id="-drawsCellBackground">
                -drawsCellBackground
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>drawsCellBackground</sel>
          <desc>
            <p>
              Returns whether the NSMatrix draws cells
              backgrounds
            </p>
            <p>
              See Also:
              <ref type="method" id="-setDrawsCellBackground:">
                -setDrawsCellBackground:
              </ref>
              <ref type="method" id="-drawsBackground">
                -drawsBackground
              </ref>
            </p>
          </desc>
        </method>
        <method type="SEL" ovadd="1.0.0">
          <sel>errorAction</sel>
          <desc>
            <p>
              Returns the error action method to
              <var>aSelector</var> This error method is used when
              in
              <ref type="method" id="-textShouldEndEditing:">
                -textShouldEndEditing:
              </ref>
              if the selected cell doe not have a valid text object
            </p>
            <p>
              See Also:
              <ref type="method" id="-setErrorAction:">
                -setErrorAction:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>getNumberOfRows:</sel>
          <arg type="NSInteger*">rowCount</arg>
          <sel>columns:</sel>
          <arg type="NSInteger*">columnCount</arg>
          <desc>
            <p>
              Gets the number of rows and columns of the NSMatrix
            </p>
            <p>
              See Also:
              <ref type="method" id="-numberOfColumns">
                -numberOfColumns
              </ref>
              <ref type="method" id="-numberOfRows">
                -numberOfRows
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>getRow:</sel>
          <arg type="NSInteger*">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger*">column</arg>
          <sel>forPoint:</sel>
          <arg type="NSPoint">aPoint</arg>
          <desc>
            <p>
              Gets the <var>row</var> and the <var>column</var> of
              the NSMatrix correponding to the specified NSPoint
              <var>aPoint</var>. Returns <code>YES</code> if
              <var>aPoint</var> is within the NSMatrix,
              <code>NO</code> otherwise
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>getRow:</sel>
          <arg type="NSInteger*">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger*">column</arg>
          <sel>ofCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Gets the <var>row</var> and the <var>column</var> of
              the NSMatrix correponding to the specified NSCell
              <var>aCell</var>. Returns <code>YES</code> if
              <var>aCell</var> is in the NSMatrix,
              <code>NO</code> otherwise
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>highlightCell:</sel>
          <arg type="BOOL">flag</arg>
          <sel>atRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              (Un)Highlights the cell (if exists) at
              <var>row</var> at <var>row</var> <var>row</var> and
              <var>column</var> <var>column</var>. and maks the
              cell rect for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setNeedsDisplayInRect:">
                -setNeedsDisplayInRect:
              </ref>
              <ref type="method" id="-setHighlighted:" class="NSCell">
                [NSCell -setHighlighted:]
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initWithFrame:</sel>
          <arg type="NSRect">frameRect</arg>
          <desc>
            <p>
              Initializes and returns a NSMatrix in frame
              <var>frameRect</var>. By default the matrix has no
              row and no column, the NSMatrix's mode is
              NSRadioModeMatrix and the cell class is
              a NSActionCell class.
            </p>
            <p>
              See Also:
              <ref type="method" id="-initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:">-initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:</ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initWithFrame:</sel>
          <arg type="NSRect">frameRect</arg>
          <sel>mode:</sel>
          <arg type="NSMatrixMode">aMode</arg>
          <sel>cellClass:</sel>
          <arg type="Class">classId</arg>
          <sel>numberOfRows:</sel>
          <arg type="NSInteger">rowsHigh</arg>
          <sel>numberOfColumns:</sel>
          <arg type="NSInteger">colsWide</arg>
          <desc>
            <p>
              Initializes and returns a new NSMatrix in the
              specified frame <var>frameRect</var>. The
              <ref type="type" id="NSMatrixMode">
                NSMatrixMode
              </ref>
              is specified by mode, the cell class used specified by
              <var>classId</var> and the number of rows and
              columns specified by <var>rowsHigh</var> and
              <var>colsWide</var> respectively
            </p>
            <p>
              See Also:
              <ref type="method" id="-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:">-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:</ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>initWithFrame:</sel>
          <arg type="NSRect">frameRect</arg>
          <sel>mode:</sel>
          <arg type="NSMatrixMode">aMode</arg>
          <sel>prototype:</sel>
          <arg type="NSCell*">aCell</arg>
          <sel>numberOfRows:</sel>
          <arg type="NSInteger">rowsHigh</arg>
          <sel>numberOfColumns:</sel>
          <arg type="NSInteger">colsWide</arg>
          <desc>
            <p>
              Initializes and returns a new NSMatrix in the
              specified frame <var>frameRect</var>. The
              <ref type="type" id="NSMatrixMode">
                NSMatrixMode
              </ref>
              is specified by mode, the cell used specified by
              <var>aCell</var> and the number of rows and columns
              specified by <var>rowsHigh</var> and
              <var>colsWide</var> respectively
            </p>
            <p>
              See Also:
              <ref type="method" id="-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:">-initWithFrame:mode:prototype:numberOfRows:numberOfColumns:</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>insertColumn:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Inserts a new <var>column</var> at the specified
              <var>column</var> <var>column</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertColumn:withCells:">
                -insertColumn:withCells:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>insertColumn:</sel>
          <arg type="NSInteger">column</arg>
          <sel>withCells:</sel>
          <arg type="NSArray*">cellArray</arg>
          <desc>
            <p>
              Inserts a new <var>column</var> of cells (
              specified by <var>cellArray</var>) at the
              specified <var>column</var> <var>column</var>.
              This method can grows the matrix as necessay if
              needed
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertColumn:">
                -insertColumn:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>insertRow:</sel>
          <arg type="NSInteger">row</arg>
          <desc>
            <p>
              Inserts a new <var>row</var> at index
              <var>row</var>.
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertRow:withCells:">
                -insertRow:withCells:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>insertRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>withCells:</sel>
          <arg type="NSArray*">cellArray</arg>
          <desc>
            <p>
              Inserts a new <var>row</var> of cells (specified
              by <var>cellArray</var>) at the specified
              <var>row</var> <var>row</var>. This method can
              grows the matrix as necessay if needed
            </p>
            <p>
              See Also:
              <ref type="method" id="-insertColumn:">
                -insertColumn:
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSSize" ovadd="1.0.0">
          <sel>intercellSpacing</sel>
          <desc>
            <p>
              Returns the space size between cells.
            </p>
            <p>
              See Also:
              <ref type="method" id="-setIntercellSpacing:">
                -setIntercellSpacing:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isAutoscroll</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>isSelectionByRect</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>keyCell</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSCell*" ovadd="1.0.0">
          <sel>makeCellAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Makes and returns new cell at <var>row</var>
              <var>row</var> and <var>column</var>
              <var>column</var>.
            </p>
          </desc>
        </method>
        <method type="NSMatrixMode" ovadd="1.0.0">
          <sel>mode</sel>
          <desc>
            <p>
              Returns the NSMatrix's mode. See
              <ref type="type" id="NSMatrixMode">
                NSMatrixMode
              </ref>
              for more informations. By default the mode is
              <ref type="type" id="NSMatrixMode">
                NSRadioModeMatrix
              </ref>
              .
            </p>
            <p>
              See Also:
              <ref type="method" id="-setMode:">
                -setMode:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>mouseDown:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>mouseDownFlags</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>nextText</sel>
          <desc>
            <p>
              Returns the next key view
            </p>
            <p>
              See Also:
              <ref type="method" id="-setNextText:">
                -setNextText:
              </ref>
              <ref type="method" id="-nextKeyView" class="NSView">
                [NSView -nextKeyView]
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>numberOfColumns</sel>
          <desc>
            <p>
              Returns the number of columns of the NSMatrix
            </p>
            <p>
              See Also:
              <ref type="method" id="-numberOfRows">
                -numberOfRows
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>numberOfRows</sel>
          <desc>
            <p>
              Returns the number of rows of the NSMatrix
            </p>
            <p>
              See Also:
              <ref type="method" id="-numberOfColumns">
                -numberOfColumns
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>performKeyEquivalent:</sel>
          <arg type="NSEvent*">theEvent</arg>
          <desc>
            <p>
              Simulates a mouse click for the first cell with
              the corresponding key Equivalent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-keyEquivalent" class="NSCell">
                [NSCell -keyEquivalent]
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>previousText</sel>
          <desc>
            <p>
              Returns the previous key view
            </p>
            <p>
              See Also:
              <ref type="method" id="-setPreviousText:">
                -setPreviousText:
              </ref>
              <ref type="method" id="-previousKeyView" class="NSView">
                [NSView -previousKeyView]
              </ref>
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>prototype</sel>
          <desc>
            <p>
              Returns the prototype cell used by the NSMatrix
              when it creates new cells. The default cell is
              NSActionCell
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellClass">
                -cellClass
              </ref>
              <ref type="method" id="-setPrototype:">
                -setPrototype:
              </ref>
              <ref type="method" id="-prototype">
                -prototype
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>putCell:</sel>
          <arg type="NSCell*">newCell</arg>
          <sel>atRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Replaces the NSMatrix's cell at <var>row</var>
              <var>row</var> and <var>column</var>
              <var>column</var> by <var>newCell</var> and mark
              for display the new cell. Raises a NSRangeException
              if the <var>row</var> or <var>column</var> are out of
              range.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeColumn:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Removes the NSMatrix's <var>column</var> at index
              <var>column</var>
            </p>
            <p>
              See Also:
              <ref type="method" id="-removeRow:">
                -removeRow:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>removeRow:</sel>
          <arg type="NSInteger">row</arg>
          <desc>
            <p>
              Removes the NSMatrix's <var>row</var> at index
              <var>row</var>
            </p>
            <p>
              See Also:
              <ref type="method" id="-removeColumn:">
                -removeColumn:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>renewRows:</sel>
          <arg type="NSInteger">newRows</arg>
          <sel>columns:</sel>
          <arg type="NSInteger">newColumns</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>resetCursorRects</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>scrollCellToVisibleAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Scrolls the NSMatrix to make the cell at
              <var>row</var> <var>row</var> and <var>column</var>
              <var>column</var> visible
            </p>
            <p>
              See Also:
              <ref type="method" id="-scrollRectToVisible:">
                -scrollRectToVisible:
              </ref>
              <ref type="method" id="-cellFrameAtRow:column:">
                -cellFrameAtRow:column:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectAll:</sel>
          <arg type="id">sender</arg>
          <desc>
            <p>
              Selects all the cells and marks self for display.
              Does nothing if the NSMatrix's mode is
              NSRadioModeMatrix
            </p>
            <p>
              See Also:
              <ref type="method" id="-selectCellAtRow:column:">
                -selectCellAtRow:column:
              </ref>
              <ref type="method" id="-selectCell:">
                -selectCell:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectCellAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Selects the cell and the text inside at
              <var>row</var> <var>row</var> and <var>column</var>
              <var>column</var>. If <var>row</var> or
              <var>column</var> is -1 it deselects all the cells.
            </p>
            <p>
              See Also:
              <ref type="method" id="-deselectSelectedCell">
                -deselectSelectedCell
              </ref>
              <ref type="method" id="-selectTextAtRow:column:">
                -selectTextAtRow:column:
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>selectCellWithTag:</sel>
          <arg type="NSInteger">anInt</arg>
          <desc>
            <p>
              Selects the cell (and the text inside) with tag
              <var>anInt</var>. Return <code>YES</code> if the
              NSMatrix contains a cell with tag
              <var>anInt</var>, <code>NO</code> otherwise.
            </p>
            <p>
              See Also:
              <ref type="method" id="-deselectSelectedCell">
                -deselectSelectedCell
              </ref>
              <ref type="method" id="-selectTextAtRow:column:">
                -selectTextAtRow:column:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>selectText:</sel>
          <arg type="id">sender</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>selectTextAtRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Select the text of the cell at <var>row</var>
              <var>row</var> and <var>column</var>
              <var>column</var>. The cell is selected if and only
              if the cell is selectable (MacOSX select it if the
              cell is editable). This methods returns the selected
              cell if exists and selectable, <code>nil</code>
              otherwise
            </p>
          </desc>
        </method>
        <method type="id" ovadd="1.0.0">
          <sel>selectedCell</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSArray*" ovadd="1.0.0">
          <sel>selectedCells</sel>
          <desc>
            <p>
              Returns an array of the selected cells
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>selectedColumn</sel>
          <desc>
            <p>
              Returns the column number of the selected cell or
              -1 if no cell is selected
            </p>
            <p>
              See Also:
              <ref type="method" id="-selectedRow">
                -selectedRow
              </ref>
              <ref type="method" id="-selectedCell">
                -selectedCell
              </ref>
            </p>
          </desc>
        </method>
        <method type="NSInteger" ovadd="1.0.0">
          <sel>selectedRow</sel>
          <desc>
            <p>
              Returns the row number of the selected cell or -1
              if no cell is selected
            </p>
            <p>
              See Also:
              <ref type="method" id="-selectedColumn">
                -selectedColumn
              </ref>
              <ref type="method" id="-selectedCell">
                -selectedCell
              </ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>sendAction</sel>
          <desc>
            <p>
              Sends the cell action, if a NSMatrix's cell is
              selected and enabled, sends the NSMatrix action
              otherwise. Returns <code>YES</code> if the
              action is succesfully sent. <code>NO</code> if a
              cell is selected but not enabled or if an action can
              not be sent.
            </p>
            <p>
              See Also:
              <ref type="method" id="-sendAction:to:">
                -sendAction:to:
              </ref>
              <ref type="method" id="-selectedCell">
                -selectedCell
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sendAction:</sel>
          <arg type="SEL">aSelector</arg>
          <sel>to:</sel>
          <arg type="id">anObject</arg>
          <sel>forAllCells:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sendDoubleAction</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAction:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            Sets the message to send when a single click occurs.
            <br />
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAllowsEmptySelection:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets a <var>flag</var> to indicate whether the
              matrix should permit empty selections or should
              force one or mor cells to be selected at all times.
            </p>
            <p>
              See Also:
              <ref type="method" id="-allowsEmptySelection">
                -allowsEmptySelection
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAutoscroll:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setAutosizesCells:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSMatrix resizes its cells
              automatically
            </p>
            <p>
              See Also:
              <ref type="method" id="-autosizesCells">
                -autosizesCells
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setBackgroundColor:</sel>
          <arg type="NSColor*">aColor</arg>
          <desc>
            <p>
              Sets the background color to <var>aColor</var> and
              marks self for display. The background color is
              used to display the NSMatrix color (the space
              between the cells), not the cells (uses
              <ref type="method" id="-setCellBackgroundColor:">
                -setCellBackgroundColor:
              </ref>
              for that)
            </p>
            <p>
              See Also:
              <ref type="method" id="-backgroundColor">
                -backgroundColor
              </ref>
              <ref type="method" id="-setCellBackgroundColor:">
                -setCellBackgroundColor:
              </ref>
              <ref type="method" id="-cellBackgroundColor">
                -cellBackgroundColor
              </ref>
              <ref type="method" id="-drawsBackground">
                -drawsBackground
              </ref>
              <ref type="method" id="-setDrawsBackground:">
                -setDrawsBackground:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setCellBackgroundColor:</sel>
          <arg type="NSColor*">aColor</arg>
          <desc>
            <p>
              Sets the background color of the NSMatrix's cells to
              <var>aColor</var> and marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellBackgroundColor">
                -cellBackgroundColor
              </ref>
              <ref type="method" id="-backgroundColor">
                -backgroundColor
              </ref>
              <ref type="method" id="-setBackgroundColor:">
                -setBackgroundColor:
              </ref>
              <ref type="method" id="-setDrawsCellBackground:">
                -setDrawsCellBackground:
              </ref>
              <ref type="method" id="-drawsCellBackground">
                -drawsCellBackground
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setCellClass:</sel>
          <arg type="Class">classId</arg>
          <desc>
            <p>
              Sets the cell class used by the NSMatrix when it
              creates new cells to <var>classId</var>. The
              default cell class is a NSActionCell class
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellClass">
                -cellClass
              </ref>
              <ref type="method" id="-setPrototype:">
                -setPrototype:
              </ref>
              <ref type="method" id="-prototype">
                -prototype
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setCellSize:</sel>
          <arg type="NSSize">aSize</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDelegate:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <p>
              Sets the delegate to <var>anObject</var>. The
              delegate is used when editing a cell
            </p>
            <p>
              See Also:
              <ref type="method" id="-delegate">
                -delegate
              </ref>
              <ref type="method" id="-textDidEndEditing:">
                -textDidEndEditing:
              </ref>
              <ref type="method" id="-textDidBeginEditing:">
                -textDidBeginEditing:
              </ref>
              <ref type="method" id="-textDidChange:">
                -textDidChange:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDoubleAction:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            <p>
              Sets the message to send when a
              <strong>double</strong> click occurs. NB: In
              GNUstep the following method does *not* set
              ignoresMultiClick to <code>NO</code> as
              in the MacOS-X spec. It simply sets the doubleAction,
              as in OpenStep spec.
            </p>
            <p>
              <ref type="method" id="-doubleAction">
                -doubleAction
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDrawsBackground:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSMatrix draws its background and
              marks self for display.
            </p>
            <p>
              See Also:
              <ref type="method" id="-drawsBackground">
                -drawsBackground
              </ref>
              <ref type="method" id="-setDrawsCellBackground:">
                -setDrawsCellBackground:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setDrawsCellBackground:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <p>
              Sets whether the NSMatrix draws cells backgrounds
              and marks self for display
            </p>
            <p>
              See Also:
              <ref type="method" id="-drawsCellBackground">
                -drawsCellBackground
              </ref>
              <ref type="method" id="-setDrawsBackground:">
                -setDrawsBackground:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setErrorAction:</sel>
          <arg type="SEL">aSelector</arg>
          <desc>
            <p>
              Sets the error action method to <var>aSelector</var>
              . This error method is used when in
              <ref type="method" id="-textShouldEndEditing:">
                -textShouldEndEditing:
              </ref>
              if the selected cell doe not have a valid text object
            </p>
            <p>
              See Also:
              <ref type="method" id="-errorAction">
                -errorAction
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setIntercellSpacing:</sel>
          <arg type="NSSize">aSize</arg>
          <desc>
            <p>
              Sets the space size between cells to
              <var>aSize</var> and resizes the matrix to fits the
              new cells spacing.
            </p>
            <p>
              See Also:
              <ref type="method" id="-intercellSpacing">
                -intercellSpacing
              </ref>
              <ref type="method" id="-sizeToCells">
                -sizeToCells
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setKeyCell:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setMode:</sel>
          <arg type="NSMatrixMode">aMode</arg>
          <desc>
            <p>
              Sets the NSMatrix's mode to <var>aMode</var>. See
              <ref type="type" id="NSMatrixMode">
                NSMatrixMode
              </ref>
              for more informations. By default the mode is
              <ref type="type" id="NSMatrixMode">
                NSRadioModeMatrix
              </ref>
              .
            </p>
            <p>
              See Also:
              <ref type="method" id="-setMode:">
                -setMode:
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setNextText:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <p>
              Sets the next key view to <var>anObject</var>
            </p>
            <p>
              See Also:
              <ref type="method" id="-nextText">
                -nextText
              </ref>
              [NSView-setNextKeyView:
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPreviousText:</sel>
          <arg type="id">anObject</arg>
          <desc>
            <p>
              Sets the previous key view to <var>anObject</var>
            </p>
            <p>
              See Also:
              <ref type="method" id="-previousText">
                -previousText
              </ref>
              [NSView-setPreviousKeyView:
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setPrototype:</sel>
          <arg type="NSCell*">aCell</arg>
          <desc>
            <p>
              Sets the prototype cell used by the NSMatrix when it
              creates new cells to <var>aCell</var>. The
              default cell is NSActionCell
            </p>
            <p>
              See Also:
              <ref type="method" id="-cellClass">
                -cellClass
              </ref>
              <ref type="method" id="-setPrototype:">
                -setPrototype:
              </ref>
              <ref type="method" id="-prototype">
                -prototype
              </ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setScrollable:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setSelectionByRect:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setSelectionFrom:</sel>
          <arg type="NSInteger">startPos</arg>
          <sel>to:</sel>
          <arg type="NSInteger">endPos</arg>
          <sel>anchor:</sel>
          <arg type="NSInteger">anchorPos</arg>
          <sel>highlight:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setState:</sel>
          <arg type="NSInteger">value</arg>
          <sel>atRow:</sel>
          <arg type="NSInteger">row</arg>
          <sel>column:</sel>
          <arg type="NSInteger">column</arg>
          <desc>
            <p>
              Sets the state of the cell at <var>row</var>
              <var>row</var> and <var>column</var> to
              <var>value</var>. If the NSMatrix's mode is
              NSRadioModeMatrix it deselects the cell
              currently selected if needed.
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setTabKeyTraversesCells:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setToolTip:</sel>
          <arg type="NSString*">toolTipString</arg>
          <sel>forCell:</sel>
          <arg type="NSCell*">cell</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>setValidateSize:</sel>
          <arg type="BOOL">flag</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sizeToCells</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sortUsingFunction:</sel>
          <arg type="NSComparisonResult(*)(id element1,id element2,void*userData)">comparator</arg>
          <sel>context:</sel>
          <arg type="void*">context</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>sortUsingSelector:</sel>
          <arg type="SEL">comparator</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>tabKeyTraversesCells</sel>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>textDidBeginEditing:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
            <p>
              Invokes when the text cell starts to be
              editing.This methods posts a
              NSControlTextDidBeginEditingNotification
              with a dictionary containing the NSFieldEditor as
              user info
            </p>
            <p>
              See Also:
              <ref type="method" id="-postNotificationName:object:userInfo:" class="NSNotificationCenter">[NSNotificationCenter -postNotificationName:object:userInfo:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>textDidChange:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
            <p>
              Invokes when the text cell is changed. This
              methods posts a
              NSControlTextDidChangeNotification
              with a dictionary containing the NSFieldEditor as
              user info
            </p>
            <p>
              See Also:
              <ref type="method" id="-postNotificationName:object:userInfo:" class="NSNotificationCenter">[NSNotificationCenter -postNotificationName:object:userInfo:]</ref>
            </p>
          </desc>
        </method>
        <method type="void" ovadd="1.0.0">
          <sel>textDidEndEditing:</sel>
          <arg type="NSNotification*">aNotification</arg>
          <desc>
            <p>
              Invokes when the text cell is changed. This
              methods posts a
              NSControlTextDidEndEditingNotification
              a dictionary containing the NSFieldEditor as user info
            </p>
            <p>
              See Also:
              <ref type="method" id="-postNotificationName:object:userInfo:" class="NSNotificationCenter">[NSNotificationCenter -postNotificationName:object:userInfo:]</ref>
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>textShouldBeginEditing:</sel>
          <arg type="NSText*">aTextObject</arg>
          <desc>
            <p>
              Asks to the delegate (if it implements
              <ref type="method" id="-control:textShouldBeginEditing:">-control:textShouldBeginEditing:</ref>) if the text should be edit. Returns <code>YES</code> if the delegate does not implement this method
            </p>
          </desc>
        </method>
        <method type="BOOL" ovadd="1.0.0">
          <sel>textShouldEndEditing:</sel>
          <arg type="NSText*">aTextObject</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
        <method type="NSString*" ovadd="1.0.0">
          <sel>toolTipForCell:</sel>
          <arg type="NSCell*">cell</arg>
          <desc>
            <em>Description forthcoming.</em>
          </desc>
        </method>
      </class>
    </chapter>
    <chapter>
      <heading>
        Software documentation for the NSMatrixDelegate
        protocol
      </heading>
      <protocol name="NSMatrixDelegate" ovadd="1.0.0">
        <declared>AppKit/NSMatrix.h</declared>
        <conform>NSControlTextEditingDelegate</conform>
        <desc>
          <em>Description forthcoming.</em>
        </desc>
      </protocol>
    </chapter>
  </body>
</gsdoc>
